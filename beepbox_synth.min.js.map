{"version":3,"names":["_a","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","TypePresets","sampleLoadingState","constructor","statusTable","urlTable","totalSamples","samplesLoaded","SampleLoadedEvent","Event","super","SampleLoadEvents","EventTarget","sampleLoadEvents","startLoadingSample","url","chipWaveIndex","presetSettings","rawLoopOptions","customSampleRate","sampleLoaderAudioContext","AudioContext","sampleRate","closedSampleLoaderAudioContext","chipWave","Config","chipWaves","rawChipWave","rawChipWaves","rawRawChipWave","rawRawChipWaves","fetch","response","ok","arrayBuffer","Error","decodeAudioData","audioBuffer","samples","centerWave","Array","from","getChannelData","integratedSamples","performIntegral","length","dispatchEvent","close","catch","error","alert","loadScript","willReloadForCustomSamples","script","document","createElement","src","head","appendChild","addEventListener","event","loadBuiltInSamples","set","defaultIntegratedSamples","defaultSamples","name","expression","isSampled","isPercussion","extraSampleDetune","startIndex","index","integratedChipWave","dictionary","chipWaveSamples","kicksample","snaresample","pianosample","WOWsample","overdrivesample","trumpetsample","saxophonesample","orchhitsample","detatchedviolinsample","synthsample","sonic3snaresample","comeonsample","choirsample","overdrivensample","flutesample","legatoviolinsample","tremoloviolinsample","amenbreaksample","pizzicatoviolinsample","timallengruntsample","tubasample","loopingcymbalsample","kickdrumsample","snaredrumsample","closedhihatsample","foothihatsample","openhihatsample","crashsample","pianoC4sample","liverpadsample","marimbasample","susdotwavsample","wackyboxttssample","peppersteak1","peppersteak2","vinyl","slapbass","hdeboverdrive","sunsoftbass","masculinechoir","femininechoir","southtololoche","harp","panflute","krumhorn","timpani","crowdhey","warioland4brass","warioland4organ","warioland4daow","warioland4hourchime","warioland4tick","kirbykick","kirbysnare","kirbybongo","kirbyclick","funkkick","funksnare","funksnareleft","funksnareright","funktomhigh","funktomlow","funkhihatclosed","funkhihathalfopen","funkhihatopen","funkhihatopentip","funkhihatfoot","funkcrash","funkcrashtip","funkride","chipWaveIndexOffset","chipWaveSample","chronoperc1finalsample","synthkickfmsample","woodclicksample","acousticsnaresample","catpaintboxsample","gameboypaintboxsample","mariopaintboxsample","drumpaintboxsample","yoshipaintboxsample","starpaintboxsample","fireflowerpaintboxsample","dogpaintbox","oinkpaintbox","swanpaintboxsample","facepaintboxsample","console","log","generateSineWave","wave","Float32Array","sineWaveLength","i","Math","sin","PI","generateTriWave","asin","generateTrapezoidWave","drive","max","min","generateSquareWave","phaseWidth","centerPoint","abs","generateSawWave","inverse","generateQuasiSineWave","round","sum","average","push","centerAndNormalizeWave","magn","magnAvg","cumulative","newWave","getPulseWidthRatio","pulseWidth","pulseWidthRange","getDrumWave","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","ultraboxnewchipnoiserand","pow","clz32","b3","b4","b5","b6","b0","b1","b2","white","lastOut","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","highIndex","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","cos","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","effectsIncludeNoteFilter","effectsIncludeDistortion","effectsIncludeBitcrusher","effectsIncludePanning","effectsIncludeChorus","effectsIncludeEcho","effectsIncludeReverb","effectsIncludeRingModulation","effectsIncludeGranular","calculateRingModHertz","sliderHz","sliderHzOffset","ringModHzRange","floor","ringModMinHz","ringModMaxHz","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","jsonFormat","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","octaveMin","octaveMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","supersawBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","granularOutputLoudnessCompensation","raw","newArray","Object","assign","key","rawChipToIntegrated","firstIndexForSamplesInChipWaveList","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","filterMorphCount","filterSimpleCutRange","filterSimplePeakRange","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","type","delayTicks","vibratoTypes","periodsSeconds","period","arpSpeedScale","unisons","voices","spread","offset","sign","effectNames","effectOrder","noteSizeMax","volumeRange","volumeLogScale","panCenter","panMax","panDelaySecondsMax","ringModRange","rmHzOffsetCenter","rmHzOffsetMax","rmHzOffsetMin","granularRange","grainSizeMin","grainSizeMax","grainSizeStep","grainRangeMax","grainAmountsMax","granularEnvelopeType","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","maxPitchOrOperatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","algorithms6Op","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","newEnvelopes","feedbacks","indices","feedbacks6Op","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthStepPower","supersawVoiceCount","supersawDynamismMax","supersawSpreadMax","supersawShapeMax","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","pitchOctaves","modCount","maxPitch","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","detuneMin","songDetuneMin","songDetuneMax","unisonVoicesMin","unisonVoicesMax","unisonSpreadMin","unisonSpreadMax","unisonOffsetMin","unisonOffsetMax","unisonExpressionMin","unisonExpressionMax","unisonSignMin","unisonSignMax","sineWaveMask","sineWave","perEnvelopeSpeedIndices","perEnvelopeSpeedToIndices","perEnvelopeBoundMin","perEnvelopeBoundMax","randomEnvelopeSeedMax","randomEnvelopeStepsMax","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","enableAcousticSustain","sustainTypeNames","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","compatibleInstruments","operatorWaves","pwmOperatorWaves","barEditorHeight","modulators","pianoName","maxRawVol","newNoteVol","forSong","convertRealFactor","associatedEffect","maxIndex","promptName","promptDesc","ceil","invertSliderIndicator","test","navigator","userAgent","EditorConfig","valueToPreset","presetValue","categoryIndex","presetIndex","presetCategories","presets","midiProgramToPresetValue","program","category","preset","generalMidi","midiProgram","nameToPresetValue","presetName","instrumentToPreset","instrument","factor","countBits","n","isPowerOf2","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","releaseNotesURL","isOnMac","platform","ctrlSymbol","ctrlName","customType","settings","eqFilter","transition","fadeInSeconds","chord","unison","cutoffHz","linearGain","vibrato","isNoise","filterCutoffHz","filterResonance","filterEnvelope","reverb","dynamism","shape","algorithm","feedbackType","feedbackAmplitude","operators","frequency","target","envelope","eqFilterType","eqSimpleCut","eqSimplePeak","envelopeSpeed","discreteEnvelope","panDelay","waveform","customChipWave","noteFilter","harmonics","stringSustain","stringSustainType","feedbackEnvelope","volume","fastTwoNoteArp","arpeggioSpeed","noteFilterType","noteSimpleCut","noteSimplePeak","pitchEnvelopeStart","pitchEnvelopeEnd","perEnvelopeSpeed","perEnvelopeLowerBound","perEnvelopeUpperBound","isDrum","midiSubharmonicOctaves","interval","bitcrusherOctave","bitcrusherQuantization","distortion","vibratoDepth","vibratoDelay","vibratoSpeed","vibratoType","chorus","eqSubFilters0","noteSubFilters0","spectrum","pulseEnvelope","noteSubFilters1","eqSubFilters1","drums","pitchShiftSemitones","clicklessTransition","echoSustain","echoDelayBeats","pan","customChipWaveIntegral","detuneCents","envelopeInverse0","envelopeInverse1","envelopeInverse2","envelopeInverse3","envelopeInverse4","isUsingAdvancedLoopControls","chipWaveLoopStart","chipWaveLoopEnd","chipWaveLoopMode","chipWavePlayBackwards","chipWaveStartOffset","aliases","unisonVoices","unisonSpread","unisonOffset","unisonExpression","unisonSign","decimalOffset","customAlgorithm","mods","customFeedback","phaserMix","phaserFreq","phaserFeedback","phaserStages","ringMod","ringModHz","rmWaveformIndex","rmPulseWidth","eqSubFilters4","noteSubFilters2","noteSubFilters4","pitchEnvelopeInverse","pitchEnvelopeStart0","pitchEnvelopeEnd0","pitchEnvelopeStart1","pitchEnvelopeEnd1","pitchEnvelopeStart2","pitchEnvelopeEnd2","steps","seed","granular","grainSize","grainAmounts","grainRange","discrete","monoChordTone","ringModWaveformIndex","eqSubFilters2","eqSubFilters3","unisonBuzzes","noteSubFilters3","Deque","_capacity","_buffer","undefined","_mask","_offset","_count","pushFront","element","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","get","remove","oldBuffer","size","events","activeEvents","listeners","raise","eventType","eventData","extraEventData","pop","listen","callback","unlisten","lisen","indexOf","splice","unlistenAll","FilterCoefficients","a","b","order","linearGain0thOrder","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","feedback","highPass2ndOrderButterworth","highShelf2ndOrder","slope","A","Aplus","Aminus","sqrtA2Alpha","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","warpInfinityToNyquist","atan","PRIME32_1","PRIME32_2","PRIME32_3","PRIME32_4","PRIME32_5","encoder","xxHash32","input","buffer","TextEncoder","encode","acc","accN","limit","lane","laneN0","laneN1","laneNP","acc0","acc1","epsilon","clamp","val","validateRange","parseFloatWithDefault","defaultValue","parseFloat","Number","isNaN","parseIntWithDefault","parseInt","encode32BitNumber","base64IntToCharCode","decode32BitNumber","compressed","charIndex","base64CharCodeToInt","charCodeAt","encodeUnisonSettings","v","o","cleanS","cleanSDivided","cleanO","cleanODivided","cleanE","cleanI","convertLegacyKeyToKeyAndOctave","rawKeyIndex","octave","BitFieldReader","source","_bits","_readIndex","read","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","clear","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","other","encodeBase64","lengthBase64","makeNotePin","time","Note","pitch","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","instruments","cloneNotes","note","reset","toJsonObject","song","channel","isModChannel","noteArray","mod","volumeCap","getVolumeCapForSetting","modFilterTypes","pointArray","useVol","tick","rhythm","pitchBend","forMod","noteObject","points","patternObject","patternInstruments","fromJsonObject","importedPartsPerBeat","isNoiseChannel","format","toLowerCase","isArray","instrumentCount","getMaxInstrumentsPerPatternForChannel","maxNoteCount","beatsPerBar","k","startInterval","pointObject","lowestPitch","highestPitch","oldMin","newMin","old","Operator","copy","CustomAlgorithm","fromPreset","carriers","modulation","CustomFeedBack","inIndices","SpectrumWave","hash","isHarmonic","markCustomWaveDirty","hashMult","Synth","fittingPowerOfTwo","point","SpectrumWaveState","_hash","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","value1","value2","octave1","octave2","HarmonicsWave","HarmonicsWaveState","instrumentType","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","performIntegralOld","Grain","delayLinePosition","ageInSamples","maxAgeInSamples","parabolicEnvelopeAmplitude","parabolicEnvelopeSlope","parabolicEnvelopeCurve","rcbEnvelopeAmplitude","rcbEnvelopeAttackIndex","rcbEnvelopeReleaseIndex","rcbEnvelopeSustain","initializeParabolicEnvelope","durationInSamples","invDuration","invDurationSquared","updateParabolicEnvelope","initializeRCBEnvelope","updateRCBEnvelope","addDelay","FilterControlPoint","freq","gain","freqSetting","gainSetting","getHz","getHzFromSettingValue","getSettingValueFromHz","hz","getRoundedSettingValueFromHz","getLinearGain","peakMult","power","neutral","interpolatedPower","getRoundedSettingValueFromLinearGain","toCoefficients","freqMult","getVolumeCompensationMult","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","FilterSettings","controlPoints","controlPointCount","addPoint","controlPoint","filterArray","filterObject","filtersCanMorph","filterA","filterB","lerpFilters","pos","lerpedFilter","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","finalRadians","legacyFilter","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","convertLegacySettingsForSynth","allowFirstOrder","EnvelopeSettings","isNoiseEnvelope","tempEnvelopeSpeed","tempEnvelopeLowerBound","tempEnvelopeUpperBound","envelopeObject","isTremolo2","Boolean","Instrument","chipNoise","eqFilterSimpleCut","eqFilterSimplePeak","noteFilterSimpleCut","noteFilterSimplePeak","eqSubFilters","noteSubFilters","fadeIn","fadeOut","envelopeCount","pitchShift","detune","legacyTieOver","supersawDynamism","supersawSpread","supersawShape","bitcrusherFreq","ringModulation","ringModulationHz","ringModPulseWidth","ringModHzOffset","echoDelay","algorithm6Op","feedbackType6Op","customFeedbackType","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modInstruments","modEnvelopeNumbers","invalidModulators","isNoiseInstrument","spectrumWave","wavePrev","setTypeAndReset","legacySettings","forceSimpleFilter","filterCutoff","legacyFilterEnv","legacyPulseEnv","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","detuneToCents","fadeInSettingToSeconds","fadeOutSettingToTicks","getDrumsetEnvelope","operatorArray","operator","Float64Array","useSlowerRhythm","legacyGlobalReverb","legacyEffectsNames","transitionProperty","binary","seamless","sudden","hard","smooth","soft","slide","secondsToFadeInSetting","ticksToFadeOutSetting","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","potentialPitchShift","centsToDetune","vibratoProperty","legacyVibratoNames","findIndex","legacyEnvelopeNames","custom","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","modboxWaveNames","sax","guitar","viola","brass","lyre","piccolo","squaretooth","flatline","sandboxWaveNames","euphonium","recorder","contrabass","zefboxWaveNames","squaretal","sawtal","pulse","miscWaveNames","test1","intense","paandorasboxWaveNames","kick","snare","piano1","WOW","overdrive","trumpet","saxophone","orchestrahit","synth","sonic3snare","choir","overdriveguitar","flute","tuba","loopingcymbal","standardkick","standardsnare","closedhihat","foothihat","openhihat","crashcymbal","pianoC4","marimba","susdotwav","wackyboxtts","rawName","table","potentialChipWaveIndex","feedback6Op","synthboxLegacyFeedbacks","synthboxFeedbackType","operatorObject","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","envelopeInverse","getLargestControlPointCount","forNoteFilter","largest","frequencyFromPitch","makeEmpty","supportsEnvelopeTarget","envelopeSettings","automationTarget","useControlPointCount","clearInvalidEnvelopeTargets","envelopeIndex","getTransition","getFadeInSeconds","getFadeOutTicks","Channel","patterns","bars","muted","Song","string","scaleCustom","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","getNewNoteVolume","isMod","modChannel","modInstrument","vol","currentIndex","tempoIndex","tempo","chorusIndex","reverbIndex","panningIndex","panDelayIndex","distortionIndex","detuneIndex","vibratoDepthIndex","vibratoSpeedIndex","vibratoDelayIndex","arpSpeedIndex","bitCrushIndex","freqCrushIndex","echoIndex","echoDelayIndex","pitchShiftIndex","ringModIndex","ringModHertzIndex","granularIndex","grainAmountIndex","grainSizeIndex","grainRangeIndex","envSpeedIndex","perEnvSpeedIndex","perEnvLowerIndex","perEnvUpperIndex","instrumentIndex","getVolumeCap","modulator","cap","modSetting","filterType","fromBase64String","initToDefault","getChannelCount","pitchChannelCount","noiseChannelCount","modChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","getMaxInstrumentsPerPattern","channelIndex","getChannelIsNoise","getChannelIsMod","andResetChannels","scale","loopStart","loopLength","barCount","patternsPerChannel","title","pattern","bar","toBase64String","bits","_variant","_latestSlarmoosBoxVersion","encodedSongTitle","encodeURIComponent","usingSubFilterBitfield","encodedChannelName","harmonicsBits","encodedLoopMode","encodedReleaseMode","spectrumBits","checkboxValues","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","neededModInstrumentIndexBits","modFilter","modEnvelope","status","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","shapeIndex","unshift","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","customSamplesStr","customSamples","join","slice","_envelopeFromLegacyIndex","legacyIndex","_clearSamples","JSON","parse","substring","variantTest","fromBeepBox","fromJummBox","fromGoldBox","fromUltraBox","fromSlarmoosBox","_latestBeepboxVersion","_oldestBeepboxVersion","_latestJummBoxVersion","_oldestJummBoxVersion","_latestGoldBoxVersion","_oldestGoldBoxVersion","_latestUltraBoxVersion","_oldestUltraBoxVersion","_oldestSlarmoosBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","beforeNine","willLoadLegacySamplesForOldSongs","compressed_array","replaceAll","split","shift","_restoreChipWaveListToDefault","willLoadLegacySamples","willLoadNintariboxSamples","willLoadMarioPaintboxSamples","customSampleUrls","customSamplePresets","parseOldSyntax","_parseAndConfigureCustomSample","customSamplePresetsMap","legacySettingsCache","command","instrumentChannelIterator","instrumentIndexIterator","useSlowerArpSpeed","songNameLength","decodeURIComponent","channelCount","instrumentsPerChannel","instrumentsFlagBits","rhythmMap","newRhythm","legacyWaves","chipWaveReal","chipWaveCounter","typeCheck","originalControlPointCount","originalSubfilterControlPointCount","sampleLoopInfoEncodedLength","sampleLoopInfoEncoded","sampleLoopInfo","atob","entry","info","URL","pregoldToEnvelope","aa","sustainValue","legacyEffects","legacyEnvelopes","originalValue","unisonLength","unisonSpreadNegative","unisonOffsetNegative","unisonExpressionNegative","unisonSignNegative","nextValue","restoreLimiterDefaults","channelNameLength","carrierCountTemp","tempModArray","chipWaveForCompat","freqToGold3","freqToUltraBox","jummToUltraEnvelope","slarURL3toURL4Envelope","envelopeDiscrete","updatedEnvelopes","pitchEnvelopeCompact","instrumentPitchEnvelopeStart","instrumentPitchEnvelopeEnd","instrumentEnvelopeInverse","pre3To3g","jummToG","byteCount","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","songReverbChannel","songReverbInstrument","songReverbIndex","shouldCorrectTempoMods","jummboxTempoMin","jumfive","detuneScaleNotes","newPattern","newNotes","noteCount","useOldShape","pinCount","initialSize","bendCount","pinObj","intervalIter","noteIsForTempoMod","tempoOffset","isBackwards","restLength","patternIndex","lowestPart","chn","window","location","setTimeout","reload","_isProperUrl","customSampleUrlIndex","urlSliced","isCustomPercussive","customRootKey","presetIsUsingAdvancedLoopControls","presetChipWaveLoopStart","presetChipWaveLoopEnd","presetChipWaveStartOffset","presetChipWaveLoopMode","presetChipWavePlayBackwards","parsedSampleOptions","optionsStartIndex","optionsEndIndex","rawOptions","rawOption","optionCode","charAt","optionData","parsedUrl","sliceForSampleRate","sliceForRootKey","urlWithNamedOptions","namedOptions","pathname","replace","isCustomSampled","rootKey","customSamplePresetSettings","customSamplePreset","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","sequenceArray","l","channelObject","sequence","_format","customScale","keyOctave","introBars","loopBars","ticksPerBeat","beatsPerMinute","songEq","jsonObject","shouldLoadLegacySamples","instrumentObjects","waveName","names","oldNames","veryOldNames","includes","oldScaleNames","enigma","scaleName","letter","toUpperCase","symbol","C","D","E","F","G","B","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","newModChannels","getPattern","getBeatsPerMinute","maxValue","PickedString","delayLine","allPassG","allPassGDelta","sustainFilterA1","sustainFilterA1Delta","sustainFilterA2","sustainFilterA2Delta","sustainFilterB0","sustainFilterB0Delta","sustainFilterB1","sustainFilterB1Delta","sustainFilterB2","sustainFilterB2Delta","delayIndex","allPassSample","allPassPrevInput","sustainFilterSample","sustainFilterPrevOutput2","sustainFilterPrevInput1","sustainFilterPrevInput2","fractionalDelaySample","prevDelayLength","delayResetOffset","update","instrumentState","tone","stringIndex","roundedSamplesPerTick","stringDecayStart","stringDecayEnd","sustainType","allPassCenter","samplesPerSecond","phaseDeltaStart","phaseDeltas","phaseDeltaScale","phaseDeltaScales","phaseDeltaEnd","radiansPerSampleStart","radiansPerSampleEnd","centerHarmonicStart","centerHarmonicEnd","allPassRadiansStart","allPassRadiansEnd","shelfRadians","decayCurveStart","decayCurveEnd","register","registerShelfCenter","registerLowpassCenter","decayRateStart","decayRateEnd","expressionDecayStart","expressionDecayEnd","tempFilterStartCoefficients","tempFrequencyResponse","allPassGStart","allPassPhaseDelayStart","tempFilterEndCoefficients","allPassGEnd","allPassPhaseDelayEnd","brightnessType","shelfGainStart","shelfGainEnd","cornerHardness","lowpass1stOrderCutoffRadiansStart","lowpass1stOrderCutoffRadiansEnd","lowpass2ndOrderCutoffRadiansStart","lowpass2ndOrderCutoffRadiansEnd","lowpass2ndOrderGainStart","lowpass2ndOrderGainEnd","sustainFilterA1Start","sustainFilterA2Start","sustainFilterB0Start","sustainFilterB1Start","sustainFilterB2Start","sustainFilterPhaseDelayStart","sustainFilterA1End","sustainFilterA2End","sustainFilterB0End","sustainFilterB1End","sustainFilterB2End","sustainFilterPhaseDelayEnd","periodLengthStart","periodLengthEnd","minBufferLength","delayLength","delayLengthEnd","delayLengthDelta","pitchChanged","reinitializeImpulse","likelyMaximumLength","newDelayLine","oldDelayBufferMask","startCopyingFromIndex","delayBufferMask","startImpulseFrom","startZerosFrom","stopZerosAt","impulseWave","impulseWaveLength","impulsePhaseDelta","fadeDuration","startImpulseFromSample","stopImpulseAt","stopImpulseAtSample","impulsePhase","prevWaveIntegral","impulsePhaseInt","nextWaveIntegral","phaseRatio","sample","combinedFade","curvedFade","EnvelopeComputer","noteSecondsStart","noteSecondsStartUnscaled","noteSecondsEnd","noteSecondsEndUnscaled","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsStartUnscaled","prevNoteSecondsEnd","prevNoteSecondsEndUnscaled","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","tickTimeEnd","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","startPinTickAbsolute","startPinTickDefaultPitch","startPinTickPitch","envelopeStarts","envelopeEnds","_modifiedEnvelopeIndices","_modifiedEnvelopeCount","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","tickTimeStartReal","secondsPerTick","timeScale","secondsPerTickUnscaled","atNoteStart","forceContinueAtStart","tickTimeEndReal","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","computeTicksSinceStart","getPitchValue","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","isDiscrete","globalEnvelopeSpeed","timeSinceStart","defaultPitch","isModActive","secondsPerTickScaled","computePitchEnvelope","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","tmpNoteFilterStart","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","unspedTime","beats","noteSize","isDrumset","notePinStart","boundAdjust","noteSizeToVolumeMult","hashMax","timeHash","pitchHash","noteHash","weightedAverage","trap","saw","tri","attack","lin","calculateBends","monophonic","arpTime","tonePitch","lastInterval","startNote","endNote","envelopeLowerBound","envelopeUpperBound","range","computeDrumsetEnvelopes","drumsetFilterEnvelope","beatsPerPart","partTimeStart","partTimeEnd","computeDrumsetEnvelope","Tone","fill","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","stringSustainStart","stringSustainEnd","noiseSamples","phases","directions","chipWaveCompletions","chipWavePrevWaves","chipWaveCompletionsLastWave","expressionDelta","operatorExpressions","operatorExpressionDeltas","prevPitchExpressions","prevVibrato","prevStringDecay","pulseWidthDelta","supersawDynamismDelta","supersawUnisonDetunes","supersawShapeDelta","supersawDelayLength","supersawDelayLengthDelta","supersawDelayLine","supersawDelayIndex","supersawPrevPhaseDelta","pickedStrings","noteFilters","noteFilterCount","initialNoteFilterInput1","initialNoteFilterInput2","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","envelopeComputer","pickedString","InstrumentState","awake","computed","tonesAddedInThisTick","flushingDelayLines","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","activeModTones","releasedTones","liveInputTones","synthesizer","noisePitchFilterMult","volumeScale","vibratoTime","nextVibratoTime","envelopeTime","eqFilterVolume","eqFilterVolumeDelta","mixVolume","mixVolumeDelta","delayInputMult","delayInputMultDelta","granularMix","granularMixDelta","granularDelayLine","granularDelayLineIndex","granularMaximumDelayTimeInSeconds","usesRandomGrainLocation","granularDelayLineDirty","computeGrains","ringModMix","ringModMixDelta","ringModPhase","ringModPhaseDelta","ringModPhaseDeltaScale","ringModMixFade","ringModMixFadeDelta","distortionDelta","distortionDrive","distortionDriveDelta","distortionFractionalInput1","distortionFractionalInput2","distortionFractionalInput3","distortionPrevInput","distortionNextOutput","bitcrusherPrevInput","bitcrusherCurrentOutput","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFilters","eqFilterCount","initialEqFilterInput1","initialEqFilterInput2","panningDelayLine","panningDelayPos","panningVolumeL","panningVolumeR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetL","panningOffsetR","panningOffsetDeltaL","panningOffsetDeltaR","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusVoiceMult","chorusVoiceMultDelta","chorusCombinedMult","chorusCombinedMultDelta","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPos","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoMult","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMult","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","granularGrains","granularMaximumGrains","granularGrainsLength","allocateNecessaryBuffers","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","allocateEchoBuffers","granularDelayLineSizeInSeconds","granularDelayLineSizeInSamples","oldGrainsLength","safeEchoDelaySteps","safeEchoDelayBufferSize","newDelayLineL","newDelayLineR","oldMask","deactivate","resetAllEffects","compute","getInstrumentSynthFunction","updateWaves","getTicksIntoBar","getCurrentPart","envelopeSpeeds","useEnvelopeSpeed","getModValue","isInteger","usesGranular","usesRingModulation","usesDistortion","usesBitcrusher","usesPanning","usesChorus","usesEcho","usesReverb","granularChance","granularMixEnd","iterations","granularMinGrainSizeInMilliseconds","granularGrainSizeInSeconds","granularGrainSizeInSamples","granularDelayLineLength","grainIndex","grain","minDelayTimeInSeconds","maxDelayTimeInSeconds","useDistortionStart","useDistortionEnd","distortionSliderStart","distortionSliderEnd","distortionStart","distortionEnd","distortionDriveStart","distortionDriveEnd","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterSettingsStart","eqFilterSettingsEnd","startPoint","startSimpleFreq","startSimpleGain","endSimpleFreq","endSimpleGain","filterChanges","endPoint","eqFilterSettings","tmpEqFilterStart","tmpEqFilterEnd","mainInstrumentVolume","instrumentVolumeToVolumeMult","mixVolumeEnd","startVal","endVal","eqFilterVolumeStart","eqFilterVolumeEnd","delayInputMultStart","delayInputMultEnd","panEnvelopeStart","panEnvelopeEnd","usePanStart","usePanEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","usePanDelayStart","usePanDelayEnd","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","chorusEnvelopeStart","chorusEnvelopeEnd","useChorusStart","useChorusEnd","chorusStart","chorusEnd","chorusCombinedMultStart","chorusCombinedMultEnd","useRingModStart","useRingModEnd","useRingModEnvelopeStart","useRingModEnvelopeEnd","useRingModHzStart","useRingModHzEnd","useRingModHzEnvelopeStart","useRingModHzEnvelopeEnd","ringModStart","ringModEnd","ringModPhaseDeltaStart","ringModPhaseDeltaEnd","maxEchoMult","averageEchoDelaySeconds","echoSustainEnvelopeStart","echoSustainEnvelopeEnd","useEchoSustainStart","useEchoSustainEnd","echoMultStart","echoMultEnd","echoDelayEnvelopeStart","echoDelayEnvelopeEnd","useEchoDelayStart","useEchoDelayEnd","tmpEchoDelayOffsetStart","tmpEchoDelayOffsetEnd","maxReverbMult","reverbEnvelopeStart","reverbEnvelopeEnd","useReverbStart","useReverbEnd","reverbStart","reverbEnd","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","attenuationPerSecond","averageMult","averageReverbDelaySeconds","progressInTick","progressAtEndOfTick","_drumsetIndexToSpectrumOctave","getDrumsetWave","drumsetIndexReferenceDelta","ChannelState","singleSeamlessInstrument","syncSongState","channelState","initModFilters","tmpNoteFilterEnd","warmUpSynthesizer","getSamplesPerTick","dummyArray","isPlayingSong","synthesize","computeLatestModValues","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","heldMods","beat","currentBar","instrumentIdx","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","songFilterParam","tgtSong","setModValue","usedInstruments","tgtPattern","eqFilterParam","noteFilterParam","modulatorAdjust","tgtInstrument","determineInvalidModulators","tgtInstrumentList","str","operatorAmplitudeCurve","playing","recording","isRecording","playhead","playheadInternal","remainder","tickSampleCountdown","isAtStartOfTick","prevBar","getSamplesPerBar","getTotalSamples","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","ended","foundMod","find","sort","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getTotalBars","useLoopCount","loopRepeatCount","preferLowerLatency","anticipatePoorPerformance","liveInputDuration","liveBassInputDuration","liveInputStarted","liveBassInputStarted","liveInputPitches","liveBassInputPitches","liveInputChannel","liveBassInputChannel","liveInputInstruments","liveBassInputInstruments","oscRefreshEventTimer","oscEnabled","enableMetronome","countInMetronome","renderingSong","wantToSkip","nextBar","isAtEndOfTick","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","loopBarStart","loopBarEnd","tonePool","tempMatchedPitchTones","startedMetronome","metronomeSamplesRemaining","metronomeAmplitude","metronomePrevAmplitude","metronomeFilter","songEqFilterVolume","songEqFilterVolumeDelta","songEqFiltersL","songEqFiltersR","songEqFilterCount","initialSongEqFilterInput1L","initialSongEqFilterInput2L","initialSongEqFilterInput1R","initialSongEqFilterInput2R","tempMonoInstrumentSampleBuffer","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","outputDataR","performance","now","deactivateAudio","computeDelayBufferSizes","setSong","panningDelayBufferMask","chorusDelayBufferMask","activateAudio","bufferSize","latencyHint","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","maintainLiveInput","play","pause","startRecording","resetEffects","freeAllTones","volumeStart","volumeEnd","setting","nextVal","isAnyModActive","unsetMod","isFilterModActive","channelIdx","forceHoldMods","found","holdFor","snapToStart","snapToBar","goToBar","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","getNextBar","skipBar","computeSongState","outputBufferLength","playSong","outputDataLUnfiltered","outputDataRUnfiltered","skippedBars","firstSkippedBufferIndex","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","runLength","runEnd","determineCurrentActiveTones","playModTone","barVisited","determineLiveInputTones","tonesPlayedInThisInstrument","freeReleasedTone","shouldFadeOutFast","computeTone","playTone","effectsSynth","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","useVibratoSpeed","midBeat","periods","samplesPerPeriod","tempAmplitude","filtersL","filtersR","filterCount","initialFilterInput1L","initialFilterInput2L","initialFilterInput1R","initialFilterInput2R","applyFilters","inputSampleL","sampleL","inputSampleR","sampleR","sanitizeFilters","absL","absR","limitRange","limitTarget","limitedVolume","arpEnvelopeStart","useArpeggioSpeed","maxInstrumentsPerChannel","isFinite","freeTone","newTone","releaseTone","toneIndex","bassPitches","toneList","toneCount","moveTonesIntoOrderedTempMatchedList","clearTempMatchedPitchTones","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","adjacentNotesHaveMatchingPitches","firstNote","secondNote","firstNoteInterval","notePitches","currentTick","prevNotes","nextNotes","fillCount","modToneCount","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","oldTone","partsPerBar","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","modSynth","computeChordExpression","chordExpression","intervalScale","secondsPerPart","sampleTime","specialIntervalMult","toneIsOnLastTick","intervalStart","intervalEnd","fadeExpressionStart","fadeExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","chipWaveLength","firstOffset","lastOffset","getOperatorWave","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","noteLengthTicks","tmpNoteFilter","noteFilterSettingsStart","noteFilterSettingsEnd","intervalDiff","chordSizeDiff","pitchShiftScalarStart","pitchShiftScalarEnd","modDetuneStart","modDetuneEnd","vibratoAmplitudeStart","vibratoAmplitudeEnd","vibratoStart","POSITIVE_INFINITY","getLFOAmplitude","ticksUntilVibratoStart","vibratoLfoEnd","vibratoDepthEnvelopeEnd","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","noteFilterSettings","drumsetEnvelopeComputer","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","isMono","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeStart","amplitudeEnd","amplitudeCurveStart","amplitudeCurveEnd","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","freqEndRatio","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","decimalOffsetModStart","decimalOffsetStart","useSustainStart","useSustainEnd","startFreq","unisonEnvelopeStart","unisonEnvelopeEnd","unisonStartA","unisonEndA","divisor","unisonStart","unisonEnd","unisonBStart","unisonBEnd","supersawExpressionStart","supersawExpressionEnd","minFirstVoiceAmplitude","useDynamismStart","useDynamismEnd","curvedDynamismStart","curvedDynamismEnd","firstVoiceAmplitudeStart","firstVoiceAmplitudeEnd","dynamismStart","dynamismEnd","initializeSupersaw","accumulator","normalizedPhase","zeroCrossingPhase","prevDrop","nextDrop","phaseDelta","distanceToZeroCrossing","swappedIndex","baseSpreadSlider","useSpreadStart","useSpreadEnd","averageSpreadSlider","curvedSpread","baseShape","useShapeStart","useShapeEnd","shapeStart","shapeEnd","delayLengthStart","pulseExpressionRatio","sustainEnvelopeStart","sustainEnvelopeEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulatorNumber","feedbackIndices","wrappedFmSynth","Function","loopableChipSynth","chipSynth","harmonicsSynth","pulseWidthSynth","supersawSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","fm6SynthFunctionCache","wrappedFm6Synth","wrap","voiceCount","chipFunction","loopableChipFunctionCache","chipSource","chipFunctionCache","sampleListA","voice","sampleListB","harmonicsFunction","harmonicsFunctionCache","harmonicsSource","sampleList","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","lines","usesEqFilter","signature","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","pulseFunction","pulseFunctionCache","pulseSource","data","dynamismDelta","unisonDetunes","shapeDelta","filters","initialFilterInput1","initialFilterInput2","sampleIndex","phase","supersawSample","t","detunedPhaseDelta","delaySampleTime","lowerIndex","upperIndex","delayRatio","prevDelaySample","inputSample","output","noiseFunction","noiseFunctionCache","noiseSource","spectrumFunction","spectrumFunctionCache","spectrumSource","drumFunction","drumFunctionCache","drumSource","stereoBufferIndex","envelopeTarget","tgtInstrumentState","dotTarget","lerpEndRatio","bound","findRandomZeroCrossing","phaseMask","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","instrumentVolume","volumeMultToInstrumentVolume","volumeMult","volumeMultToNoteSize","seconds","ticks","lower","upper","cents","beatsPerSecond","partsPerSecond","tickPerSecond","sanitizeDelayLine","lastIndex","mask","input1","input2","ofBar","_b"],"sources":["../build/synth/SynthConfig.js","../build/editor/EditorConfig.js","../build/synth/FFT.js","../build/synth/Deque.js","../build/global/Events.js","../build/synth/filtering.js","../node_modules/js-xxhash/dist/esm/xxHash32.js","../build/synth/synth.js"],"sourcesContent":["/*!\nCopyright (c) 2012-2022 John Nesky and contributing authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nexport const TypePresets = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"supersaw\", \"chip (custom)\", \"mod\", \"FM (6-op)\"];\nexport function getSampleLoadingStatusName(status) {\n    switch (status) {\n        case 0: return \"loading\";\n        case 1: return \"loaded\";\n        case 2: return \"error\";\n    }\n}\nexport class SampleLoadingState {\n    constructor() {\n        this.statusTable = {};\n        this.urlTable = {};\n        this.totalSamples = 0;\n        this.samplesLoaded = 0;\n    }\n}\nexport const sampleLoadingState = new SampleLoadingState();\nexport class SampleLoadedEvent extends Event {\n    constructor(totalSamples, samplesLoaded) {\n        super(\"sampleloaded\");\n        this.totalSamples = totalSamples;\n        this.samplesLoaded = samplesLoaded;\n    }\n}\nexport class SampleLoadEvents extends EventTarget {\n    constructor() {\n        super();\n    }\n}\nexport const sampleLoadEvents = new SampleLoadEvents();\nexport function startLoadingSample(url, chipWaveIndex, presetSettings, rawLoopOptions, customSampleRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\n        let closedSampleLoaderAudioContext = false;\n        const chipWave = Config.chipWaves[chipWaveIndex];\n        const rawChipWave = Config.rawChipWaves[chipWaveIndex];\n        const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\n        if (OFFLINE) {\n            if (url.slice(0, 5) === \"file:\") {\n                const dirname = yield getDirname();\n                const joined = yield pathJoin(dirname, url.slice(5));\n                url = joined;\n            }\n        }\n        fetch(url).then((response) => {\n            if (!response.ok) {\n                sampleLoadingState.statusTable[chipWaveIndex] = 2;\n                return Promise.reject(new Error(\"Couldn't load sample\"));\n            }\n            return response.arrayBuffer();\n        }).then((arrayBuffer) => {\n            return sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\n        }).then((audioBuffer) => {\n            const samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\n            const integratedSamples = performIntegral(samples);\n            chipWave.samples = integratedSamples;\n            rawChipWave.samples = samples;\n            rawRawChipWave.samples = samples;\n            if (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\n                presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\n                presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\n                presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\n                presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\n                presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\n            }\n            sampleLoadingState.samplesLoaded++;\n            sampleLoadingState.statusTable[chipWaveIndex] = 1;\n            sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n            if (!closedSampleLoaderAudioContext) {\n                closedSampleLoaderAudioContext = true;\n                sampleLoaderAudioContext.close();\n            }\n        }).catch((error) => {\n            sampleLoadingState.statusTable[chipWaveIndex] = 2;\n            alert(\"Failed to load \" + url + \":\\n\" + error);\n            if (!closedSampleLoaderAudioContext) {\n                closedSampleLoaderAudioContext = true;\n                sampleLoaderAudioContext.close();\n            }\n        });\n    });\n}\nexport function getLocalStorageItem(key, defaultValue) {\n    let value = localStorage.getItem(key);\n    if (value == null || value === \"null\" || value === \"undefined\") {\n        value = defaultValue;\n    }\n    return value;\n}\nfunction loadScript(url) {\n    const result = new Promise((resolve, reject) => {\n        if (!Config.willReloadForCustomSamples) {\n            const script = document.createElement(\"script\");\n            script.src = url;\n            document.head.appendChild(script);\n            script.addEventListener(\"load\", (event) => {\n                resolve();\n            });\n        }\n        else {\n        }\n    });\n    return result;\n}\nexport function loadBuiltInSamples(set) {\n    const defaultIndex = 0;\n    const defaultIntegratedSamples = Config.chipWaves[defaultIndex].samples;\n    const defaultSamples = Config.rawRawChipWaves[defaultIndex].samples;\n    if (set == 0) {\n        const chipWaves = [\n            { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\n            { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\n            { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\n            { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\n            { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\n            { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\n            { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\n            { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\n            { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\n            { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\n            { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\n            { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\n            { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\n            { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\n            { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\n            { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\n            { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\n            { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\n            { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\n            { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\n            { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\n            { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\n            { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\n            { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\n            { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\n            { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\n            { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\n            { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\n            { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\n            { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\n            { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\n            { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\n            { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\n            { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\n            { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\n            { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\n            { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\n            { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\n            { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\n            { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\n            { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\n            { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\n            { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\n            { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\n            { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\n            { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\n            { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\n            { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\n            { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\n        }\n        loadScript(\"samples.js\")\n            .then(() => loadScript(\"samples2.js\"))\n            .then(() => loadScript(\"samples3.js\"))\n            .then(() => loadScript(\"drumsamples.js\"))\n            .then(() => loadScript(\"wario_samples.js\"))\n            .then(() => loadScript(\"kirby_samples.js\"))\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(kicksample),\n                centerWave(snaresample),\n                centerWave(pianosample),\n                centerWave(WOWsample),\n                centerWave(overdrivesample),\n                centerWave(trumpetsample),\n                centerWave(saxophonesample),\n                centerWave(orchhitsample),\n                centerWave(detatchedviolinsample),\n                centerWave(synthsample),\n                centerWave(sonic3snaresample),\n                centerWave(comeonsample),\n                centerWave(choirsample),\n                centerWave(overdrivensample),\n                centerWave(flutesample),\n                centerWave(legatoviolinsample),\n                centerWave(tremoloviolinsample),\n                centerWave(amenbreaksample),\n                centerWave(pizzicatoviolinsample),\n                centerWave(timallengruntsample),\n                centerWave(tubasample),\n                centerWave(loopingcymbalsample),\n                centerWave(kickdrumsample),\n                centerWave(snaredrumsample),\n                centerWave(closedhihatsample),\n                centerWave(foothihatsample),\n                centerWave(openhihatsample),\n                centerWave(crashsample),\n                centerWave(pianoC4sample),\n                centerWave(liverpadsample),\n                centerWave(marimbasample),\n                centerWave(susdotwavsample),\n                centerWave(wackyboxttssample),\n                centerWave(peppersteak1),\n                centerWave(peppersteak2),\n                centerWave(vinyl),\n                centerWave(slapbass),\n                centerWave(hdeboverdrive),\n                centerWave(sunsoftbass),\n                centerWave(masculinechoir),\n                centerWave(femininechoir),\n                centerWave(southtololoche),\n                centerWave(harp),\n                centerWave(panflute),\n                centerWave(krumhorn),\n                centerWave(timpani),\n                centerWave(crowdhey),\n                centerWave(warioland4brass),\n                centerWave(warioland4organ),\n                centerWave(warioland4daow),\n                centerWave(warioland4hourchime),\n                centerWave(warioland4tick),\n                centerWave(kirbykick),\n                centerWave(kirbysnare),\n                centerWave(kirbybongo),\n                centerWave(kirbyclick),\n                centerWave(funkkick),\n                centerWave(funksnare),\n                centerWave(funksnareleft),\n                centerWave(funksnareright),\n                centerWave(funktomhigh),\n                centerWave(funktomlow),\n                centerWave(funkhihatclosed),\n                centerWave(funkhihathalfopen),\n                centerWave(funkhihatopen),\n                centerWave(funkhihatopentip),\n                centerWave(funkhihatfoot),\n                centerWave(funkcrash),\n                centerWave(funkcrashtip),\n                centerWave(funkride)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else if (set == 1) {\n        const chipWaves = [\n            { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\n        }\n        loadScript(\"nintaribox_samples.js\")\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(chronoperc1finalsample),\n                centerWave(synthkickfmsample),\n                centerWave(woodclicksample),\n                centerWave(acousticsnaresample)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else if (set == 2) {\n        const chipWaves = [\n            { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\n            { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\n            { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\n            { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\n            { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\n        }\n        loadScript(\"mario_paintbox_samples.js\")\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(catpaintboxsample),\n                centerWave(gameboypaintboxsample),\n                centerWave(mariopaintboxsample),\n                centerWave(drumpaintboxsample),\n                centerWave(yoshipaintboxsample),\n                centerWave(starpaintboxsample),\n                centerWave(fireflowerpaintboxsample),\n                centerWave(dogpaintbox),\n                centerWave(oinkpaintbox),\n                centerWave(swanpaintboxsample),\n                centerWave(facepaintboxsample)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else {\n        console.log(\"invalid set of built-in samples\");\n    }\n}\nexport class Config {\n    static generateSineWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength);\n        }\n        return wave;\n    }\n    static generateTriWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength)) / (Math.PI / 2);\n        }\n        return wave;\n    }\n    static generateTrapezoidWave(drive = 2) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength)) * drive));\n        }\n        return wave;\n    }\n    static generateSquareWave(phaseWidth = 0) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        const centerPoint = _a.sineWaveLength / 4;\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * _a.sineWaveLength / 2)\n                || ((Math.abs(i - _a.sineWaveLength - centerPoint) < phaseWidth * _a.sineWaveLength / 2))) * 2 - 1;\n        }\n        return wave;\n    }\n    static generateSawWave(inverse = false) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = ((i + (_a.sineWaveLength / 4.0)) * 2.0 / _a.sineWaveLength) % 2 - 1;\n            wave[i] = inverse ? -wave[i] : wave[i];\n        }\n        return wave;\n    }\n    static generateQuasiSineWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength));\n        }\n        return wave;\n    }\n}\n_a = Config;\nConfig.thresholdVal = -10;\nConfig.kneeVal = 40;\nConfig.ratioVal = 12;\nConfig.attackVal = 0;\nConfig.releaseVal = 0.25;\nConfig.willReloadForCustomSamples = false;\nConfig.jsonFormat = \"slarmoosbox\";\nConfig.scales = toNameMap([\n    { name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] },\n    { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] },\n    { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] },\n    { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] },\n    { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] },\n    { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] },\n    { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] },\n    { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] },\n    { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] },\n    { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] },\n    { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] },\n    { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] },\n    { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] },\n    { name: \"Blues\", realName: \"blues major\", flags: [true, false, true, true, true, false, false, true, false, true, false, false] },\n    { name: \"Blues Minor\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] },\n    { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] },\n    { name: \"Pentatonic Major\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] },\n    { name: \"Pentatonic Minor\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] },\n    { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] },\n    { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] },\n    { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] },\n    { name: \"No Dabbing (MB)\", realName: \"no dabbing\", flags: [true, true, false, true, true, true, true, true, true, false, true, false] },\n    { name: \"Jacked Toad (TB)\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\n    { name: \"Test Scale (TB)\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\n    { name: \"Test Scale (TB)\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\n    { name: \"Custom\", realName: \"custom\", flags: [true, false, false, true, false, false, false, false, false, true, true, false] },\n]);\nConfig.keys = toNameMap([\n    { name: \"C\", isWhiteKey: true, basePitch: 12 },\n    { name: \"C♯\", isWhiteKey: false, basePitch: 13 },\n    { name: \"D\", isWhiteKey: true, basePitch: 14 },\n    { name: \"D♯\", isWhiteKey: false, basePitch: 15 },\n    { name: \"E\", isWhiteKey: true, basePitch: 16 },\n    { name: \"F\", isWhiteKey: true, basePitch: 17 },\n    { name: \"F♯\", isWhiteKey: false, basePitch: 18 },\n    { name: \"G\", isWhiteKey: true, basePitch: 19 },\n    { name: \"G♯\", isWhiteKey: false, basePitch: 20 },\n    { name: \"A\", isWhiteKey: true, basePitch: 21 },\n    { name: \"A♯\", isWhiteKey: false, basePitch: 22 },\n    { name: \"B\", isWhiteKey: true, basePitch: 23 },\n]);\nConfig.blackKeyNameParents = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\nConfig.tempoMin = 1;\nConfig.tempoMax = 2000;\nConfig.octaveMin = -8;\nConfig.octaveMax = 8;\nConfig.echoDelayRange = 24;\nConfig.echoDelayStepTicks = 4;\nConfig.echoSustainRange = 8;\nConfig.echoShelfHz = 4000.0;\nConfig.echoShelfGain = Math.pow(2.0, -0.5);\nConfig.reverbShelfHz = 8000.0;\nConfig.reverbShelfGain = Math.pow(2.0, -1.5);\nConfig.reverbRange = 32;\nConfig.reverbDelayBufferSize = 16384;\nConfig.reverbDelayBufferMask = _a.reverbDelayBufferSize - 1;\nConfig.beatsPerBarMin = 1;\nConfig.beatsPerBarMax = 64;\nConfig.barCountMin = 1;\nConfig.barCountMax = 4096;\nConfig.instrumentCountMin = 1;\nConfig.layeredInstrumentCountMax = 10;\nConfig.patternInstrumentCountMax = 10;\nConfig.partsPerBeat = 24;\nConfig.ticksPerPart = 2;\nConfig.ticksPerArpeggio = 3;\nConfig.arpeggioPatterns = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\nConfig.rhythms = toNameMap([\n    { name: \"÷3 (triplets)\", stepsPerBeat: 3, roundUpThresholds: [5, 12, 18] },\n    { name: \"÷4 (standard)\", stepsPerBeat: 4, roundUpThresholds: [3, 9, 17, 21] },\n    { name: \"÷6\", stepsPerBeat: 6, roundUpThresholds: null },\n    { name: \"÷8\", stepsPerBeat: 8, roundUpThresholds: null },\n    { name: \"÷12\", stepsPerBeat: 12, roundUpThresholds: null },\n    { name: \"freehand\", stepsPerBeat: 24, roundUpThresholds: null },\n]);\nConfig.instrumentTypeNames = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\", \"FM6op\"];\nConfig.instrumentTypeHasSpecialInterval = [true, true, false, false, false, true, false, false, false, false, false];\nConfig.chipBaseExpression = 0.03375;\nConfig.fmBaseExpression = 0.03;\nConfig.noiseBaseExpression = 0.19;\nConfig.spectrumBaseExpression = 0.3;\nConfig.drumsetBaseExpression = 0.45;\nConfig.harmonicsBaseExpression = 0.025;\nConfig.pwmBaseExpression = 0.04725;\nConfig.supersawBaseExpression = 0.061425;\nConfig.pickedStringBaseExpression = 0.025;\nConfig.distortionBaseVolume = 0.011;\nConfig.bitcrusherBaseVolume = 0.010;\nConfig.granularOutputLoudnessCompensation = 0.5;\nConfig.rawChipWaves = toNameMap([\n    { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\n    { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\n    { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\n    { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\n    { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n    { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n    { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\n    { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\n    { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\n    { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\n    { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\n    { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n    { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\n    { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\n    { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\n    { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\n    { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\n    { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\n    { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\n    { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,]) },\n    { name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n    { name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\n    { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\n    { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\n    { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\n    { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\n    { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n    { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave},\n    { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\n    { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\n    { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\n    { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\n    { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\n    { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n    { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\n    { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n    { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\n    { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\n    { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\n    { name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\n    { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\n    { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\n    { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\n    { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\n    { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\n    { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 - 2, 0, 4, 1, 4, 6, 7, 3]) },\n    { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n    { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\n    { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1, 0.13 / -0.3, 0.13 / -0.5, 0.13 / -0.7, 0.13 / -0.9, 0.13 / -0.11, 0.13 / -0.31, 0.13 / -0.51, 0.13 / -0.71, 0.13 / -0.91, 0.13 / -0.12, 0.13 / -0.32, 0.13 / -0.52, 0.13 / -0.72, 0.13 / -0.92, 0.13 / -0.13, 0.13 / 0.13, 0.13 / 0.92, 0.13 / 0.72, 0.13 / 0.52, 0.13 / 0.32, 0.13 / 0.12, 0.13 / 0.91, 0.13 / 0.71, 0.13 / 0.51, 0.13 / 0.31, 0.13 / 0.11, 0.13 / 0.9, 0.13 / 0.7, 0.13 / 0.5, 0.13 / 0.3, 0.13]) },\n    { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n    { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\n    { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\n    { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n    { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\n    { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\n    { name: \"brucebox pokey 5step bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\n    { name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\n    { name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\n    { name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0, 5.0 / 55.0, -9.0, 6.5 / 6.5, -55.0, 18.5 / -26.0]) },\n    { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\n    { name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n    { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\n    { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6, -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\n    { name: \"zefbox saw narrow\", expression: 0.65, samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2, 1]) },\n    { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\n    { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\n    { name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\n    { name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\n    { name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\n    { name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\n    { name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\n    { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\n    { name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\n    { name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\n    { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\n    { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\n    { name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2, 2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\n    { name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\n    { name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\n    { name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000, -0.01208, -0.02997, -0.04382, -0.06042, -0.07529, -0.09116, -0.10654, -0.12189, -0.13751, -0.15289, -0.16849, -0.18387, -0.19974, -0.21484, -0.23071, -0.24557, -0.26144, -0.27731, -0.29141, -0.30350, -0.32416, -0.34406, -0.32947, -0.31158, -0.33725, -0.37579, -0.39746, -0.40201, -0.40906, -0.44180, -0.47229, -0.47379, -0.47733, -0.45239, -0.33954, -0.22894, -0.22443, -0.32138, -0.46371, -0.57178, -0.61081, -0.59998, -0.61459, -0.62189, -0.43979, -0.19217, -0.12643, -0.17252, -0.20956, -0.20981, -0.19217, -0.22845, -0.34332, -0.50629, -0.64307, -0.72922, -0.81384, -0.87857, -0.90149, -0.88687, -0.86169, -0.87781, -0.80478, -0.52493, -0.31308, -0.33249, -0.39395, -0.39017, -0.30301, -0.19949, -0.13071, -0.02493, 0.14307, 0.34961, 0.52542, 0.63223, 0.68613, 0.74710, 0.87305, 0.98184, 0.98889, 0.97052, 0.99066, 0.99747, 0.99344, 0.99469, 0.99393, 0.99570, 0.99393, 0.99521, 0.99469, 0.99420, 0.99521, 0.99420, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99469, 0.99493, 0.99420, 0.99521, 0.99393, 0.99493, 0.99469, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99445, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99545, 0.99368, 0.99393, 0.99445, 0.99268, 0.97983, 0.97229, 0.95944, 0.88486, 0.76773, 0.64481, 0.53098, 0.39847, 0.19318, -0.03827, -0.20325, -0.39319, -0.68765, -0.88461, -0.93448, -0.96069, -0.97681, -0.98715, -0.99042, -0.99142, -0.99091, -0.99142, -0.99219, -0.99091, -0.99219, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99142, -0.99142, -0.99191, -0.99091, -0.99219, -0.99118, -0.99142, -0.99167, -0.99091, -0.99219, -0.99091, -0.99167, -0.99142, -0.99091, -0.99191, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99118, -0.99142, -0.99191, -0.99066, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99243, -0.98865, -0.98764, -0.99219, -0.98083, -0.92517, -0.92770, -0.91486, -0.59042, -0.15189, 0.02945, 0.05667, 0.06195, 0.00629, -0.18008, -0.56497, -0.88010, -0.92770, -0.92871, -0.97705, -0.99167, -0.98663, -0.99118, -0.99042, -0.99219, -0.99142, -0.99118, -0.98941, -0.99219, -1.00000, -0.97580, -0.95993, -0.99948, -0.98236, -0.84659, -0.74860, -0.70679, -0.59747, -0.48035, -0.41687, -0.36826, -0.29745, -0.18185, -0.06219, 0.02164, 0.07907, 0.13123, 0.18033, 0.19620, 0.15692, 0.14053, 0.20251, 0.27530, 0.30905, 0.29092, 0.27252, 0.30402, 0.32416, 0.32214, 0.35239, 0.39670, 0.43198, 0.49420, 0.58487, 0.64154, 0.65967, 0.67050, 0.67026, 0.66522, 0.65540, 0.66119, 0.70627, 0.75842, 0.78738, 0.78940, 0.78763, 0.80402, 0.85944, 0.94559, 0.98990, 0.98160, 0.98007, 0.99368, 0.99393, 0.98538, 0.97580, 0.97101, 0.93802, 0.81812, 0.64633, 0.46649, 0.28613, 0.14685, 0.08966, 0.12543, 0.20325, 0.24557, 0.18866, 0.02795, -0.20175, -0.44205, -0.58713, -0.57629, -0.41385, -0.14255, 0.18033, 0.47882, 0.68311, 0.72314, 0.62064, 0.48309, 0.43073, 0.53577, 0.72794, 0.90250, 0.97354, 0.97000, 0.98083, 0.99191, 0.99319, 0.99493, 0.99393, 0.99521, 0.99393, 0.99545, 0.99420, 0.99493, 0.99493, 0.99445, 0.99545, 0.99420, 0.99545, 0.99243, 0.98917, 0.98386, 0.97781, 0.95844, 0.89066, 0.81561, 0.78134, 0.77277, 0.75995, 0.73022, 0.67126, 0.57178, 0.47000, 0.38361, 0.29419, 0.20703, 0.14734, 0.15866, 0.25162, 0.35818, 0.45062, 0.56750, 0.69748, 0.81232, 0.89697, 0.95062, 0.97656, 0.98615, 0.99191, 0.99219, 0.99243, 0.99368, 0.99368, 0.97028, 0.95566, 0.94559, 0.82617, 0.59973, 0.38361, 0.23901, 0.15338, 0.12921, 0.11206, 0.04382, -0.12946, -0.43552, -0.72644, -0.89847, -0.95465, -0.95541, -0.97229, -0.99268, -0.99319, -0.98840, -0.99142, -0.99167, -0.99091, -0.98840, -0.98965, -0.99368, -0.97455, -0.95010, -0.94684, -0.96219, -0.98514, -0.99243, -0.98889, -0.98917, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99191, -0.99066, -0.99167, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99167, -0.99091, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99091, -0.99118, -0.99243, -0.98941, -0.98462, -0.96976, -0.96320, -0.96194, -0.87305, -0.66196, -0.44809, -0.29495, -0.18085, -0.11813, -0.11334, -0.18564, -0.34885, -0.58237, -0.80450, -0.93726, -0.97806, -0.97354, -0.97531, -0.98990, -0.99368, -0.98941, -0.99219, -0.99091, -0.99142, -0.99167, -0.99091, -0.99191, -0.99118, -0.99219, -0.98236, -0.97781, -0.97656, -0.95135, -0.87204, -0.71335, -0.52139, -0.34232, -0.17783, -0.00906, 0.14886, 0.30450, 0.48889, 0.67404, 0.84030, 0.94128, 0.97681, 0.98462, 0.98337, 0.99142, 0.99521, 0.99493, 0.99420, 0.99445, 0.99521, 0.99393, 0.99545, 0.99445, 0.99521, 0.99521, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99521, 0.99445, 0.99445, 0.99521, 0.99445, 0.99545, 0.99445, 0.99469, 0.99493, 0.99393, 0.99493, 0.99445, 0.99393, 0.98285, 0.97781, 0.97479, 0.92844, 0.82114, 0.66095, 0.52417, 0.46826, 0.46722, 0.47934, 0.47379, 0.47076, 0.48209, 0.42014, 0.25439, 0.10074, -0.00302, -0.08966, -0.16068, -0.21436, -0.22040, -0.15137, -0.00476, 0.18536, 0.37631, 0.52292, 0.62164, 0.70425, 0.74835, 0.72366, 0.63928, 0.52567, 0.40805, 0.35666, 0.42896, 0.60175, 0.80200, 0.92743, 0.96548, 0.97632, 0.98337, 0.99066, 0.99521, 0.99420, 0.99368, 0.99292, 0.98840, 0.98083, 0.96774, 0.93323, 0.85440, 0.69470, 0.47202, 0.20425, -0.08890, -0.36423, -0.60025, -0.77481, -0.90173, -0.96017, -0.97028, -0.98108, -0.98840, -0.99219, -0.98990, -0.99219, -0.99142, -0.99142, -0.99219, -0.99091, -0.99243, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99118, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.98917, -0.99042, -0.99445, -0.97330, -0.95590, -0.96219, -0.89670, -0.72241, -0.55112, -0.44809, -0.39319, -0.37833, -0.35641, -0.26270, -0.14230, -0.11282, -0.13525, -0.11536, -0.09671, -0.11511, -0.18060, -0.26874, -0.33374, -0.42215, -0.51358, -0.44785, -0.30450, -0.28613, -0.30527, -0.25037, -0.15390, -0.08286, -0.11157, -0.12592, -0.00327, 0.13803, 0.19141, 0.12820, 0.01788, -0.03952, -0.12592, -0.26773, -0.34634, -0.31384, -0.18060, -0.01080, 0.13574, 0.26120, 0.36975, 0.46573, 0.55087, 0.63626, 0.73022, 0.83072, 0.92014, 0.97177, 0.98587, 0.98413, 0.99167, 0.99445, 0.99292, 0.99219, 0.98740, 0.98007, 0.96472, 0.92239, 0.82166, 0.69067, 0.57959, 0.54962, 0.59695, 0.64255, 0.64633, 0.60629, 0.55942, 0.54910, 0.58966, 0.61887, 0.56952, 0.54181, 0.59518, 0.63248, 0.63876, 0.65463, 0.73398, 0.88312, 0.96927, 0.97101, 0.97958, 0.99344, 0.99420, 0.99268, 0.99493, 0.99469, 0.99445, 0.99521, 0.99445, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99420, 0.99393, 0.99420, 0.98840, 0.98309, 0.98309, 0.96069, 0.88461, 0.79370, 0.72064, 0.65765, 0.59998, 0.53247, 0.49268, 0.48615, 0.44205, 0.38034, 0.36447, 0.38715, 0.39294, 0.32645, 0.19595, 0.07782, -0.05893, -0.27832, -0.48309, -0.62619, -0.72995, -0.79999, -0.84583, -0.82166, -0.73575, -0.67227, -0.65491, -0.64960, -0.66397, -0.70175, -0.72894, -0.74658, -0.76724, -0.79520, -0.82846, -0.86523, -0.90527, -0.94382, -0.89948, -0.69849, -0.47479, -0.31662, -0.15414, -0.00729, 0.07077, 0.08237, 0.04431, -0.02292, -0.11761, -0.24307, -0.36926, -0.45087, -0.46170, -0.40250, -0.30679, -0.17529, 0.00000, 0.14331, 0.24179, 0.36774, 0.49545, 0.56522, 0.57907, 0.56775, 0.53851, 0.51132, 0.48688, 0.41913, 0.26044, 0.00955, -0.26297, -0.46396, -0.62341, -0.82214, -0.94684, -0.96774, -0.97531, -0.98413, -0.99017, -0.98990, -0.99219, -0.99066, -0.99142, -0.99167, -0.99118, -0.99219, -0.98990, -0.99118, -0.99368, -0.99142, -0.97757, -0.97403, -0.98007, -0.96170, -0.86826, -0.67783, -0.52719, -0.48788, -0.45490, -0.43146, -0.47681, -0.54105, -0.57983, -0.60904, -0.62317, -0.59949, -0.55566, -0.52063, -0.52115, -0.55112, -0.56244, -0.58337, -0.65540, -0.73373, -0.77228, -0.74759, -0.68890, -0.64609, -0.61887, -0.58060, -0.50351, -0.40729, -0.33929, -0.35110, -0.42944, -0.47028, -0.42267, -0.32718, -0.20224, -0.05640, 0.04556, 0.10529, 0.17630, 0.26169, 0.33197, 0.32138, 0.23776, 0.20956, 0.23148, 0.20352, 0.23325, 0.39267, 0.52719, 0.58438, 0.62289, 0.66345, 0.70023, 0.66296, 0.54330, 0.42618, 0.33475, 0.24533, 0.14105, 0.03851, 0.01358, 0.09143, 0.22845, 0.34961, 0.41711, 0.48740, 0.58914, 0.69519, 0.78186, 0.84357, 0.89822, 0.95389, 0.98135, 0.98615, 0.99167, 0.99243, 0.99445, 0.99420, 0.99469, 0.99493, 0.99393, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99469, 0.98965, 0.98715, 0.98563, 0.96295, 0.91736, 0.86624, 0.82367, 0.77554, 0.68411, 0.53549, 0.38916, 0.26120, 0.11435, -0.04053, -0.18161, -0.23172, -0.19394, -0.15237, -0.10730, -0.02997, 0.08588, 0.22620, 0.34305, 0.44104, 0.55740, 0.65765, 0.71259, 0.69217, 0.65363, 0.69748, 0.79572, 0.89368, 0.95514, 0.97733, 0.98413, 0.98816, 0.99243, 0.99445, 0.99243, 0.97302, 0.96674, 0.97983, 0.90378, 0.71005, 0.51056, 0.40451, 0.40982, 0.41559, 0.32996, 0.24356, 0.18866, 0.11411, 0.05365, 0.01157, -0.03247, -0.09216, -0.16095, -0.23248, -0.31662, -0.39771, -0.48663, -0.59647, -0.71536, -0.82013, -0.85287, -0.82947, -0.84937, -0.92215, -0.97177, -0.98663, -0.98816, -0.98438, -0.99091, -0.99219, -0.99091, -0.99191, -0.99042, -0.99191, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99142]) },\n    { name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785, -0.67621, -0.40268, -0.43817, -0.45468, -0.22531, -0.18329, 0.24750, 0.71246, 0.52155, 0.56082, 0.48395, 0.33990, 0.46957, 0.27744, 0.42313, 0.47104, 0.18796, 0.12930, -0.13901, -0.07431, -0.16348, -0.74857, -0.73206, -0.35181, -0.26227, -0.41882, -0.27786, -0.19806, -0.19867, 0.18643, 0.24808, 0.08847, -0.06964, 0.06912, 0.20474, -0.05304, 0.29416, 0.31967, 0.14243, 0.27521, -0.23932, -0.14752, 0.12360, -0.26123, -0.26111, 0.06616, 0.26520, 0.08090, 0.15240, 0.16254, -0.12061, 0.04562, 0.00131, 0.04050, 0.08182, -0.21729, -0.17041, -0.16312, -0.08563, 0.06390, 0.05099, 0.05627, 0.02728, 0.00726, -0.13028, -0.05673, -0.14969, -0.17645, 0.35492, 0.16766, -0.00897, 0.24326, -0.00461, -0.04456, 0.01776, -0.04950, -0.01221, 0.02039, 0.07684, 0.13397, 0.39850, 0.35962, 0.13754, 0.42310, 0.27161, -0.17609, 0.03659, 0.10635, -0.21909, -0.22046, -0.20258, -0.40973, -0.40280, -0.40521, -0.66284]) },\n    { name: \"lemmbox HD triangle\", expression: 1.0, samples: centerWave([1.0, 0.996, 0.992, 0.988, 0.984, 0.98, 0.976, 0.972, 0.968, 0.964, 0.96, 0.956, 0.952, 0.948, 0.944, 0.94, 0.9359999999999999, 0.9319999999999999, 0.9279999999999999, 0.9239999999999999, 0.9199999999999999, 0.9159999999999999, 0.9119999999999999, 0.9079999999999999, 0.9039999999999999, 0.8999999999999999, 0.8959999999999999, 0.8919999999999999, 0.8879999999999999, 0.8839999999999999, 0.8799999999999999, 0.8759999999999999, 0.8719999999999999, 0.8679999999999999, 0.8639999999999999, 0.8599999999999999, 0.8560000000000001, 0.8520000000000001, 0.8480000000000001, 0.8440000000000001, 0.8400000000000001, 0.8360000000000001, 0.8320000000000001, 0.8280000000000001, 0.8240000000000001, 0.8200000000000001, 0.8160000000000001, 0.812, 0.808, 0.804, 0.8, 0.796, 0.792, 0.788, 0.784, 0.78, 0.776, 0.772, 0.768, 0.764, 0.76, 0.756, 0.752, 0.748, 0.744, 0.74, 0.736, 0.732, 0.728, 0.724, 0.72, 0.716, 0.712, 0.708, 0.704, 0.7, 0.696, 0.692, 0.688, 0.6839999999999999, 0.6799999999999999, 0.6759999999999999, 0.6719999999999999, 0.6679999999999999, 0.6639999999999999, 0.6599999999999999, 0.6560000000000001, 0.6520000000000001, 0.6480000000000001, 0.6440000000000001, 0.6400000000000001, 0.6360000000000001, 0.6320000000000001, 0.6280000000000001, 0.6240000000000001, 0.6200000000000001, 0.6160000000000001, 0.6120000000000001, 0.6080000000000001, 0.6040000000000001, 0.6000000000000001, 0.5960000000000001, 0.5920000000000001, 0.5880000000000001, 0.5840000000000001, 0.5800000000000001, 0.5760000000000001, 0.5720000000000001, 0.5680000000000001, 0.5640000000000001, 0.56, 0.556, 0.552, 0.548, 0.544, 0.54, 0.536, 0.532, 0.528, 0.524, 0.52, 0.516, 0.512, 0.508, 0.504, 0.5, 0.496, 0.492, 0.488, 0.484, 0.48, 0.476, 0.472, 0.46799999999999997, 0.46399999999999997, 0.45999999999999996, 0.45599999999999996, 0.45199999999999996, 0.44799999999999995, 0.44399999999999995, 0.43999999999999995, 0.43599999999999994, 0.43199999999999994, 0.42799999999999994, 0.42399999999999993, 0.41999999999999993, 0.4159999999999999, 0.4119999999999999, 0.4079999999999999, 0.4039999999999999, 0.3999999999999999, 0.3959999999999999, 0.3919999999999999, 0.3879999999999999, 0.3839999999999999, 0.3799999999999999, 0.3759999999999999, 0.3719999999999999, 0.3679999999999999, 0.3639999999999999, 0.3599999999999999, 0.35599999999999987, 0.35199999999999987, 0.34799999999999986, 0.34399999999999986, 0.33999999999999986, 0.33599999999999985, 0.33199999999999985, 0.32799999999999985, 0.32399999999999984, 0.31999999999999984, 0.31599999999999984, 0.31200000000000006, 0.30800000000000005, 0.30400000000000005, 0.30000000000000004, 0.29600000000000004, 0.29200000000000004, 0.28800000000000003, 0.28400000000000003, 0.28, 0.276, 0.272, 0.268, 0.264, 0.26, 0.256, 0.252, 0.248, 0.244, 0.24, 0.236, 0.23199999999999998, 0.22799999999999998, 0.22399999999999998, 0.21999999999999997, 0.21599999999999997, 0.21199999999999997, 0.20799999999999996, 0.20399999999999996, 0.19999999999999996, 0.19599999999999995, 0.19199999999999995, 0.18799999999999994, 0.18400000000000016, 0.18000000000000016, 0.17600000000000016, 0.17200000000000015, 0.16800000000000015, 0.16400000000000015, 0.16000000000000014, 0.15600000000000014, 0.15200000000000014, 0.14800000000000013, 0.14400000000000013, 0.14000000000000012, 0.13600000000000012, 0.13200000000000012, 0.1280000000000001, 0.12400000000000011, 0.1200000000000001, 0.1160000000000001, 0.1120000000000001, 0.1080000000000001, 0.10400000000000009, 0.10000000000000009, 0.09600000000000009, 0.09200000000000008, 0.08800000000000008, 0.08400000000000007, 0.08000000000000007, 0.07600000000000007, 0.07200000000000006, 0.06800000000000006, 0.06400000000000006, 0.06000000000000005, 0.05600000000000005, 0.052000000000000046, 0.04800000000000004, 0.04400000000000004, 0.040000000000000036, 0.03600000000000003, 0.03200000000000003, 0.028000000000000025, 0.02400000000000002, 0.020000000000000018, 0.016000000000000014, 0.01200000000000001, 0.008000000000000007, 0.0040000000000000036, 0.0, -0.0040000000000000036, -0.008000000000000007, -0.01200000000000001, -0.016000000000000014, -0.020000000000000018, -0.02400000000000002, -0.028000000000000025, -0.03200000000000003, -0.03600000000000003, -0.040000000000000036, -0.04400000000000004, -0.04800000000000004, -0.052000000000000046, -0.05600000000000005, -0.06000000000000005, -0.06400000000000006, -0.06800000000000006, -0.07200000000000006, -0.07600000000000007, -0.08000000000000007, -0.08400000000000007, -0.08800000000000008, -0.09200000000000008, -0.09600000000000009, -0.10000000000000009, -0.10400000000000009, -0.1080000000000001, -0.1120000000000001, -0.1160000000000001, -0.1200000000000001, -0.12400000000000011, -0.1279999999999999, -0.1319999999999999, -0.1359999999999999, -0.1399999999999999, -0.1439999999999999, -0.1479999999999999, -0.1519999999999999, -0.15599999999999992, -0.15999999999999992, -0.16399999999999992, -0.16799999999999993, -0.17199999999999993, -0.17599999999999993, -0.17999999999999994, -0.18399999999999994, -0.18799999999999994, -0.19199999999999995, -0.19599999999999995, -0.19999999999999996, -0.20399999999999996, -0.20799999999999996, -0.21199999999999997, -0.21599999999999997, -0.21999999999999997, -0.22399999999999998, -0.22799999999999998, -0.23199999999999998, -0.236, -0.24, -0.244, -0.248, -0.252, -0.256, -0.26, -0.264, -0.268, -0.272, -0.276, -0.28, -0.28400000000000003, -0.28800000000000003, -0.29200000000000004, -0.29600000000000004, -0.30000000000000004, -0.30400000000000005, -0.30800000000000005, -0.31200000000000006, -0.31600000000000006, -0.32000000000000006, -0.32400000000000007, -0.32800000000000007, -0.3320000000000001, -0.3360000000000001, -0.3400000000000001, -0.3440000000000001, -0.3480000000000001, -0.3520000000000001, -0.3560000000000001, -0.3600000000000001, -0.3640000000000001, -0.3680000000000001, -0.3720000000000001, -0.3759999999999999, -0.3799999999999999, -0.3839999999999999, -0.3879999999999999, -0.3919999999999999, -0.3959999999999999, -0.3999999999999999, -0.4039999999999999, -0.4079999999999999, -0.4119999999999999, -0.4159999999999999, -0.41999999999999993, -0.42399999999999993, -0.42799999999999994, -0.43199999999999994, -0.43599999999999994, -0.43999999999999995, -0.44399999999999995, -0.44799999999999995, -0.45199999999999996, -0.45599999999999996, -0.45999999999999996, -0.46399999999999997, -0.46799999999999997, -0.472, -0.476, -0.48, -0.484, -0.488, -0.492, -0.496, -0.5, -0.504, -0.508, -0.512, -0.516, -0.52, -0.524, -0.528, -0.532, -0.536, -0.54, -0.544, -0.548, -0.552, -0.556, -0.56, -0.5640000000000001, -0.5680000000000001, -0.5720000000000001, -0.5760000000000001, -0.5800000000000001, -0.5840000000000001, -0.5880000000000001, -0.5920000000000001, -0.5960000000000001, -0.6000000000000001, -0.6040000000000001, -0.6080000000000001, -0.6120000000000001, -0.6160000000000001, -0.6200000000000001, -0.6240000000000001, -0.6279999999999999, -0.6319999999999999, -0.6359999999999999, -0.6399999999999999, -0.6439999999999999, -0.6479999999999999, -0.6519999999999999, -0.6559999999999999, -0.6599999999999999, -0.6639999999999999, -0.6679999999999999, -0.6719999999999999, -0.6759999999999999, -0.6799999999999999, -0.6839999999999999, -0.688, -0.692, -0.696, -0.7, -0.704, -0.708, -0.712, -0.716, -0.72, -0.724, -0.728, -0.732, -0.736, -0.74, -0.744, -0.748, -0.752, -0.756, -0.76, -0.764, -0.768, -0.772, -0.776, -0.78, -0.784, -0.788, -0.792, -0.796, -0.8, -0.804, -0.808, -0.812, -0.8160000000000001, -0.8200000000000001, -0.8240000000000001, -0.8280000000000001, -0.8320000000000001, -0.8360000000000001, -0.8400000000000001, -0.8440000000000001, -0.8480000000000001, -0.8520000000000001, -0.8560000000000001, -0.8600000000000001, -0.8640000000000001, -0.8680000000000001, -0.8720000000000001, -0.8759999999999999, -0.8799999999999999, -0.8839999999999999, -0.8879999999999999, -0.8919999999999999, -0.8959999999999999, -0.8999999999999999, -0.9039999999999999, -0.9079999999999999, -0.9119999999999999, -0.9159999999999999, -0.9199999999999999, -0.9239999999999999, -0.9279999999999999, -0.9319999999999999, -0.9359999999999999, -0.94, -0.944, -0.948, -0.952, -0.956, -0.96, -0.964, -0.968, -0.972, -0.976, -0.98, -0.984, -0.988, -0.992, -0.996, -1.0, -0.996, -0.992, -0.988, -0.984, -0.98, -0.976, -0.972, -0.968, -0.964, -0.96, -0.956, -0.952, -0.948, -0.944, -0.94, -0.9359999999999999, -0.9319999999999999, -0.9279999999999999, -0.9239999999999999, -0.9199999999999999, -0.9159999999999999, -0.9119999999999999, -0.9079999999999999, -0.9039999999999999, -0.8999999999999999, -0.8959999999999999, -0.8919999999999999, -0.8879999999999999, -0.8839999999999999, -0.8799999999999999, -0.8759999999999999, -0.8719999999999999, -0.8679999999999999, -0.8639999999999999, -0.8599999999999999, -0.8559999999999999, -0.8519999999999999, -0.8479999999999999, -0.8439999999999999, -0.8399999999999999, -0.8359999999999999, -0.8319999999999999, -0.8279999999999998, -0.8239999999999998, -0.8199999999999998, -0.8159999999999998, -0.8119999999999998, -0.8079999999999998, -0.8039999999999998, -0.7999999999999998, -0.7959999999999998, -0.7919999999999998, -0.7879999999999998, -0.7839999999999998, -0.7799999999999998, -0.7759999999999998, -0.7719999999999998, -0.7679999999999998, -0.7639999999999998, -0.7599999999999998, -0.7559999999999998, -0.7519999999999998, -0.7480000000000002, -0.7440000000000002, -0.7400000000000002, -0.7360000000000002, -0.7320000000000002, -0.7280000000000002, -0.7240000000000002, -0.7200000000000002, -0.7160000000000002, -0.7120000000000002, -0.7080000000000002, -0.7040000000000002, -0.7000000000000002, -0.6960000000000002, -0.6920000000000002, -0.6880000000000002, -0.6840000000000002, -0.6800000000000002, -0.6760000000000002, -0.6720000000000002, -0.6680000000000001, -0.6640000000000001, -0.6600000000000001, -0.6560000000000001, -0.6520000000000001, -0.6480000000000001, -0.6440000000000001, -0.6400000000000001, -0.6360000000000001, -0.6320000000000001, -0.6280000000000001, -0.6240000000000001, -0.6200000000000001, -0.6160000000000001, -0.6120000000000001, -0.6080000000000001, -0.6040000000000001, -0.6000000000000001, -0.5960000000000001, -0.5920000000000001, -0.5880000000000001, -0.5840000000000001, -0.5800000000000001, -0.5760000000000001, -0.5720000000000001, -0.5680000000000001, -0.5640000000000001, -0.56, -0.556, -0.552, -0.548, -0.544, -0.54, -0.536, -0.532, -0.528, -0.524, -0.52, -0.516, -0.512, -0.508, -0.504, -0.5, -0.496, -0.492, -0.488, -0.484, -0.48, -0.476, -0.472, -0.46799999999999997, -0.46399999999999997, -0.45999999999999996, -0.45599999999999996, -0.45199999999999996, -0.44799999999999995, -0.44399999999999995, -0.43999999999999995, -0.43599999999999994, -0.43199999999999994, -0.42799999999999994, -0.42399999999999993, -0.41999999999999993, -0.4159999999999999, -0.4119999999999999, -0.4079999999999999, -0.4039999999999999, -0.3999999999999999, -0.3959999999999999, -0.3919999999999999, -0.3879999999999999, -0.3839999999999999, -0.3799999999999999, -0.3759999999999999, -0.3719999999999999, -0.3679999999999999, -0.3639999999999999, -0.3599999999999999, -0.35599999999999987, -0.35199999999999987, -0.34799999999999986, -0.34399999999999986, -0.33999999999999986, -0.33599999999999985, -0.33199999999999985, -0.32799999999999985, -0.32399999999999984, -0.31999999999999984, -0.31599999999999984, -0.31199999999999983, -0.30799999999999983, -0.3039999999999998, -0.2999999999999998, -0.2959999999999998, -0.2919999999999998, -0.2879999999999998, -0.2839999999999998, -0.2799999999999998, -0.2759999999999998, -0.2719999999999998, -0.2679999999999998, -0.2639999999999998, -0.2599999999999998, -0.2559999999999998, -0.2519999999999998, -0.24800000000000022, -0.24400000000000022, -0.2400000000000002, -0.2360000000000002, -0.2320000000000002, -0.2280000000000002, -0.2240000000000002, -0.2200000000000002, -0.2160000000000002, -0.2120000000000002, -0.20800000000000018, -0.20400000000000018, -0.20000000000000018, -0.19600000000000017, -0.19200000000000017, -0.18800000000000017, -0.18400000000000016, -0.18000000000000016, -0.17600000000000016, -0.17200000000000015, -0.16800000000000015, -0.16400000000000015, -0.16000000000000014, -0.15600000000000014, -0.15200000000000014, -0.14800000000000013, -0.14400000000000013, -0.14000000000000012, -0.13600000000000012, -0.13200000000000012, -0.1280000000000001, -0.12400000000000011, -0.1200000000000001, -0.1160000000000001, -0.1120000000000001, -0.1080000000000001, -0.10400000000000009, -0.10000000000000009, -0.09600000000000009, -0.09200000000000008, -0.08800000000000008, -0.08400000000000007, -0.08000000000000007, -0.07600000000000007, -0.07200000000000006, -0.06800000000000006, -0.06400000000000006, -0.06000000000000005, -0.05600000000000005, -0.052000000000000046, -0.04800000000000004, -0.04400000000000004, -0.040000000000000036, -0.03600000000000003, -0.03200000000000003, -0.028000000000000025, -0.02400000000000002, -0.020000000000000018, -0.016000000000000014, -0.01200000000000001, -0.008000000000000007, -0.0040000000000000036, 0.0, 0.0040000000000000036, 0.008000000000000007, 0.01200000000000001, 0.016000000000000014, 0.020000000000000018, 0.02400000000000002, 0.028000000000000025, 0.03200000000000003, 0.03600000000000003, 0.040000000000000036, 0.04400000000000004, 0.04800000000000004, 0.052000000000000046, 0.05600000000000005, 0.06000000000000005, 0.06400000000000006, 0.06800000000000006, 0.07200000000000006, 0.07600000000000007, 0.08000000000000007, 0.08400000000000007, 0.08800000000000008, 0.09200000000000008, 0.09600000000000009, 0.10000000000000009, 0.10400000000000009, 0.1080000000000001, 0.1120000000000001, 0.1160000000000001, 0.1200000000000001, 0.12400000000000011, 0.1280000000000001, 0.13200000000000012, 0.13600000000000012, 0.14000000000000012, 0.14400000000000013, 0.14800000000000013, 0.15200000000000014, 0.15600000000000014, 0.16000000000000014, 0.16400000000000015, 0.16800000000000015, 0.17200000000000015, 0.17600000000000016, 0.18000000000000016, 0.18400000000000016, 0.18800000000000017, 0.19200000000000017, 0.19600000000000017, 0.20000000000000018, 0.20400000000000018, 0.20800000000000018, 0.2120000000000002, 0.2160000000000002, 0.2200000000000002, 0.2240000000000002, 0.2280000000000002, 0.2320000000000002, 0.2360000000000002, 0.2400000000000002, 0.24400000000000022, 0.24800000000000022, 0.2519999999999998, 0.2559999999999998, 0.2599999999999998, 0.2639999999999998, 0.2679999999999998, 0.2719999999999998, 0.2759999999999998, 0.2799999999999998, 0.2839999999999998, 0.2879999999999998, 0.2919999999999998, 0.2959999999999998, 0.2999999999999998, 0.3039999999999998, 0.30799999999999983, 0.31199999999999983, 0.31599999999999984, 0.31999999999999984, 0.32399999999999984, 0.32799999999999985, 0.33199999999999985, 0.33599999999999985, 0.33999999999999986, 0.34399999999999986, 0.34799999999999986, 0.35199999999999987, 0.35599999999999987, 0.3599999999999999, 0.3639999999999999, 0.3679999999999999, 0.3719999999999999, 0.3759999999999999, 0.3799999999999999, 0.3839999999999999, 0.3879999999999999, 0.3919999999999999, 0.3959999999999999, 0.3999999999999999, 0.4039999999999999, 0.4079999999999999, 0.4119999999999999, 0.4159999999999999, 0.41999999999999993, 0.42399999999999993, 0.42799999999999994, 0.43199999999999994, 0.43599999999999994, 0.43999999999999995, 0.44399999999999995, 0.44799999999999995, 0.45199999999999996, 0.45599999999999996, 0.45999999999999996, 0.46399999999999997, 0.46799999999999997, 0.472, 0.476, 0.48, 0.484, 0.488, 0.492, 0.496, 0.5, 0.504, 0.508, 0.512, 0.516, 0.52, 0.524, 0.528, 0.532, 0.536, 0.54, 0.544, 0.548, 0.552, 0.556, 0.56, 0.5640000000000001, 0.5680000000000001, 0.5720000000000001, 0.5760000000000001, 0.5800000000000001, 0.5840000000000001, 0.5880000000000001, 0.5920000000000001, 0.5960000000000001, 0.6000000000000001, 0.6040000000000001, 0.6080000000000001, 0.6120000000000001, 0.6160000000000001, 0.6200000000000001, 0.6240000000000001, 0.6280000000000001, 0.6320000000000001, 0.6360000000000001, 0.6400000000000001, 0.6440000000000001, 0.6480000000000001, 0.6520000000000001, 0.6560000000000001, 0.6600000000000001, 0.6640000000000001, 0.6680000000000001, 0.6720000000000002, 0.6760000000000002, 0.6800000000000002, 0.6840000000000002, 0.6880000000000002, 0.6920000000000002, 0.6960000000000002, 0.7000000000000002, 0.7040000000000002, 0.7080000000000002, 0.7120000000000002, 0.7160000000000002, 0.7200000000000002, 0.7240000000000002, 0.7280000000000002, 0.7320000000000002, 0.7360000000000002, 0.7400000000000002, 0.7440000000000002, 0.7480000000000002, 0.7519999999999998, 0.7559999999999998, 0.7599999999999998, 0.7639999999999998, 0.7679999999999998, 0.7719999999999998, 0.7759999999999998, 0.7799999999999998, 0.7839999999999998, 0.7879999999999998, 0.7919999999999998, 0.7959999999999998, 0.7999999999999998, 0.8039999999999998, 0.8079999999999998, 0.8119999999999998, 0.8159999999999998, 0.8199999999999998, 0.8239999999999998, 0.8279999999999998, 0.8319999999999999, 0.8359999999999999, 0.8399999999999999, 0.8439999999999999, 0.8479999999999999, 0.8519999999999999, 0.8559999999999999, 0.8599999999999999, 0.8639999999999999, 0.8679999999999999, 0.8719999999999999, 0.8759999999999999, 0.8799999999999999, 0.8839999999999999, 0.8879999999999999, 0.8919999999999999, 0.8959999999999999, 0.8999999999999999, 0.9039999999999999, 0.9079999999999999, 0.9119999999999999, 0.9159999999999999, 0.9199999999999999, 0.9239999999999999, 0.9279999999999999, 0.9319999999999999, 0.9359999999999999, 0.94, 0.944, 0.948, 0.952, 0.956, 0.96, 0.964, 0.968, 0.972, 0.976, 0.98, 0.984, 0.988, 0.992, 0.996]) },\n    { name: \"lemmbox HD sawtooth\", expression: 1.0, samples: centerWave([0.0, 0.00390625, 0.0078125, 0.01171875, 0.015625, 0.01953125, 0.0234375, 0.02734375, 0.03125, 0.03515625, 0.0390625, 0.04296875, 0.046875, 0.05078125, 0.0546875, 0.05859375, 0.0625, 0.06640625, 0.0703125, 0.07421875, 0.078125, 0.08203125, 0.0859375, 0.08984375, 0.09375, 0.09765625, 0.1015625, 0.10546875, 0.109375, 0.11328125, 0.1171875, 0.12109375, 0.125, 0.12890625, 0.1328125, 0.13671875, 0.140625, 0.14453125, 0.1484375, 0.15234375, 0.15625, 0.16015625, 0.1640625, 0.16796875, 0.171875, 0.17578125, 0.1796875, 0.18359375, 0.1875, 0.19140625, 0.1953125, 0.19921875, 0.203125, 0.20703125, 0.2109375, 0.21484375, 0.21875, 0.22265625, 0.2265625, 0.23046875, 0.234375, 0.23828125, 0.2421875, 0.24609375, 0.25, 0.25390625, 0.2578125, 0.26171875, 0.265625, 0.26953125, 0.2734375, 0.27734375, 0.28125, 0.28515625, 0.2890625, 0.29296875, 0.296875, 0.30078125, 0.3046875, 0.30859375, 0.3125, 0.31640625, 0.3203125, 0.32421875, 0.328125, 0.33203125, 0.3359375, 0.33984375, 0.34375, 0.34765625, 0.3515625, 0.35546875, 0.359375, 0.36328125, 0.3671875, 0.37109375, 0.375, 0.37890625, 0.3828125, 0.38671875, 0.390625, 0.39453125, 0.3984375, 0.40234375, 0.40625, 0.41015625, 0.4140625, 0.41796875, 0.421875, 0.42578125, 0.4296875, 0.43359375, 0.4375, 0.44140625, 0.4453125, 0.44921875, 0.453125, 0.45703125, 0.4609375, 0.46484375, 0.46875, 0.47265625, 0.4765625, 0.48046875, 0.484375, 0.48828125, 0.4921875, 0.49609375, 0.5, 0.50390625, 0.5078125, 0.51171875, 0.515625, 0.51953125, 0.5234375, 0.52734375, 0.53125, 0.53515625, 0.5390625, 0.54296875, 0.546875, 0.55078125, 0.5546875, 0.55859375, 0.5625, 0.56640625, 0.5703125, 0.57421875, 0.578125, 0.58203125, 0.5859375, 0.58984375, 0.59375, 0.59765625, 0.6015625, 0.60546875, 0.609375, 0.61328125, 0.6171875, 0.62109375, 0.625, 0.62890625, 0.6328125, 0.63671875, 0.640625, 0.64453125, 0.6484375, 0.65234375, 0.65625, 0.66015625, 0.6640625, 0.66796875, 0.671875, 0.67578125, 0.6796875, 0.68359375, 0.6875, 0.69140625, 0.6953125, 0.69921875, 0.703125, 0.70703125, 0.7109375, 0.71484375, 0.71875, 0.72265625, 0.7265625, 0.73046875, 0.734375, 0.73828125, 0.7421875, 0.74609375, 0.75, 0.75390625, 0.7578125, 0.76171875, 0.765625, 0.76953125, 0.7734375, 0.77734375, 0.78125, 0.78515625, 0.7890625, 0.79296875, 0.796875, 0.80078125, 0.8046875, 0.80859375, 0.8125, 0.81640625, 0.8203125, 0.82421875, 0.828125, 0.83203125, 0.8359375, 0.83984375, 0.84375, 0.84765625, 0.8515625, 0.85546875, 0.859375, 0.86328125, 0.8671875, 0.87109375, 0.875, 0.87890625, 0.8828125, 0.88671875, 0.890625, 0.89453125, 0.8984375, 0.90234375, 0.90625, 0.91015625, 0.9140625, 0.91796875, 0.921875, 0.92578125, 0.9296875, 0.93359375, 0.9375, 0.94140625, 0.9453125, 0.94921875, 0.953125, 0.95703125, 0.9609375, 0.96484375, 0.96875, 0.97265625, 0.9765625, 0.98046875, 0.984375, 0.98828125, 0.9921875, 0.99609375, -1.0, -0.99609375, -0.9921875, -0.98828125, -0.984375, -0.98046875, -0.9765625, -0.97265625, -0.96875, -0.96484375, -0.9609375, -0.95703125, -0.953125, -0.94921875, -0.9453125, -0.94140625, -0.9375, -0.93359375, -0.9296875, -0.92578125, -0.921875, -0.91796875, -0.9140625, -0.91015625, -0.90625, -0.90234375, -0.8984375, -0.89453125, -0.890625, -0.88671875, -0.8828125, -0.87890625, -0.875, -0.87109375, -0.8671875, -0.86328125, -0.859375, -0.85546875, -0.8515625, -0.84765625, -0.84375, -0.83984375, -0.8359375, -0.83203125, -0.828125, -0.82421875, -0.8203125, -0.81640625, -0.8125, -0.80859375, -0.8046875, -0.80078125, -0.796875, -0.79296875, -0.7890625, -0.78515625, -0.78125, -0.77734375, -0.7734375, -0.76953125, -0.765625, -0.76171875, -0.7578125, -0.75390625, -0.75, -0.74609375, -0.7421875, -0.73828125, -0.734375, -0.73046875, -0.7265625, -0.72265625, -0.71875, -0.71484375, -0.7109375, -0.70703125, -0.703125, -0.69921875, -0.6953125, -0.69140625, -0.6875, -0.68359375, -0.6796875, -0.67578125, -0.671875, -0.66796875, -0.6640625, -0.66015625, -0.65625, -0.65234375, -0.6484375, -0.64453125, -0.640625, -0.63671875, -0.6328125, -0.62890625, -0.625, -0.62109375, -0.6171875, -0.61328125, -0.609375, -0.60546875, -0.6015625, -0.59765625, -0.59375, -0.58984375, -0.5859375, -0.58203125, -0.578125, -0.57421875, -0.5703125, -0.56640625, -0.5625, -0.55859375, -0.5546875, -0.55078125, -0.546875, -0.54296875, -0.5390625, -0.53515625, -0.53125, -0.52734375, -0.5234375, -0.51953125, -0.515625, -0.51171875, -0.5078125, -0.50390625, -0.5, -0.49609375, -0.4921875, -0.48828125, -0.484375, -0.48046875, -0.4765625, -0.47265625, -0.46875, -0.46484375, -0.4609375, -0.45703125, -0.453125, -0.44921875, -0.4453125, -0.44140625, -0.4375, -0.43359375, -0.4296875, -0.42578125, -0.421875, -0.41796875, -0.4140625, -0.41015625, -0.40625, -0.40234375, -0.3984375, -0.39453125, -0.390625, -0.38671875, -0.3828125, -0.37890625, -0.375, -0.37109375, -0.3671875, -0.36328125, -0.359375, -0.35546875, -0.3515625, -0.34765625, -0.34375, -0.33984375, -0.3359375, -0.33203125, -0.328125, -0.32421875, -0.3203125, -0.31640625, -0.3125, -0.30859375, -0.3046875, -0.30078125, -0.296875, -0.29296875, -0.2890625, -0.28515625, -0.28125, -0.27734375, -0.2734375, -0.26953125, -0.265625, -0.26171875, -0.2578125, -0.25390625, -0.25, -0.24609375, -0.2421875, -0.23828125, -0.234375, -0.23046875, -0.2265625, -0.22265625, -0.21875, -0.21484375, -0.2109375, -0.20703125, -0.203125, -0.19921875, -0.1953125, -0.19140625, -0.1875, -0.18359375, -0.1796875, -0.17578125, -0.171875, -0.16796875, -0.1640625, -0.16015625, -0.15625, -0.15234375, -0.1484375, -0.14453125, -0.140625, -0.13671875, -0.1328125, -0.12890625, -0.125, -0.12109375, -0.1171875, -0.11328125, -0.109375, -0.10546875, -0.1015625, -0.09765625, -0.09375, -0.08984375, -0.0859375, -0.08203125, -0.078125, -0.07421875, -0.0703125, -0.06640625, -0.0625, -0.05859375, -0.0546875, -0.05078125, -0.046875, -0.04296875, -0.0390625, -0.03515625, -0.03125, -0.02734375, -0.0234375, -0.01953125, -0.015625, -0.01171875, -0.0078125, -0.00390625]) },\n    { name: \"lemmbox HD rounded\", expression: 1.0, samples: centerWave([0.0, 0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.09, 0.1, 0.11, 0.12, 0.13, 0.15, 0.16, 0.17, 0.18, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.27, 0.28, 0.29, 0.3, 0.31, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.77, 0.78, 0.79, 0.8, 0.8, 0.81, 0.82, 0.82, 0.83, 0.84, 0.84, 0.85, 0.86, 0.86, 0.87, 0.88, 0.88, 0.89, 0.89, 0.9, 0.9, 0.91, 0.91, 0.92, 0.92, 0.93, 0.93, 0.94, 0.94, 0.95, 0.95, 0.95, 0.96, 0.96, 0.96, 0.97, 0.97, 0.97, 0.98, 0.98, 0.98, 0.98, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.98, 0.98, 0.98, 0.98, 0.97, 0.97, 0.97, 0.96, 0.96, 0.96, 0.95, 0.95, 0.95, 0.94, 0.94, 0.93, 0.93, 0.92, 0.92, 0.91, 0.91, 0.9, 0.9, 0.89, 0.89, 0.88, 0.88, 0.87, 0.86, 0.86, 0.85, 0.84, 0.84, 0.83, 0.82, 0.82, 0.81, 0.8, 0.8, 0.79, 0.78, 0.77, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.66, 0.65, 0.64, 0.63, 0.62, 0.62, 0.61, 0.6, 0.59, 0.58, 0.57, 0.56, 0.55, 0.53, 0.52, 0.51, 0.5, 0.49, 0.48, 0.47, 0.46, 0.45, 0.44, 0.43, 0.42, 0.41, 0.39, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.31, 0.3, 0.29, 0.28, 0.27, 0.25, 0.24, 0.23, 0.22, 0.21, 0.2, 0.18, 0.17, 0.16, 0.15, 0.13, 0.12, 0.11, 0.1, 0.09, 0.07, 0.06, 0.05, 0.04, 0.02, 0.01, 0.0, -0.01, -0.02, -0.04, -0.05, -0.06, -0.07, -0.09, -0.1, -0.11, -0.12, -0.13, -0.15, -0.16, -0.17, -0.18, -0.2, -0.21, -0.22, -0.23, -0.24, -0.25, -0.27, -0.28, -0.29, -0.3, -0.31, -0.33, -0.34, -0.35, -0.36, -0.37, -0.38, -0.39, -0.41, -0.42, -0.43, -0.44, -0.45, -0.46, -0.47, -0.48, -0.49, -0.5, -0.51, -0.52, -0.53, -0.55, -0.56, -0.57, -0.58, -0.59, -0.6, -0.61, -0.62, -0.62, -0.63, -0.64, -0.65, -0.66, -0.67, -0.68, -0.69, -0.7, -0.71, -0.72, -0.72, -0.73, -0.74, -0.75, -0.76, -0.77, -0.77, -0.78, -0.79, -0.8, -0.8, -0.81, -0.82, -0.82, -0.83, -0.84, -0.84, -0.85, -0.86, -0.86, -0.87, -0.88, -0.88, -0.89, -0.89, -0.9, -0.9, -0.91, -0.91, -0.92, -0.92, -0.93, -0.93, -0.94, -0.94, -0.95, -0.95, -0.95, -0.96, -0.96, -0.96, -0.97, -0.97, -0.97, -0.98, -0.98, -0.98, -0.98, -0.99, -0.99, -0.99, -0.99, -0.99, -0.99, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.99, -0.99, -0.99, -0.99, -0.99, -0.99, -0.98, -0.98, -0.98, -0.98, -0.97, -0.97, -0.97, -0.96, -0.96, -0.96, -0.95, -0.95, -0.95, -0.94, -0.94, -0.93, -0.93, -0.92, -0.92, -0.91, -0.91, -0.9, -0.9, -0.89, -0.89, -0.88, -0.88, -0.87, -0.86, -0.86, -0.85, -0.84, -0.84, -0.83, -0.82, -0.82, -0.81, -0.8, -0.8, -0.79, -0.78, -0.77, -0.77, -0.76, -0.75, -0.74, -0.73, -0.72, -0.72, -0.71, -0.7, -0.69, -0.68, -0.67, -0.66, -0.65, -0.64, -0.63, -0.62, -0.62, -0.61, -0.6, -0.59, -0.58, -0.57, -0.56, -0.55, -0.53, -0.52, -0.51, -0.5, -0.49, -0.48, -0.47, -0.46, -0.45, -0.44, -0.43, -0.42, -0.41, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.31, -0.3, -0.29, -0.28, -0.27, -0.25, -0.24, -0.23, -0.22, -0.21, -0.2, -0.18, -0.17, -0.16, -0.15, -0.13, -0.12, -0.11, -0.1, -0.09, -0.07, -0.06, -0.05, -0.04, -0.02, -0.01]) },\n    { name: \"lemmbox trapasquare\", expression: 1.0, samples: centerWave([0.0, 0.012271538285719925, 0.024541228522912288, 0.03680722294135883, 0.049067674327418015, 0.06132073630220858, 0.07356456359966743, 0.0857973123444399, 0.0980171403295606, 0.11022220729388306, 0.1224106751992162, 0.13458070850712617, 0.14673047445536175, 0.15885814333386145, 0.17096188876030122, 0.18303988795514095, 0.19509032201612825, 0.20711137619221856, 0.2191012401568698, 0.2310581082806711, 0.24298017990326387, 0.25486565960451457, 0.26671275747489837, 0.27851968938505306, 0.29028467725446233, 0.3020059493192281, 0.3136817403988915, 0.3253102921622629, 0.33688985339222005, 0.34841868024943456, 0.3598950365349881, 0.3713171939518375, 0.3826834323650898, 0.3939920400610481, 0.40524131400498986, 0.41642956009763715, 0.4275550934302821, 0.43861623853852766, 0.44961132965460654, 0.46053871095824, 0.47139673682599764, 0.4821837720791227, 0.49289819222978404, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.49289819222978415, 0.4821837720791229, 0.47139673682599786, 0.4605387109582402, 0.4496113296546069, 0.43861623853852755, 0.42755509343028203, 0.41642956009763715, 0.4052413140049899, 0.39399204006104815, 0.3826834323650899, 0.3713171939518377, 0.35989503653498833, 0.3484186802494348, 0.33688985339222033, 0.32531029216226326, 0.3136817403988914, 0.30200594931922803, 0.2902846772544624, 0.27851968938505317, 0.2667127574748985, 0.2548656596045147, 0.24298017990326407, 0.23105810828067133, 0.21910124015687005, 0.20711137619221884, 0.1950903220161286, 0.1830398879551409, 0.17096188876030122, 0.15885814333386147, 0.1467304744553618, 0.13458070850712628, 0.12241067519921635, 0.11022220729388324, 0.09801714032956083, 0.08579731234444016, 0.07356456359966773, 0.06132073630220849, 0.049067674327417966, 0.03680722294135883, 0.024541228522912326, 0.012271538285720007, 1.2246467991473532e-16, -0.012271538285719762, -0.02454122852291208, -0.03680722294135858, -0.049067674327417724, -0.061320736302208245, -0.0735645635996675, -0.08579731234443992, -0.09801714032956059, -0.110222207293883, -0.1224106751992161, -0.13458070850712606, -0.14673047445536158, -0.15885814333386122, -0.17096188876030097, -0.18303988795514065, -0.19509032201612836, -0.2071113761922186, -0.2191012401568698, -0.23105810828067108, -0.24298017990326382, -0.25486565960451446, -0.26671275747489825, -0.2785196893850529, -0.2902846772544621, -0.3020059493192278, -0.3136817403988912, -0.325310292162263, -0.33688985339222005, -0.34841868024943456, -0.3598950365349881, -0.37131719395183743, -0.38268343236508967, -0.39399204006104793, -0.4052413140049897, -0.41642956009763693, -0.4275550934302818, -0.4386162385385273, -0.44961132965460665, -0.46053871095824006, -0.47139673682599764, -0.48218377207912266, -0.4928981922297839, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.49289819222978426, -0.4821837720791226, -0.4713967368259979, -0.46053871095823995, -0.449611329654607, -0.43861623853852766, -0.42755509343028253, -0.41642956009763726, -0.4052413140049904, -0.39399204006104827, -0.3826834323650904, -0.3713171939518378, -0.359895036534988, -0.3484186802494349, -0.33688985339222, -0.32531029216226337, -0.3136817403988915, -0.3020059493192286, -0.2902846772544625, -0.27851968938505367, -0.2667127574748986, -0.2548656596045144, -0.24298017990326418, -0.231058108280671, -0.21910124015687016, -0.20711137619221853, -0.19509032201612872, -0.183039887955141, -0.17096188876030177, -0.15885814333386158, -0.1467304744553624, -0.13458070850712642, -0.12241067519921603, -0.11022220729388336, -0.0980171403295605, -0.08579731234444028, -0.07356456359966741, -0.06132073630220906, -0.04906767432741809, -0.036807222941359394, -0.024541228522912448, -0.012271538285720572]) },\n]);\nConfig.chipWaves = rawChipToIntegrated(_a.rawChipWaves);\nConfig.rawRawChipWaves = _a.rawChipWaves;\nConfig.firstIndexForSamplesInChipWaveList = _a.chipWaves.length;\nConfig.chipNoises = toNameMap([\n    { name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n    { name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\n    { name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\n    { name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n    { name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n]);\nConfig.filterFreqStep = 1.0 / 4.0;\nConfig.filterFreqRange = 34;\nConfig.filterFreqReferenceSetting = 28;\nConfig.filterFreqReferenceHz = 8000.0;\nConfig.filterFreqMaxHz = _a.filterFreqReferenceHz * Math.pow(2.0, _a.filterFreqStep * (_a.filterFreqRange - 1 - _a.filterFreqReferenceSetting));\nConfig.filterFreqMinHz = 8.0;\nConfig.filterGainRange = 15;\nConfig.filterGainCenter = 7;\nConfig.filterGainStep = 1.0 / 2.0;\nConfig.filterMaxPoints = 12;\nConfig.filterTypeNames = [\"low-pass\", \"high-pass\", \"peak\"];\nConfig.filterMorphCount = 10;\nConfig.filterSimpleCutRange = 11;\nConfig.filterSimplePeakRange = 8;\nConfig.fadeInRange = 10;\nConfig.fadeOutTicks = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\nConfig.fadeOutNeutral = 4;\nConfig.drumsetFadeOutTicks = 48;\nConfig.transitions = toNameMap([\n    { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\n    { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\n]);\nConfig.vibratos = toNameMap([\n    { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\n    { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\n    { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 },\n    { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\n    { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\n]);\nConfig.vibratoTypes = toNameMap([\n    { name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\n    { name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 },\n]);\nConfig.arpSpeedScale = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\nConfig.unisons = toNameMap([\n    { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\n    { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\n    { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\n    { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\n    { name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"vary\", voices: 2, spread: 0.002, offset: 0.0, expression: 0.85, sign: 1.6 },\n    { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\n    { name: \"hold\", voices: 2, spread: 0.003, offset: 0.0, expression: 0.8, sign: -2.5 },\n    { name: \"chorus\", voices: 9, spread: 0.22, offset: 0, expression: 0.15, sign: 1.0 },\n    { name: \"bow\", voices: 9, spread: 0.006, offset: 0, expression: 0.15, sign: 0.5 },\n    { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\n    { name: \"double octave\", voices: 3, spread: 12.0, offset: 0.0, expression: 0.63, sign: 1.0 },\n    { name: \"triple octave\", voices: 4, spread: 18.0, offset: 6.0, expression: 0.5, sign: 1.0 },\n    { name: \"weird octave\", voices: 2, spread: 5.85, offset: 5.85, expression: 0.75, sign: 1.0 },\n    { name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\n    { name: \"alternate fifth\", voices: 2, spread: 2.5, offset: -2.5, expression: 0.9, sign: 1.0 },\n    { name: \"lone fifth\", voices: 1, spread: 0.0, offset: 7.0, expression: 1.4, sign: 1.0 },\n    { name: \"fourth\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\n    { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\n    { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\n    { name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\n    { name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\n    { name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\n    { name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\n    { name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\n    { name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\n    { name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\n    { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\n    { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\n    { name: \"augmented\", voices: 4, spread: 6, offset: 6, expression: 0.5, sign: 1.0 },\n    { name: \"diminished\", voices: 5, spread: 6, offset: 6, expression: 0.4, sign: 1.0 },\n    { name: \"block\", voices: 9, spread: 6, offset: 6, expression: 0.15, sign: 0.8 },\n    { name: \"extraterrestrial\", voices: 6, spread: 15.2, offset: -6, expression: 0.35, sign: 0.7 },\n    { name: \"hyper\", voices: 2, spread: 0.03, offset: -0.02, expression: 0.85, sign: 0.7 },\n    { name: \"broke\", voices: 2, spread: 0.0, offset: -0.3, expression: 0.8, sign: 1.0 },\n    { name: \"energetic\", voices: 2, spread: 6.15, offset: 6.435, expression: 0.85, sign: 0.9 },\n    { name: \"bent\", voices: 2, spread: 9.5, offset: 4.5, expression: 0.8, sign: -0.6 },\n    { name: \"offtune\", voices: 2, spread: 0.40, offset: 0.40, expression: 0.9, sign: 1.0 },\n    { name: \"peak\", voices: 2, spread: 12.038, offset: 12.01, expression: 0.85, sign: 0.9 },\n    { name: \"deep shift\", voices: 2, spread: 12.03, offset: -17.01, expression: 0.85, sign: 1.2 },\n    { name: \"buried\", voices: 2, spread: 0.036, offset: -36.0, expression: 1.4, sign: 1.0 },\n    { name: \"corrupt\", voices: 2, spread: 18.0, offset: 48.0, expression: 0.7, sign: 0.7 },\n    { name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\n    { name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\n]);\nConfig.effectNames = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\", \"\", \"ring mod\", \"granular\"];\nConfig.effectOrder = [2, 10, 11, 7, 8, 9, 5, 14, 3, 4, 1, 6, 0, 13];\nConfig.noteSizeMax = 6;\nConfig.volumeRange = 50;\nConfig.volumeLogScale = 0.1428;\nConfig.panCenter = 50;\nConfig.panMax = _a.panCenter * 2;\nConfig.panDelaySecondsMax = 0.001;\nConfig.ringModRange = 8;\nConfig.ringModHzRange = 64;\nConfig.ringModMinHz = 20;\nConfig.ringModMaxHz = 4400;\nConfig.rmHzOffsetCenter = 200;\nConfig.rmHzOffsetMax = 400;\nConfig.rmHzOffsetMin = 0;\nConfig.granularRange = 10;\nConfig.grainSizeMin = 40;\nConfig.grainSizeMax = 2000;\nConfig.grainSizeStep = 40;\nConfig.grainRangeMax = 1600;\nConfig.grainAmountsMax = 10;\nConfig.granularEnvelopeType = 0;\nConfig.chorusRange = 8;\nConfig.chorusPeriodSeconds = 2.0;\nConfig.chorusDelayRange = 0.0034;\nConfig.chorusDelayOffsets = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\nConfig.chorusPhaseOffsets = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\nConfig.chorusMaxDelay = _a.chorusDelayRange * (1.0 + _a.chorusDelayOffsets[0].concat(_a.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\nConfig.chords = toNameMap([\n    { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\n    { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\n    { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\n    { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\n    { name: \"monophonic\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: true }\n]);\nConfig.maxChordSize = 9;\nConfig.operatorCount = 4;\nConfig.maxPitchOrOperatorCount = Math.max(_a.maxChordSize, _a.operatorCount + 2);\nConfig.algorithms = toNameMap([\n    { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\n    { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\n    { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\n    { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\n    { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\n    { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\n    { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\n    { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\n    { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\n    { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\n    { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\n    { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\n    { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\n    { name: \"1←(2 3) 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\n    { name: \"1←(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\n]);\nConfig.algorithms6Op = toNameMap([\n    { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1←2←3←4←5←6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\n    { name: \"1←3 2←4←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\n    { name: \"1←3←4 2←5←6\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\n    { name: \"1←4 2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\n    { name: \"1←3 2←(4 5←6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\n    { name: \"1←(3 4) 2←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\n    { name: \"1←3 2←(4 5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\n    { name: \"1←3 2←(4 5)←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\n    { name: \"1←3 2←4←(5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\n    { name: \"1←(2 3 4 5 6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1←(2 3←5 4←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\n    { name: \"1←(2 3 4←5←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\n    { name: \"1←4←5 (2 3)←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\n    { name: \"1←(3 4)←5 2←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\n    { name: \"(1 2)←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\n    { name: \"(1 2)←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\n    { name: \"(1 2 3)←(4 5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\n    { name: \"1←5 (2 3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\n    { name: \"1 2←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\n    { name: \"1 2 (3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\n    { name: \"1 2 3 (4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\n    { name: \"1 2←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\n    { name: \"1←4 2←(5 6) 3\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\n    { name: \"1 2 3←5 4←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\n    { name: \"1 (2 3)←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\n    { name: \"1 2 3←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\n    { name: \"(1 2 3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\n    { name: \"1 2 3 4 5←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\n    { name: \"1 2 3 4 5 6\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\n    { name: \"1←(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n    { name: \"1←(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n    { name: \"1←4(2←5(3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\n    { name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\n]);\nConfig.operatorCarrierInterval = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\nConfig.operatorAmplitudeMax = 15;\nConfig.operatorFrequencies = toNameMap([\n    { name: \"0.12×\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.5×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.75×\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\n    { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\n    { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"3.5×\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\n    { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~4×\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\n    { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"10×\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"12×\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"14×\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"15×\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"17×\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"18×\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"19×\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~20×\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\n    { name: \"25×\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"50×\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"75×\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"100×\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"128×\", mult: 128.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"256×\", mult: 250.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n]);\nConfig.envelopes = toNameMap([\n    { name: \"none\", type: 0, speed: 1.0 },\n    { name: \"note size\", type: 1, speed: 1.0 },\n    { name: \"pitch\", type: 2, speed: 1.0 },\n    { name: \"punch\", type: 4, speed: 1.0 },\n    { name: \"flare -1\", type: 5, speed: 128.0 },\n    { name: \"flare 1\", type: 5, speed: 32.0 },\n    { name: \"flare 2\", type: 5, speed: 8.0 },\n    { name: \"flare 3\", type: 5, speed: 2.0 },\n    { name: \"twang -1\", type: 6, speed: 128.0 },\n    { name: \"twang 1\", type: 6, speed: 32.0 },\n    { name: \"twang 2\", type: 6, speed: 8.0 },\n    { name: \"twang 3\", type: 6, speed: 2.0 },\n    { name: \"swell -1\", type: 7, speed: 128.0 },\n    { name: \"swell 1\", type: 7, speed: 32.0 },\n    { name: \"swell 2\", type: 7, speed: 8.0 },\n    { name: \"swell 3\", type: 7, speed: 2.0 },\n    { name: \"tremolo0\", type: 8, speed: 8.0 },\n    { name: \"tremolo1\", type: 8, speed: 4.0 },\n    { name: \"tremolo2\", type: 8, speed: 2.0 },\n    { name: \"tremolo3\", type: 8, speed: 1.0 },\n    { name: \"tremolo4\", type: 9, speed: 4.0 },\n    { name: \"tremolo5\", type: 9, speed: 2.0 },\n    { name: \"tremolo6\", type: 9, speed: 1.0 },\n    { name: \"decay -1\", type: 10, speed: 40.0 },\n    { name: \"decay 1\", type: 10, speed: 10.0 },\n    { name: \"decay 2\", type: 10, speed: 7.0 },\n    { name: \"decay 3\", type: 10, speed: 4.0 },\n    { name: \"wibble-1\", type: 11, speed: 128.0 },\n    { name: \"wibble 1\", type: 11, speed: 24.0 },\n    { name: \"wibble 2\", type: 11, speed: 12.0 },\n    { name: \"wibble 3\", type: 11, speed: 4.0 },\n    { name: \"linear-2\", type: 12, speed: 256.0 },\n    { name: \"linear-1\", type: 12, speed: 128.0 },\n    { name: \"linear 1\", type: 12, speed: 32.0 },\n    { name: \"linear 2\", type: 12, speed: 8.0 },\n    { name: \"linear 3\", type: 12, speed: 2.0 },\n    { name: \"rise -2\", type: 13, speed: 256.0 },\n    { name: \"rise -1\", type: 13, speed: 128.0 },\n    { name: \"rise 1\", type: 13, speed: 32.0 },\n    { name: \"rise 2\", type: 13, speed: 8.0 },\n    { name: \"rise 3\", type: 13, speed: 2.0 },\n    { name: \"flute 1\", type: 11, speed: 16.0 },\n    { name: \"flute 2\", type: 11, speed: 8.0 },\n    { name: \"flute 3\", type: 11, speed: 4.0 },\n    { name: \"tripolo1\", type: 8, speed: 9.0 },\n    { name: \"tripolo2\", type: 8, speed: 6.0 },\n    { name: \"tripolo3\", type: 8, speed: 3.0 },\n    { name: \"tripolo4\", type: 9, speed: 9.0 },\n    { name: \"tripolo5\", type: 9, speed: 6.0 },\n    { name: \"tripolo6\", type: 9, speed: 3.0 },\n    { name: \"pentolo1\", type: 8, speed: 10.0 },\n    { name: \"pentolo2\", type: 8, speed: 5.0 },\n    { name: \"pentolo3\", type: 8, speed: 2.5 },\n    { name: \"pentolo4\", type: 9, speed: 10.0 },\n    { name: \"pentolo5\", type: 9, speed: 5.0 },\n    { name: \"pentolo6\", type: 9, speed: 2.5 },\n    { name: \"flutter 1\", type: 8, speed: 14.0 },\n    { name: \"flutter 2\", type: 9, speed: 11.0 },\n    { name: \"water-y flutter\", type: 8, speed: 9.0 },\n    { name: \"blip 1\", type: 14, speed: 6.0 },\n    { name: \"blip 2\", type: 14, speed: 16.0 },\n    { name: \"blip 3\", type: 14, speed: 32.0 },\n    { name: \"fall 1\", type: 15, speed: 8.0 },\n    { name: \"fall 2\", type: 15, speed: 4.0 },\n    { name: \"fall 3\", type: 15, speed: 2.0 },\n]);\nConfig.newEnvelopes = toNameMap([\n    { name: \"none\", type: 0, speed: 1.0 },\n    { name: \"note size\", type: 1, speed: 1.0 },\n    { name: \"pitch\", type: 2, speed: 1.0 },\n    { name: \"random\", type: 3, speed: 4.0 },\n    { name: \"punch\", type: 4, speed: 1.0 },\n    { name: \"flare\", type: 5, speed: 32.0 },\n    { name: \"twang\", type: 6, speed: 32.0 },\n    { name: \"swell\", type: 7, speed: 32.0 },\n    { name: \"lfo\", type: 8, speed: 4.0 },\n    { name: \"decay\", type: 10, speed: 10.0 },\n    { name: \"wibble\", type: 11, speed: 24.0 },\n    { name: \"linear\", type: 12, speed: 32.0 },\n    { name: \"rise\", type: 13, speed: 32.0 },\n    { name: \"blip\", type: 14, speed: 6.0 },\n    { name: \"fall\", type: 15, speed: 2.0 },\n]);\nConfig.feedbacks = toNameMap([\n    { name: \"1⟲\", indices: [[1], [], [], []] },\n    { name: \"2⟲\", indices: [[], [2], [], []] },\n    { name: \"3⟲\", indices: [[], [], [3], []] },\n    { name: \"4⟲\", indices: [[], [], [], [4]] },\n    { name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\n    { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\n    { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\n    { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\n    { name: \"1→2\", indices: [[], [1], [], []] },\n    { name: \"1→3\", indices: [[], [], [1], []] },\n    { name: \"1→4\", indices: [[], [], [], [1]] },\n    { name: \"2→3\", indices: [[], [], [2], []] },\n    { name: \"2→4\", indices: [[], [], [], [2]] },\n    { name: \"3→4\", indices: [[], [], [], [3]] },\n    { name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\n    { name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\n    { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\n    { name: \"1↔2 3↔4\", indices: [[2], [1], [4], [3]] },\n    { name: \"1↔4 2↔3\", indices: [[4], [3], [2], [1]] },\n    { name: \"2→1→4→3→2\", indices: [[2], [3], [4], [1]] },\n    { name: \"1→2→3→4→1\", indices: [[4], [1], [2], [3]] },\n    { name: \"(1 2 3)→4\", indices: [[], [], [], [1, 2, 3]] },\n    { name: \"ALL\", indices: [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] },\n]);\nConfig.feedbacks6Op = toNameMap([\n    { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1⟲\", indices: [[1], [], [], [], [], []] },\n    { name: \"2⟲\", indices: [[], [2], [], [], [], []] },\n    { name: \"3⟲\", indices: [[], [], [3], [], [], []] },\n    { name: \"4⟲\", indices: [[], [], [], [4], [], []] },\n    { name: \"5⟲\", indices: [[], [], [], [], [5], []] },\n    { name: \"6⟲\", indices: [[], [], [], [], [], [6]] },\n    { name: \"1⟲ 2⟲\", indices: [[1], [2], [], [], [], []] },\n    { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], [], [], []] },\n    { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲\", indices: [[1], [2], [3], [4], [5], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲\", indices: [[1], [2], [3], [4], [5], [6]] },\n    { name: \"1→2\", indices: [[], [1], [], [], [], []] },\n    { name: \"1→3\", indices: [[], [], [1], [], [], []] },\n    { name: \"1→4\", indices: [[], [], [], [1], [], []] },\n    { name: \"1→5\", indices: [[], [], [], [], [1], []] },\n    { name: \"1→6\", indices: [[], [], [], [], [], [1]] },\n    { name: \"2→3\", indices: [[], [], [2], [], [], []] },\n    { name: \"2→4\", indices: [[], [], [], [2], [], []] },\n    { name: \"3→4\", indices: [[], [], [], [3], [], []] },\n    { name: \"4→5\", indices: [[], [], [], [], [4], []] },\n    { name: \"1→4 2→5 3→6\", indices: [[], [], [], [1], [2], [3]] },\n    { name: \"1→5 2→6 3→4\", indices: [[], [], [], [3], [1], [2]] },\n    { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n    { name: \"2→1→6→5→4→3→2\", indices: [[2], [3], [4], [5], [6], [1]] },\n    { name: \"1→2→3→4→5→6→1\", indices: [[6], [1], [2], [3], [4], [5]] },\n    { name: \"1↔2 3↔4 5↔6\", indices: [[2], [1], [4], [3], [6], [5]] },\n    { name: \"1↔4 2↔5 3↔6\", indices: [[4], [5], [6], [1], [2], [3]] },\n    { name: \"(1,2,3,4,5)→6\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\n    { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\n]);\nConfig.chipNoiseLength = 1 << 15;\nConfig.spectrumNoiseLength = 1 << 15;\nConfig.spectrumBasePitch = 24;\nConfig.spectrumControlPoints = 30;\nConfig.spectrumControlPointsPerOctave = 7;\nConfig.spectrumControlPointBits = 3;\nConfig.spectrumMax = (1 << _a.spectrumControlPointBits) - 1;\nConfig.harmonicsControlPoints = 28;\nConfig.harmonicsRendered = 64;\nConfig.harmonicsRenderedForPickedString = 1 << 8;\nConfig.harmonicsControlPointBits = 3;\nConfig.harmonicsMax = (1 << _a.harmonicsControlPointBits) - 1;\nConfig.harmonicsWavelength = 1 << 11;\nConfig.pulseWidthRange = 50;\nConfig.pulseWidthStepPower = 0.5;\nConfig.supersawVoiceCount = 7;\nConfig.supersawDynamismMax = 6;\nConfig.supersawSpreadMax = 12;\nConfig.supersawShapeMax = 6;\nConfig.pitchChannelCountMin = 1;\nConfig.pitchChannelCountMax = 60;\nConfig.noiseChannelCountMin = 0;\nConfig.noiseChannelCountMax = 60;\nConfig.modChannelCountMin = 0;\nConfig.modChannelCountMax = 60;\nConfig.noiseInterval = 6;\nConfig.pitchesPerOctave = 12;\nConfig.drumCount = 12;\nConfig.pitchOctaves = 8;\nConfig.modCount = 6;\nConfig.maxPitch = _a.pitchOctaves * _a.pitchesPerOctave;\nConfig.maximumTonesPerChannel = _a.maxChordSize * 2;\nConfig.justIntonationSemitones = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * _a.pitchesPerOctave);\nConfig.pitchShiftRange = _a.justIntonationSemitones.length;\nConfig.pitchShiftCenter = _a.pitchShiftRange >> 1;\nConfig.detuneCenter = 200;\nConfig.detuneMax = 400;\nConfig.detuneMin = 0;\nConfig.songDetuneMin = 0;\nConfig.songDetuneMax = 500;\nConfig.unisonVoicesMin = 1;\nConfig.unisonVoicesMax = 9;\nConfig.unisonSpreadMin = -96;\nConfig.unisonSpreadMax = 96;\nConfig.unisonOffsetMin = -96;\nConfig.unisonOffsetMax = 96;\nConfig.unisonExpressionMin = -2;\nConfig.unisonExpressionMax = 2;\nConfig.unisonSignMin = -2;\nConfig.unisonSignMax = 2;\nConfig.sineWaveLength = 1 << 8;\nConfig.sineWaveMask = _a.sineWaveLength - 1;\nConfig.sineWave = _a.generateSineWave();\nConfig.perEnvelopeSpeedIndices = [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.3333, 0.4, 0.5, 0.6, 0.6667, 0.7, 0.75, 0.8, 0.9, 1, 1.25, 1.3333, 1.5, 1.6667, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 32, 40, 64, 128, 256];\nConfig.perEnvelopeSpeedToIndices = {\n    0: 0,\n    0.01: 1,\n    0.02: 2,\n    0.03: 3,\n    0.04: 4,\n    0.05: 5,\n    0.06: 6,\n    0.07: 7,\n    0.08: 8,\n    0.09: 9,\n    0.1: 10,\n    0.2: 11,\n    0.25: 12,\n    0.3: 13,\n    0.3333: 14,\n    0.4: 15,\n    0.5: 16,\n    0.6: 17,\n    0.6667: 18,\n    0.7: 19,\n    0.75: 20,\n    0.8: 21,\n    0.9: 22,\n    1: 23,\n    1.25: 24,\n    1.3333: 25,\n    1.5: 26,\n    1.6667: 27,\n    1.75: 28,\n    2: 29,\n    2.25: 30,\n    2.5: 31,\n    2.75: 32,\n    3: 33,\n    3.5: 34,\n    4: 35,\n    4.5: 36,\n    5: 37,\n    5.5: 38,\n    6: 39,\n    6.5: 40,\n    7: 41,\n    7.5: 42,\n    8: 43,\n    8.5: 44,\n    9: 45,\n    9.5: 46,\n    10: 47,\n    11: 48,\n    12: 49,\n    13: 50,\n    14: 51,\n    15: 52,\n    16: 53,\n    17: 54,\n    18: 55,\n    19: 56,\n    20: 57,\n    24: 58,\n    32: 59,\n    40: 60,\n    64: 61,\n    128: 62,\n    256: 63,\n};\nConfig.perEnvelopeBoundMin = 0;\nConfig.perEnvelopeBoundMax = 2;\nConfig.randomEnvelopeSeedMax = 63;\nConfig.randomEnvelopeStepsMax = 32;\nConfig.pickedStringDispersionCenterFreq = 6000.0;\nConfig.pickedStringDispersionFreqScale = 0.3;\nConfig.pickedStringDispersionFreqMult = 4.0;\nConfig.pickedStringShelfHz = 4000.0;\nConfig.distortionRange = 8;\nConfig.stringSustainRange = 15;\nConfig.stringDecayRate = 0.12;\nConfig.enableAcousticSustain = false;\nConfig.sustainTypeNames = [\"bright\", \"acoustic\"];\nConfig.bitcrusherFreqRange = 14;\nConfig.bitcrusherOctaveStep = 0.5;\nConfig.bitcrusherQuantizationRange = 8;\nConfig.maxEnvelopeCount = 16;\nConfig.defaultAutomationRange = 13;\nConfig.instrumentAutomationTargets = toNameMap([\n    { name: \"none\", computeIndex: null, displayName: \"none\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: null },\n    { name: \"noteVolume\", computeIndex: 0, displayName: \"note volume\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: null },\n    { name: \"pulseWidth\", computeIndex: 2, displayName: \"pulse width\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [6, 8] },\n    { name: \"stringSustain\", computeIndex: 3, displayName: \"sustain\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [7] },\n    { name: \"unison\", computeIndex: 4, displayName: \"unison\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [0, 5, 7, 9, 6, 2, 3, 4] },\n    { name: \"operatorFrequency\", computeIndex: 5, displayName: \"fm# freq\", interleave: true, isFilter: false, maxCount: _a.operatorCount + 2, effect: null, compatibleInstruments: [1, 11] },\n    { name: \"operatorAmplitude\", computeIndex: 11, displayName: \"fm# volume\", interleave: false, isFilter: false, maxCount: _a.operatorCount + 2, effect: null, compatibleInstruments: [1, 11] },\n    { name: \"feedbackAmplitude\", computeIndex: 17, displayName: \"fm feedback\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [1, 11] },\n    { name: \"pitchShift\", computeIndex: 18, displayName: \"pitch shift\", interleave: false, isFilter: false, maxCount: 1, effect: 7, compatibleInstruments: null },\n    { name: \"detune\", computeIndex: 19, displayName: \"detune\", interleave: false, isFilter: false, maxCount: 1, effect: 8, compatibleInstruments: null },\n    { name: \"vibratoDepth\", computeIndex: 20, displayName: \"vibrato depth\", interleave: false, isFilter: false, maxCount: 1, effect: 9, compatibleInstruments: null },\n    { name: \"noteFilterAllFreqs\", computeIndex: 1, displayName: \"n. filter freqs\", interleave: false, isFilter: true, maxCount: 1, effect: 5, compatibleInstruments: null },\n    { name: \"noteFilterFreq\", computeIndex: 21, displayName: \"n. filter # freq\", interleave: false, isFilter: true, maxCount: _a.filterMaxPoints, effect: 5, compatibleInstruments: null },\n    { name: \"decimalOffset\", computeIndex: 37, displayName: \"decimal offset\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [6, 8] },\n    { name: \"supersawDynamism\", computeIndex: 38, displayName: \"dynamism\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },\n    { name: \"supersawSpread\", computeIndex: 39, displayName: \"spread\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },\n    { name: \"supersawShape\", computeIndex: 40, displayName: \"saw↔pulse\", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [8] },\n    { name: \"panning\", computeIndex: 41, displayName: \"panning\", interleave: false, isFilter: false, maxCount: 1, effect: 2, compatibleInstruments: null },\n    { name: \"distortion\", computeIndex: 42, displayName: \"distortion\", interleave: false, isFilter: false, maxCount: 1, effect: 3, compatibleInstruments: null },\n    { name: \"bitcrusherQuantization\", computeIndex: 43, displayName: \"bitcrush\", interleave: false, isFilter: false, maxCount: 1, effect: 4, compatibleInstruments: null },\n    { name: \"bitcrusherFrequency\", computeIndex: 44, displayName: \"freq crush\", interleave: false, isFilter: false, maxCount: 1, effect: 4, compatibleInstruments: null },\n    { name: \"chorus\", computeIndex: 45, displayName: \"chorus\", interleave: false, isFilter: false, maxCount: 1, effect: 1, compatibleInstruments: null },\n    { name: \"echoSustain\", computeIndex: 46, displayName: \"echo\", interleave: false, isFilter: false, maxCount: 1, effect: 6, compatibleInstruments: null },\n    { name: \"reverb\", computeIndex: 47, displayName: \"reverb\", interleave: false, isFilter: false, maxCount: 1, effect: 0, compatibleInstruments: null },\n    { name: \"arpeggioSpeed\", computeIndex: 48, displayName: \"arpeggio speed\", interleave: false, isFilter: false, maxCount: 1, effect: 11, compatibleInstruments: null },\n    { name: \"ringModulation\", computeIndex: 49, displayName: \"ring mod\", interleave: false, isFilter: false, maxCount: 1, effect: 13, compatibleInstruments: null },\n    { name: \"ringModulationHz\", computeIndex: 50, displayName: \"ring mod hz\", interleave: false, isFilter: false, maxCount: 1, effect: 13, compatibleInstruments: null },\n    { name: \"granular\", computeIndex: 51, displayName: \"granular\", interleave: false, isFilter: false, maxCount: 1, effect: 14, compatibleInstruments: null },\n    { name: \"grainFreq\", computeIndex: 52, displayName: \"grain freq\", interleave: false, isFilter: false, maxCount: 1, effect: 14, compatibleInstruments: null },\n    { name: \"grainSize\", computeIndex: 53, displayName: \"grain size\", interleave: false, isFilter: false, maxCount: 1, effect: 14, compatibleInstruments: null },\n    { name: \"grainRange\", computeIndex: 54, displayName: \"grain range\", interleave: false, isFilter: false, maxCount: 1, effect: 14, compatibleInstruments: null },\n    { name: \"echoDelay\", computeIndex: 55, displayName: \"echo delay\", interleave: false, isFilter: false, maxCount: 1, effect: 6, compatibleInstruments: null },\n]);\nConfig.operatorWaves = toNameMap([\n    { name: \"sine\", samples: _a.sineWave },\n    { name: \"triangle\", samples: _a.generateTriWave() },\n    { name: \"pulse width\", samples: _a.generateSquareWave(0.5) },\n    { name: \"sawtooth\", samples: _a.generateSawWave() },\n    { name: \"ramp\", samples: _a.generateSawWave(true) },\n    { name: \"trapezoid\", samples: _a.generateTrapezoidWave(2) },\n    { name: \"quasi-sine\", samples: _a.generateQuasiSineWave() },\n]);\nConfig.pwmOperatorWaves = toNameMap([\n    { name: \"1%\", samples: _a.generateSquareWave(0.01) },\n    { name: \"5%\", samples: _a.generateSquareWave(0.05) },\n    { name: \"12.5%\", samples: _a.generateSquareWave(0.125) },\n    { name: \"25%\", samples: _a.generateSquareWave(0.25) },\n    { name: \"33%\", samples: _a.generateSquareWave(1 / 3) },\n    { name: \"50%\", samples: _a.generateSquareWave(0.5) },\n    { name: \"66%\", samples: _a.generateSquareWave(2 / 3) },\n    { name: \"75%\", samples: _a.generateSquareWave(0.75) },\n    { name: \"87.5%\", samples: _a.generateSquareWave(0.875) },\n    { name: \"95%\", samples: _a.generateSquareWave(0.95) },\n    { name: \"99%\", samples: _a.generateSquareWave(0.99) },\n]);\nConfig.barEditorHeight = 10;\nConfig.modulators = toNameMap([\n    { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"No Mod Setting\", promptDesc: [\"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\"] },\n    { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song Volume\", promptDesc: [\"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: _a.tempoMax - _a.tempoMin, newNoteVol: Math.ceil((_a.tempoMax - _a.tempoMin) / 2), forSong: true, convertRealFactor: _a.tempoMin, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song Tempo\", promptDesc: [\"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\"] },\n    { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: _a.reverbRange * 2, newNoteVol: _a.reverbRange, forSong: true, convertRealFactor: -_a.reverbRange, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song Reverb\", promptDesc: [\"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Go To Next Bar\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\"] },\n    { name: \"note volume\", pianoName: \"Note Vol.\", maxRawVol: _a.volumeRange, newNoteVol: Math.ceil(_a.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-_a.volumeRange / 2.0), associatedEffect: 15, maxIndex: 0,\n        promptName: \"Note Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"pan\", pianoName: \"Pan\", maxRawVol: _a.panMax, newNoteVol: Math.ceil(_a.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: 2, maxIndex: 0,\n        promptName: \"Instrument Panning\", promptDesc: [\"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"] },\n    { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: _a.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 0, maxIndex: 0,\n        promptName: \"Instrument Reverb\", promptDesc: [\"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: _a.distortionRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 3, maxIndex: 0,\n        promptName: \"Instrument Distortion\", promptDesc: [\"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 1\", promptDesc: [\"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm feedback\", pianoName: \"FM Feedbck\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: _a.pulseWidthRange, newNoteVol: _a.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\n    { name: \"detune\", pianoName: \"Detune\", maxRawVol: _a.detuneMax - _a.detuneMin, newNoteVol: _a.detuneCenter, forSong: false, convertRealFactor: -_a.detuneCenter, associatedEffect: 8, maxIndex: 0,\n        promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\n    { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9, maxIndex: 0,\n        promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\n    { name: \"song detune\", pianoName: \"Detune\", maxRawVol: _a.songDetuneMax - _a.songDetuneMin, newNoteVol: Math.ceil((_a.songDetuneMax - _a.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\n    { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9, maxIndex: 0,\n        promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9, maxIndex: 0,\n        promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\n    { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: 11, maxIndex: 0,\n        promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\n            \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 2, maxIndex: 0,\n        promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: 11, maxIndex: 0,\n        promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\n    { name: \"eq filter\", pianoName: \"EQFlt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"note filter\", pianoName: \"N.Flt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5, maxIndex: 0,\n        promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: _a.bitcrusherQuantizationRange - 1, newNoteVol: Math.round(_a.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4, maxIndex: 0,\n        promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: _a.bitcrusherFreqRange - 1, newNoteVol: Math.round(_a.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4, maxIndex: 0,\n        promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"echo\", pianoName: \"Echo\", maxRawVol: _a.echoSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: _a.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\"]\n    },\n    { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: _a.chorusRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 1, maxIndex: 0,\n        promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"eq filt cut\", pianoName: \"EQFlt Cut\", maxRawVol: _a.filterSimpleCutRange - 1, newNoteVol: _a.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"eq filt peak\", pianoName: \"EQFlt Peak\", maxRawVol: _a.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"note filt cut\", pianoName: \"N.Flt Cut\", maxRawVol: _a.filterSimpleCutRange - 1, newNoteVol: _a.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 5, maxIndex: 0,\n        promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"note filt peak\", pianoName: \"N.Flt Peak\", maxRawVol: _a.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5, maxIndex: 0,\n        promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: _a.pitchShiftRange - 1, newNoteVol: _a.pitchShiftCenter, forSong: false, convertRealFactor: -_a.pitchShiftCenter, associatedEffect: 7, maxIndex: 0,\n        promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\n    { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: _a.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"mix volume\", pianoName: \"Mix Vol.\", maxRawVol: _a.volumeRange, newNoteVol: Math.ceil(_a.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-_a.volumeRange / 2.0), associatedEffect: 15, maxIndex: 0,\n        promptName: \"Mix Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, invertSliderIndicator: true, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI]\"] },\n    { name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\n            \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: _a.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"spread\", pianoName: \"Spread\", maxRawVol: _a.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: _a.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"] },\n    { name: \"individual envelope speed\", pianoName: \"IndvEnvSpd\", maxRawVol: 63, newNoteVol: 23, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Speed\", promptDesc: [\"This setting controls how fast the specified envelope of the instrument will play.\", \"At $LO, your the envelope will be frozen, and at values near there they will change very slowly. At 23, the envelope will work as usual, performing at normal speed. This increases up to $HI, where the envelope will change very quickly. The speeds are given below:\",\n            \"[0-4]: x0, x0.01, x0.02, x0.03, x0.04,\", \"[5-9]: x0.05, x0.06, x0.07, x0.08, x0.09,\", \"[10-14]: x0.1, x0.2, x0.25, x0.3, x0.33,\", \"[15-19]: x0.4, x0.5, x0.6, x0.6667, x0.7,\", \"[20-24]: x0.75, x0.8, x0.9, x1, x1.25,\", \"[25-29]: x1.3333, x1.5, x1.6667, x1.75, x2,\", \"[30-34]: x2.25, x2.5, x2.75, x3, x3.5,\", \"[35-39]: x4, x4.5, x5, x5.5, x6,\", \"[40-44]: x6.5, x7, x7.5, x8, x8.5,\", \"[45-49]: x9, x9.5, x10, x11, x12\", \"[50-54]: x13, x14, x15, x16, x17\", \"[55-59]: x18, x19, x20, x24, x32\", \"[60-63]: x40, x64, x128, x256\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"song eq\", pianoName: \"Song EQ\", maxRawVol: 10, newNoteVol: 0, forSong: true, convertRealFactor: 0, associatedEffect: 15, maxIndex: 0,\n        promptName: \"Song EQ Filter\", promptDesc: [\"This setting overwrites every instrument's eq filter. You can do this in a few separate ways, similar to the per instrument eq filter modulator.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"reset envelope\", pianoName: \"ResetEnv\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Reset Envelope\", promptDesc: [\"This setting functions a lot like the reset arp modulator. Wherever a note is placed, the envelope of this instrument at the specified index will reset at the very start of that note. \", \"[$LO - $HI]\",] },\n    { name: \"ring modulation\", pianoName: \"Ring Mod\", maxRawVol: _a.ringModRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 13, maxIndex: 0,\n        promptName: \"Ring Modulation\", promptDesc: [\"This setting controls the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"ring mod hertz\", pianoName: \"Ring Mod(Hz)\", maxRawVol: _a.ringModHzRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 13, maxIndex: 0,\n        promptName: \"Ring Modulation (Hertz)\", promptDesc: [\"This setting controls the Hertz (Hz) used in the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"granular\", pianoName: \"Granular\", maxRawVol: _a.granularRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14, maxIndex: 0,\n        promptName: \"Granular\", promptDesc: [\"This setting controls the granular effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain freq\", pianoName: \"Grain #\", maxRawVol: _a.grainAmountsMax, newNoteVol: 8, forSong: false, convertRealFactor: 0, associatedEffect: 14, maxIndex: 0,\n        promptName: \"Grain Count\", promptDesc: [\"This setting controls the density of grains for the granular effect on your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain size\", pianoName: \"Grain Size\", maxRawVol: _a.grainSizeMax / _a.grainSizeStep, newNoteVol: _a.grainSizeMin / _a.grainSizeStep, forSong: false, convertRealFactor: 0, associatedEffect: 14, maxIndex: 0,\n        promptName: \"Grain Size\", promptDesc: [\"This setting controls the grain size of the granular effect in your instrument.\", \"The number shown in the mod channel is multiplied by \" + _a.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain range\", pianoName: \"Grain Range\", maxRawVol: _a.grainRangeMax / _a.grainSizeStep, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 14, maxIndex: 0,\n        promptName: \"Grain Range\", promptDesc: [\"This setting controls the range of values for your grain size of the granular effect in your instrument, from no variation to a lot\", \"The number shown in the mod channel is multiplied by \" + _a.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"individual envelope lower bound\", pianoName: \"IndvEnvLow\", maxRawVol: _a.perEnvelopeBoundMax * 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Lower Bound\", promptDesc: [\"This setting controls the envelope lower bound\", \"At $LO, your the envelope will output an upper envelope bound to 0, and at $HI your envelope will output an upper envelope bound to 2.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",] },\n    { name: \"individual envelope upper bound\", pianoName: \"IndvEnvUp\", maxRawVol: _a.perEnvelopeBoundMax * 10, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 15, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Upper Bound\", promptDesc: [\"This setting controls the envelope upper bound\", \"At $LO, your the envelope will output a 0 to lower envelope bound, and at $HI your envelope will output a 2 to lower envelope bound.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",] },\n]);\nfunction centerWave(wave) {\n    let sum = 0.0;\n    for (let i = 0; i < wave.length; i++)\n        sum += wave[i];\n    const average = sum / wave.length;\n    for (let i = 0; i < wave.length; i++)\n        wave[i] -= average;\n    performIntegral(wave);\n    wave.push(0);\n    return new Float32Array(wave);\n}\nfunction centerAndNormalizeWave(wave) {\n    let magn = 0.0;\n    centerWave(wave);\n    for (let i = 0; i < wave.length - 1; i++) {\n        magn += Math.abs(wave[i]);\n    }\n    const magnAvg = magn / (wave.length - 1);\n    for (let i = 0; i < wave.length - 1; i++) {\n        wave[i] = wave[i] / magnAvg;\n    }\n    return new Float32Array(wave);\n}\nexport function performIntegral(wave) {\n    let cumulative = 0.0;\n    let newWave = new Float32Array(wave.length);\n    for (let i = 0; i < wave.length; i++) {\n        newWave[i] = cumulative;\n        cumulative += wave[i];\n    }\n    return newWave;\n}\nexport function performIntegralOld(wave) {\n    let cumulative = 0.0;\n    for (let i = 0; i < wave.length; i++) {\n        const temp = wave[i];\n        wave[i] = cumulative;\n        cumulative += temp;\n    }\n}\nexport function getPulseWidthRatio(pulseWidth) {\n    return pulseWidth / (Config.pulseWidthRange * 2);\n}\nexport function getDrumWave(index, inverseRealFourierTransform, scaleElementsByFactor) {\n    let wave = Config.chipNoises[index].samples;\n    if (wave == null) {\n        wave = new Float32Array(Config.chipNoiseLength + 1);\n        Config.chipNoises[index].samples = wave;\n        if (index == 0) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 1 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 1) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.random() * 2.0 - 1.0;\n            }\n        }\n        else if (index == 2) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 2 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 3) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 4) {\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n            inverseRealFourierTransform(wave, Config.chipNoiseLength);\n            scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        }\n        else if (index == 5) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 6) {\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\n            inverseRealFourierTransform(wave, Config.chipNoiseLength);\n            scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        }\n        else if (index == 7) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 15 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 8) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) / 2.0 - 0.5;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 9) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 8 ^ 2 << 16;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 10) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round(Math.random());\n            }\n        }\n        else if (index == 11) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round((drumBuffer & 1));\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 12) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var ultraboxnewchipnoiserand = Math.random();\n                wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\n            }\n        }\n        else if (index == 13) {\n            var b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\n            b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                b0 = 0.99886 * b0 + white * 0.0555179;\n                b1 = 0.99332 * b1 + white * 0.0750759;\n                b2 = 0.96900 * b2 + white * 0.1538520;\n                b3 = 0.86650 * b3 + white * 0.3104856;\n                b4 = 0.55000 * b4 + white * 0.5329522;\n                b5 = -0.7616 * b5 - white * 0.0168980;\n                wave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n                wave[i] *= 0.44;\n                b6 = white * 0.115926;\n            }\n        }\n        else if (index == 14) {\n            var lastOut = 0.0;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                wave[i] = (lastOut + (0.02 * white)) / 1.02;\n                lastOut = wave[i];\n                wave[i] *= 14;\n            }\n        }\n        else {\n            throw new Error(\"Unrecognized drum index: \" + index);\n        }\n        wave[Config.chipNoiseLength] = wave[0];\n    }\n    return wave;\n}\nexport function drawNoiseSpectrum(wave, waveLength, lowOctave, highOctave, lowPower, highPower, overallSlope) {\n    const referenceOctave = 11;\n    const referenceIndex = 1 << referenceOctave;\n    const lowIndex = Math.pow(2, lowOctave) | 0;\n    const highIndex = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n    const retroWave = getDrumWave(0, null, null);\n    let combinedAmplitude = 0.0;\n    for (let i = lowIndex; i < highIndex; i++) {\n        let lerped = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n        let amplitude = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\n        combinedAmplitude += amplitude;\n        amplitude *= retroWave[i];\n        const radians = 0.61803398875 * i * i * Math.PI * 2.0;\n        wave[i] = Math.cos(radians) * amplitude;\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\n    }\n    return combinedAmplitude;\n}\nexport function getArpeggioPitchIndex(pitchCount, useFastTwoNoteArp, arpeggio) {\n    let arpeggioPattern = Config.arpeggioPatterns[pitchCount - 1];\n    if (arpeggioPattern != null) {\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\n            arpeggioPattern = [0, 0, 1, 1];\n        }\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\n    }\n    else {\n        return arpeggio % pitchCount;\n    }\n}\nexport function toNameMap(array) {\n    const dictionary = {};\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        value.index = i;\n        dictionary[value.name] = value;\n    }\n    const result = array;\n    result.dictionary = dictionary;\n    return result;\n}\nexport function effectsIncludeTransition(effects) {\n    return (effects & (1 << 10)) != 0;\n}\nexport function effectsIncludeChord(effects) {\n    return (effects & (1 << 11)) != 0;\n}\nexport function effectsIncludePitchShift(effects) {\n    return (effects & (1 << 7)) != 0;\n}\nexport function effectsIncludeDetune(effects) {\n    return (effects & (1 << 8)) != 0;\n}\nexport function effectsIncludeVibrato(effects) {\n    return (effects & (1 << 9)) != 0;\n}\nexport function effectsIncludeNoteFilter(effects) {\n    return (effects & (1 << 5)) != 0;\n}\nexport function effectsIncludeDistortion(effects) {\n    return (effects & (1 << 3)) != 0;\n}\nexport function effectsIncludeBitcrusher(effects) {\n    return (effects & (1 << 4)) != 0;\n}\nexport function effectsIncludePanning(effects) {\n    return (effects & (1 << 2)) != 0;\n}\nexport function effectsIncludeChorus(effects) {\n    return (effects & (1 << 1)) != 0;\n}\nexport function effectsIncludeEcho(effects) {\n    return (effects & (1 << 6)) != 0;\n}\nexport function effectsIncludeReverb(effects) {\n    return (effects & (1 << 0)) != 0;\n}\nexport function effectsIncludeRingModulation(effects) {\n    return (effects & (1 << 13)) != 0;\n}\nexport function effectsIncludeGranular(effects) {\n    return (effects & (1 << 14)) != 0;\n}\nexport function effectsIncludeNoteRange(effects) {\n    return (effects & (1 << 12)) != 0;\n}\nexport function calculateRingModHertz(sliderHz, sliderHzOffset = 0) {\n    if (sliderHz == 0)\n        return 0;\n    if (sliderHz > 0)\n        sliderHz -= 1 / Config.ringModHzRange;\n    if (sliderHz > 1 / Config.ringModHzRange)\n        sliderHz += 1 / Config.ringModHzRange;\n    return Math.floor(Config.ringModMinHz * Math.pow(Config.ringModMaxHz / Config.ringModMinHz, sliderHz));\n}\nexport function rawChipToIntegrated(raw) {\n    const newArray = new Array(raw.length);\n    const dictionary = {};\n    for (let i = 0; i < newArray.length; i++) {\n        newArray[i] = Object.assign([], raw[i]);\n        const value = newArray[i];\n        value.index = i;\n        dictionary[value.name] = value;\n    }\n    for (let key in dictionary) {\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\n    }\n    const result = newArray;\n    result.dictionary = dictionary;\n    return result;\n}\n//# sourceMappingURL=SynthConfig.js.map","import { toNameMap, TypePresets } from \"../synth/SynthConfig\";\nexport const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\nexport function prettyNumber(value) {\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\n}\nexport class EditorConfig {\n    static valueToPreset(presetValue) {\n        var _a;\n        const categoryIndex = presetValue >> 6;\n        const presetIndex = presetValue & 0x3F;\n        return (_a = EditorConfig.presetCategories[categoryIndex]) === null || _a === void 0 ? void 0 : _a.presets[presetIndex];\n    }\n    static midiProgramToPresetValue(program) {\n        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset = category.presets[presetIndex];\n                if (preset.generalMidi && preset.midiProgram == program)\n                    return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n    static nameToPresetValue(presetName) {\n        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset = category.presets[presetIndex];\n                if (preset.name == presetName)\n                    return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n    static instrumentToPreset(instrument) {\n        var _a;\n        return (_a = EditorConfig.presetCategories[0].presets.dictionary) === null || _a === void 0 ? void 0 : _a[TypePresets === null || TypePresets === void 0 ? void 0 : TypePresets[instrument]];\n    }\n}\nEditorConfig.version = \"0.0.0\";\nEditorConfig.versionDisplayName = \"JukeBox \" + EditorConfig.version;\nEditorConfig.releaseNotesURL = \"./patch_notes.html\";\nEditorConfig.isOnMac = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\nEditorConfig.ctrlSymbol = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\nEditorConfig.ctrlName = EditorConfig.isOnMac ? \"command\" : \"control\";\nEditorConfig.presetCategories = toNameMap([\n    {\n        name: \"Custom Instruments\", presets: toNameMap([\n            { name: TypePresets[0], customType: 0 },\n            { name: TypePresets[1], customType: 1 },\n            { name: TypePresets[2], customType: 2 },\n            { name: TypePresets[3], customType: 3 },\n            { name: TypePresets[4], customType: 4 },\n            { name: TypePresets[5], customType: 5 },\n            { name: TypePresets[6], customType: 6 },\n            { name: TypePresets[7], customType: 7 },\n            { name: TypePresets[8], customType: 8 },\n            { name: TypePresets[9], customType: 9 },\n            { name: TypePresets[11], customType: 11 },\n        ])\n    },\n    {\n        name: \"Retro Presets\", presets: toNameMap([\n            { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\n            { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\n            { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\n            { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\n            { name: \"supersaw lead\", midiProgram: 81, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n            { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n            { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n            { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n            { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\n            { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [], \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }], \"envelopes\": [] } },\n            { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\n            { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\n            { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\n            { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\n            { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\n            { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\n        ])\n    },\n    {\n        name: \"Keyboard Presets\", presets: toNameMap([\n            { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n            { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\n            { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n            { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\n            { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\n            { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\n            { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n            { name: \"grand piano 3\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.0884 }], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 71, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"stringSustainType\": \"acoustic\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }] } },\n        ])\n    },\n    {\n        name: \"Idiophone Presets\", presets: toNameMap([\n            { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\n            { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 193, \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\n            { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\n            { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n            { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 197, \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 198, \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 7, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\n            { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\n            { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\n            { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\n            { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 205, \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Guitar Presets\", presets: toNameMap([\n            { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\n            { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\n            { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\n        ])\n    },\n    {\n        name: \"Picked Bass Presets\", presets: toNameMap([\n            { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\n            { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\n            { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\n            { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\n            { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\n            { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n            { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\n        ])\n    },\n    {\n        name: \"Picked String Presets\", presets: toNameMap([\n            { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\n            { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n            { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\n            { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n            { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\n        ])\n    },\n    {\n        name: \"Distortion Presets\", presets: toNameMap([\n            { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n            { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n            { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\n            { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\n            { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\n            { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\n            { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\n        ])\n    },\n    {\n        name: \"Bellows Presets\", presets: toNameMap([\n            { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\n            { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 515, \"effects\": [\"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n            { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n            { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\n            { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n            { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\n            { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\n        ])\n    },\n    {\n        name: \"String Presets\", presets: toNameMap([\n            { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n            { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\n            { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n            { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n            { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }], \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n            { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\n            { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\n            { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n            { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\n            { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\n            { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 588, \"effects\": [\"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"supersaw string\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 500, \"linearGain\": 0.1768 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 6, \"pulseWidth\": 35.35534, \"dynamism\": 83, \"spread\": 8, \"shape\": 50, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n            { name: \"supersaw string 2\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"chorus\": 57, \"reverb\": 42, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 67, \"spread\": 58, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"pulseWidth\", \"envelope\": \"flare 2\" }] } },\n        ])\n    },\n    {\n        name: \"Vocal Presets\", presets: toNameMap([\n            { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\n            { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 6, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 4 }], \"reverb\": 0, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n            { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\n            { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\n            { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\n        ])\n    },\n    {\n        name: \"Brass Presets\", presets: toNameMap([\n            { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n            { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\n            { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\n            { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\n            { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\n            { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\n        ])\n    },\n    {\n        name: \"Reed Presets\", presets: toNameMap([\n            { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n            { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\n            { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n            { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n            { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\n            { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n            { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 778, \"effects\": [\"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Flute Presets\", presets: toNameMap([\n            { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 832, \"eqSubFilters1\": [], \"effects\": [\"reverb\"], \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\n            { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\n            { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n            { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\n            { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\n            { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\n            { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n            { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n        ])\n    },\n    {\n        name: \"Pad Presets\", presets: toNameMap([\n            { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\n            { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\n            { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n            { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\n            { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n            { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n            { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\n            { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\n            { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n            { name: \"supersaw pad\", midiProgram: 93, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }], \"effects\": [\"reverb\"], \"reverb\": 100, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n        ])\n    },\n    {\n        name: \"Drum Presets\", presets: toNameMap([\n            { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\n            { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\n            { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n            { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n            { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\n            { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n            { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n            { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n            { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\n            { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\n            { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n        ])\n    },\n    {\n        name: \"Novelty Presets\", presets: toNameMap([\n            { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\n            { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n            { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\n            { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\n            { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\n            { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n            { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\n            { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\n            { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\n            { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\n            { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\n            { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n            { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\n            { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\n            { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n        ])\n    },\n    {\n        name: \"UltraBox Presets\", presets: toNameMap([\n            { name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"dubstep bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }] } },\n            { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"effects\": [\"transition type\", \"note filter\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n            { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }] } },\n            { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chord type\"], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"2×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" }] } },\n            { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"echo\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }] } },\n            { name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n            { name: \"chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"vibrato\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n            { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"effects\": [\"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4 5 6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n            { name: \"wind\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 250.03, \"linearGain\": 11.3137 }], \"eqFilterType\": true, \"eqSimpleCut\": 0, \"eqSimplePeak\": 7, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n            { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [\"chord type\", \"reverb\"], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n            { name: \"vocal why\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0], \"unison\": \"octave\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n        ])\n    },\n    { name: \"Misc Modded Presets\", presets: toNameMap([\n            { name: \"modbox theepsynth\", settings: { \"type\": \"FM\", \"effects\": \"none\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"blackbox deep key\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 32, \"filterEnvelope\": \"twang 1\", \"interval\": \"shimmer\", \"vibrato\": \"light\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 30] } },\n            { name: \"blackbox ring ding\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1500, \"filterResonance\": 16, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"12×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"22×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }] } },\n            { name: \"todbox accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"todbox accordian\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n            { name: \"todbox wind\", generalMidi: false, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 200, \"filterResonance\": 2950, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1→3 2→4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 0, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 0, \"envelope\": \"flare 2\" }] } },\n            { name: \"Whastle (VoxBox)\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"detuneCents\": 24, \"vibrato\": \"custom\", \"vibratoDepth\": 0.24, \"vibratoDelay\": 19, \"vibratoSpeed\": 4, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 32, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [100, 86, 71, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }], \"isDrum\": false } },\n            { name: \"Nastortion Guitar (VoxBox)\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"pitch shift\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"pitchShiftSemitones\": 12, \"detuneCents\": 22, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 100, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 35, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -1, \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"octave\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n            { name: \"Sawcoustic Bass (VoxBox)\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 17, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 1.4142 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"note filter\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"detuneCents\": 13, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.7071 }], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 8, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 0, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopeInverse0\": false, \"envelopeInverse1\": false, \"envelopeInverse2\": false, \"envelopeInverse3\": false, \"envelopeInverse4\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang -1\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"index\": 2 }, { \"target\": \"operatorFrequency\", \"envelope\": \"linear-1\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"index\": 3 }], \"isDrum\": false } },\n        ]) },\n    { name: \"Sandbox Presets\", presets: toNameMap([\n            { name: \"sandbox abnormality\", generalMidi: false, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"spiky\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\n            { name: \"sandbox playstation\", generalMidi: false, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"glitch\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n            { name: \"sandbox harmony pulse\", generalMidi: false, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"punch\", \"wave\": \"double pulse\", \"interval\": \"union\", \"vibrato\": \"none\" } },\n            { name: \"sandbox pink ping\", generalMidi: false, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 3000, \"filterResonance\": 0, \"filterEnvelope\": \"tripolo6\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"sandbox clean pulse\", generalMidi: false, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] } },\n            { name: \"sandbox snp chorus\", generalMidi: false, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"chorus & reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 1, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }] } },\n            { name: \"sandbox snp echo\", generalMidi: false, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"chorus\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 9, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 5, \"envelope\": \"twang 2\" }] } },\n            { name: \"sandbox tori synth lead\", generalMidi: false, settings: { \"type\": \"harmonics\", \"effects\": \"chorus\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 71, 71, 43, 43, 43, 29, 29, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 29, 14, 0, 0, 0, 86] } },\n            { name: \"sandbox glorious piano 1\", generalMidi: false, settings: { \"type\": \"custom chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [24, 24, -16, -15, -15, -14, -13, -13, -12, -11, -11, -10, -9, -8, -8, -7, -6, -5, -5, -4, -3, -2, -2, 23, 22, 22, 21, 20, 20, 19, 19, 18, 18, 17, 16, 15, 15, 14, 13, 12, 12, 11, 0, -1, -1, -2, -3, -3, -4, -5, -5, -6, -20, -19, -17, -17, -14, -11, -8, -5, -2, -23, -24, -24] } },\n            { name: \"sandbox glorious piano 2\", generalMidi: false, settings: { \"type\": \"custom chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"interval\": \"shimmer\", \"vibrato\": \"light\", \"customChipWave\": [24, 24, -16, -15, -15, -14, -13, -13, -12, 12, 9, 5, 2, -3, -7, -10, -6, -5, -5, -4, -3, -2, -2, 23, 22, 22, 21, 20, 20, 19, 19, 18, 18, 17, 16, 15, 15, 0, 4, 8, 15, 21, 0, -1, -1, -2, -3, -3, -4, -5, -5, -6, -20, -19, -17, -17, -2, -2, -8, 2, -2, -5, -24, -24] } },\n            { name: \"sandbox muffled katrumpet\", generalMidi: false, settings: { \"type\": \"custom chip\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"light\", \"customChipWave\": [24, 23, 22, 22, 22, 22, 22, 21, 21, 19, 19, 15, 11, 7, 5, -2, -5, -11, -13, -14, -16, -17, -17, -17, -17, -17, -17, -17, -17, -13, -10, -1, 4, 6, 8, 10, 11, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 11, 8, 4, 2, -4, -7, -11, -12, -13, -14, -15, -15, -15] } },\n            { name: \"sandbox ehruthing\", generalMidi: false, settings: { \"type\": \"custom chip\", \"hard fade\": \"seamless\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [24, 24, 23, 22, 21, 21, 20, 19, 18, 18, 17, 16, 15, -22, -20, -18, -16, -14, -13, -11, -10, -7, -6, -4, -3, -2, 0, 2, 4, 17, 16, 15, 13, 12, 11, 9, 8, 6, 5, 4, 3, 2, 1, -1, -1, -2, -3, -4, -6, -6, -7, -8, -8, -9, -10, -10, -11, -13, -15, -16, -17, -3, -4, -5] } },\n            { name: \"sandbox wurtz organ\", generalMidi: false, settings: { \"type\": \"FM\", \"transition\": \"seamless\", \"effects\": \"chorus\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"tremolo6\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"tripolo3\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"pentolo3\" }, { \"frequency\": \"8×\", \"amplitude\": 2, \"envelope\": \"pentolo6\" }] } },\n        ]) },\n    { name: \"Midbox Misc Presets\", presets: toNameMap([\n            { name: \"Broken Music Box\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 1.4142 }], \"effects\": [\"transition type\", \"chord type\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"vibrato\": \"custom\", \"vibratoDepth\": 0.72, \"vibratoDelay\": 19, \"vibratoSpeed\": 30, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"bitcrusherOctave\": 3, \"bitcrusherQuantization\": 29, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 23, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"wave\": \"rounded\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 64, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n            { name: \"Enhanced Synth Kick\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 19027.31, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 19027.31, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }], \"effects\": [\"pitch shift\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\"], \"pitchShiftSemitones\": 24, \"vibrato\": \"custom\", \"vibratoDepth\": 2, \"vibratoDelay\": 0, \"vibratoSpeed\": 30, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 11.3137 }], \"distortion\": 71, \"aliases\": false, \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 57, \"panDelay\": 10, \"chorus\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 3\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 1\" }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 1 }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 2\" }] } },\n            { name: \"Scratch String\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 0.25 }], \"effects\": [\"transition type\", \"vibrato\", \"note filter\", \"distortion\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }], \"distortion\": 100, \"aliases\": false, \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 0.75, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n            { name: \"Xylophone Saw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.1768 }], \"effects\": [\"chord type\", \"pitch shift\", \"vibrato\", \"bitcrusher\", \"chorus\", \"echo\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 14, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 0.75, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 24, \"7\": 24, \"8\": 24, \"9\": 24, \"10\": 24, \"11\": -12, \"12\": -12, \"13\": -12, \"14\": -12, \"15\": -12, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 12, \"23\": 12, \"24\": 12, \"25\": 12, \"26\": 12, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 24, \"39\": 24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": -11, \"44\": -11, \"45\": -11, \"46\": -11, \"47\": -11, \"48\": 24, \"49\": 24, \"50\": 24, \"51\": 24, \"52\": 24, \"53\": 24, \"54\": 12, \"55\": 12, \"56\": 12, \"57\": 12, \"58\": 12, \"59\": 12, \"60\": 12, \"61\": 12, \"62\": 12, \"63\": 12 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            { name: \"Bow Bass\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chord type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 19, \"vibrato\": \"custom\", \"vibratoDepth\": 0.36, \"vibratoDelay\": 0, \"vibratoSpeed\": 30, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }], \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 29, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 0.75, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"wave\": \"square\", \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 12, \"unisonOffset\": -12, \"unisonExpression\": 1, \"unisonSign\": 1, \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": 24, \"7\": 24, \"8\": 24, \"9\": 24, \"10\": 24, \"11\": 24, \"12\": 24, \"13\": 24, \"14\": 24, \"15\": 24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": 24, \"25\": 24, \"26\": 24, \"27\": 24, \"28\": 24, \"29\": 24, \"30\": 24, \"31\": 24, \"32\": 24, \"33\": 24, \"34\": 24, \"35\": 24, \"36\": 24, \"37\": 24, \"38\": 24, \"39\": 24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": 24, \"49\": 24, \"50\": 24, \"51\": 24, \"52\": 24, \"53\": 24, \"54\": 24, \"55\": 24, \"56\": 24, \"57\": 24, \"58\": 24, \"59\": 24, \"60\": 24, \"61\": 24, \"62\": 24, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 2\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n            { name: \"Depths\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 2 }], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 0, \"detuneCents\": -52, \"vibrato\": \"custom\", \"vibratoDepth\": 0.56, \"vibratoDelay\": 0, \"vibratoSpeed\": 1, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.0884 }], \"bitcrusherOctave\": 3, \"bitcrusherQuantization\": 29, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 71, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 3, \"waveform\": \"ramp\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo4\", \"index\": 0 }] } },\n            { name: \"Disco Vocal Lead\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"pitch shift\", \"note filter\", \"distortion\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 4 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 4 }], \"distortion\": 100, \"aliases\": false, \"panDelay\": 10, \"chorus\": 100, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"harmonics\": [43, 71, 100, 0, 0, 100, 0, 57, 0, 0, 0, 86, 29, 0, 0, 0, 0, 14, 0, 14, 14, 0, 0, 0, 0, 43, 0, 0], \"unison\": \"piano\", \"stringSustain\": 93, \"envelopes\": [] } },\n            { name: \"Blessed Piano\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"effects\": [\"chord type\", \"pitch shift\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"vibrato\": \"custom\", \"vibratoDepth\": 0.48, \"vibratoDelay\": 11, \"vibratoSpeed\": 16, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 29, \"panDelay\": 10, \"chorus\": 86, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"wave\": \"triangle\", \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 6, \"unisonOffset\": 6.5, \"unisonExpression\": 0.8, \"unisonSign\": 1, \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n            { name: \"Sawtooth Pluck\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.25 }], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"vibrato\", \"note filter\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 4 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 4 }], \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"wave\": \"sawtooth\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell 1\", \"index\": 2 }] } },\n            { name: \"Desolated Piano\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }], \"effects\": [\"pitch shift\", \"vibrato\", \"bitcrusher\", \"chorus\", \"reverb\"], \"pitchShiftSemitones\": 24, \"vibrato\": \"custom\", \"vibratoDepth\": 0.6, \"vibratoDelay\": 1, \"vibratoSpeed\": 18, \"vibratoType\": 0, \"bitcrusherOctave\": 3.5, \"bitcrusherQuantization\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 3, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 4, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"vibratoDepth\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"decay 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }] } },\n            { name: \"Distorted Guitar 1\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\", \"chorus\", \"echo\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.1768 }], \"distortion\": 71, \"aliases\": false, \"panDelay\": 10, \"chorus\": 14, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 39, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n            { name: \"Distorted Guitar 2\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"panDelay\": 10, \"chorus\": 43, \"reverb\": 52, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 10, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 3, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n            { name: \"Distorted Guitar 3\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 4 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 4 }], \"effects\": [\"pitch shift\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"pitchShiftSemitones\": 24, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 0.3536 }], \"distortion\": 100, \"aliases\": false, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [100, 0, 86, 0, 43, 0, 100, 43, 0, 29, 0, 100, 0, 0, 0, 71, 43, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 29], \"unison\": \"none\", \"stringSustain\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang 1\" }] } },\n            { name: \"High Pad\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 8 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 8 }], \"effects\": [\"pitch shift\", \"vibrato\", \"note filter\", \"chorus\"], \"pitchShiftSemitones\": 12, \"vibrato\": \"custom\", \"vibratoDepth\": 0.28, \"vibratoDelay\": 19, \"vibratoSpeed\": 30, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"panDelay\": 10, \"chorus\": 86, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 24, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 11, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 13, \"waveform\": \"pulse width\", \"pulseWidth\": 3 }, { \"frequency\": \"0.12×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 1, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 1\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 1\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }] } },\n            { name: \"Magical Pulse\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"pitch shift\", \"vibrato\", \"chorus\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 24, \"vibrato\": \"custom\", \"vibratoDepth\": 0.56, \"vibratoDelay\": 27, \"vibratoSpeed\": 14, \"vibratoType\": 0, \"panDelay\": 10, \"chorus\": 57, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"wave\": \"sawtooth\", \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.03, \"unisonOffset\": -0.02, \"unisonExpression\": 0.85, \"unisonSign\": 0.7, \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"swell 3\" }] } },\n            { name: \"Distorted Lead\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"distortion\", \"bitcrusher\", \"chorus\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 2, \"bitcrusherQuantization\": 0, \"panDelay\": 10, \"chorus\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"pulse width\", \"pulseWidth\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"ramp\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n            { name: \"FM Punch Bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2.8284 }], \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"ramp\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            { name: \"Rough Glistening Piano\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.1768 }], \"effects\": [\"chord type\", \"note filter\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 23, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [100, 71, 43, 29, 29, 14, 14, 43, 0, 43, 0, 57, 71, 0, 71, 43, 0, 0, 57, 0, 57, 0, 71, 0, 71, 0, 57, 0], \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 2\", \"index\": 0 }] } },\n            { name: \"Soft Glistening Piano\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.3536 }], \"effects\": [\"chord type\", \"detune\", \"note filter\", \"chorus\", \"reverb\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": -20, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"panDelay\": 10, \"chorus\": 29, \"reverb\": 97, \"fadeInSeconds\": 0.135, \"fadeOutTicks\": 48, \"harmonics\": [100, 0, 0, 29, 29, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 43, 14, 0, 0, 0, 0], \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 2\", \"index\": 0 }] } },\n            { name: \"Jingle Bells\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2 }], \"effects\": [\"chord type\", \"pitch shift\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"detuneCents\": 8, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 2.8284 }], \"bitcrusherOctave\": 5, \"bitcrusherQuantization\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 57, \"echoDelayBeats\": 1.667, \"reverb\": 77, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [100, 29, 57, 71, 0, 0, 0, 0, 0, 0, 0, 14, 43, 14, 0, 0, 0, 0, 0, 0, 14, 0, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            { name: \"Odd Snare\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"pitch shift\", \"detune\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"pitchShiftSemitones\": 24, \"detuneCents\": 200, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 2.8284 }], \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 0.083, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 15, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"0.12×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"pitchShift\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n            { name: \"Otherworldly Kick\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"pitch shift\", \"vibrato\", \"distortion\", \"bitcrusher\", \"chorus\"], \"pitchShiftSemitones\": 12, \"vibrato\": \"custom\", \"vibratoDepth\": 0.92, \"vibratoDelay\": 18, \"vibratoSpeed\": 30, \"vibratoType\": 0, \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 57, \"panDelay\": 10, \"chorus\": 14, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 3\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n            { name: \"Bitcrushed Piano\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1.4142 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1.4142 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 1.4142 }], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"vibrato\": \"custom\", \"vibratoDepth\": 0.72, \"vibratoDelay\": 19, \"vibratoSpeed\": 30, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"bitcrusherOctave\": 3, \"bitcrusherQuantization\": 29, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 29, \"echoDelayBeats\": 0.75, \"reverb\": 23, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"wave\": \"triangle\", \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.000211, \"unisonOffset\": -0.3, \"unisonExpression\": 0.8, \"unisonSign\": 1, \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n            { name: \"Boop Pad\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }], \"effects\": [\"transition type\", \"note filter\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"panDelay\": 10, \"reverb\": 48, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"wave\": \"square\", \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.000211, \"unisonOffset\": -0.3, \"unisonExpression\": 0.8, \"unisonSign\": 1, \"customChipWave\": { \"0\": -1, \"1\": 1, \"2\": -1, \"3\": -4, \"4\": -6, \"5\": -8, \"6\": -11, \"7\": -12, \"8\": -15, \"9\": -16, \"10\": -18, \"11\": -19, \"12\": -21, \"13\": -22, \"14\": -24, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -23, \"19\": -22, \"20\": -21, \"21\": -19, \"22\": -17, \"23\": -16, \"24\": -14, \"25\": -13, \"26\": -10, \"27\": -8, \"28\": -6, \"29\": -4, \"30\": -2, \"31\": -1, \"32\": 2, \"33\": 3, \"34\": 5, \"35\": 7, \"36\": 10, \"37\": 12, \"38\": 14, \"39\": 16, \"40\": 18, \"41\": 19, \"42\": 20, \"43\": 21, \"44\": 23, \"45\": 23, \"46\": 24, \"47\": 24, \"48\": 24, \"49\": 24, \"50\": 24, \"51\": 24, \"52\": 24, \"53\": 24, \"54\": 24, \"55\": 24, \"56\": 24, \"57\": 24, \"58\": 23, \"59\": 22, \"60\": 21, \"61\": 19, \"62\": 16, \"63\": 14 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 2\", \"index\": 0 }] } },\n            { name: \"Spectrum Pad\", generalMidi: false, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"eqFilterType\": true, \"eqSimpleCut\": 6, \"eqSimplePeak\": 2, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"vibrato\", \"distortion\", \"bitcrusher\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"panDelay\": 10, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 57, 0, 43, 0, 43, 0, 0, 29, 0, 29, 0, 14, 14, 14, 0, 0], \"envelopes\": [] } },\n            { name: \"Countdown Pulse\", generalMidi: false, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"transition type\", \"pitch shift\", \"detune\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 16, \"detuneCents\": 196, \"panDelay\": 10, \"chorus\": 14, \"echoSustain\": 29, \"echoDelayBeats\": 0.5, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"pulseWidth\": 42, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n            { name: \"Ambient Pulse 1\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"echo\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 1.333, \"reverb\": 35, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"pulse width\", \"pulseWidth\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 0, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }] } },\n            { name: \"Saturn Pad\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.5 }], \"panDelay\": 10, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [0, 100, 100, 100, 0, 0, 0, 0, 43, 43, 0, 86, 0, 100, 0, 29, 0, 0, 0, 0, 71, 57, 0, 0, 86, 0, 0, 43], \"unison\": \"shimmer\", \"stringSustain\": 93, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo3\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"Build-Up Pad\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.3536 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"panDelay\": 10, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"pulse width\", \"pulseWidth\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 0, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }] } },\n            { name: \"Ambient Pulse 2\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 8 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 8 }], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 1 }], \"panDelay\": 10, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 72, \"harmonics\": [57, 57, 71, 57, 43, 43, 43, 71, 43, 43, 43, 57, 71, 86, 100, 86, 57, 57, 43, 43, 43, 57, 43, 29, 43, 57, 57, 43], \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.0018, \"unisonOffset\": 0, \"unisonExpression\": 0.85, \"unisonSign\": 1.6, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo5\" }] } },\n            { name: \"Hyper Synth Saw\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 19027.31, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 19027.31, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 1.4142 }], \"effects\": [\"chord type\", \"detune\", \"vibrato\", \"distortion\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"arpeggio\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 16, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"distortion\": 14, \"aliases\": false, \"panDelay\": 10, \"chorus\": 86, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 58, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"wave\": \"sawtooth\", \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.0018, \"unisonOffset\": 0, \"unisonExpression\": 0.85, \"unisonSign\": 1.6, \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [] } },\n            { name: \"Mechanical Blip\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.3536 }], \"effects\": [\"transition type\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"detuneCents\": 16, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 500, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 500, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"panDelay\": 10, \"chorus\": 43, \"echoSustain\": 57, \"echoDelayBeats\": 1.5, \"reverb\": 23, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"rounded\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 64, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [] } },\n            { name: \"Another Piano\", generalMidi: false, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }], \"effects\": [\"detune\", \"note filter\", \"reverb\"], \"detuneCents\": 16, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.125 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.125 }], \"panDelay\": 10, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 44, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }] } },\n        ]) },\n    { name: \"Midbox Dubstep Presets\", presets: toNameMap([\n            { name: \"Dubstep Bwayyyy\", generalMidi: false, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"vibrato\": \"custom\", \"vibratoDepth\": 0.44, \"vibratoDelay\": 23, \"vibratoSpeed\": 26, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"distortion\": 100, \"aliases\": false, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"pulseWidth\": 30, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"swell 3\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell 2\", \"index\": 0 }] } },\n            { name: \"Dubstep Bass Hum\", generalMidi: false, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 16000, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 16000, \"linearGain\": 2 }], \"effects\": [\"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.44, \"vibratoDelay\": 23, \"vibratoSpeed\": 26, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 11.3137 }], \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 2, \"bitcrusherQuantization\": 14, \"panDelay\": 10, \"chorus\": 43, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 10, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"flare 3\", \"index\": 0 }] } },\n            { name: \"Dubstep Yaa\", generalMidi: false, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.44, \"vibratoDelay\": 23, \"vibratoSpeed\": 26, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 29, \"panDelay\": 10, \"chorus\": 86, \"reverb\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 8, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"swell 1\", \"index\": 0 }] } },\n            { name: \"Dubstep Yeoww\", generalMidi: false, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"transition type\", \"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"vibrato\": \"custom\", \"vibratoDepth\": 0.44, \"vibratoDelay\": 23, \"vibratoSpeed\": 26, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 11.3137 }], \"distortion\": 100, \"aliases\": false, \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 0, \"panDelay\": 10, \"chorus\": 86, \"reverb\": 35, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 40, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 3\", \"index\": 0 }, { \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n            { name: \"Dubstep Lead\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"pitch shift\", \"note filter\", \"distortion\", \"bitcrusher\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2 }], \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 86, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n            { name: \"Dubstep Dyaii\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"slide\", \"clicklessTransition\": false, \"vibrato\": \"custom\", \"vibratoDepth\": 0.44, \"vibratoDelay\": 23, \"vibratoSpeed\": 26, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 11.3137 }], \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 3, \"bitcrusherQuantization\": 71, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [100, 0, 71, 86, 0, 0, 100, 86, 86, 71, 57, 57, 29, 14, 57, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 100, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"Dubstep Alarm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"pitch shift\", \"note filter\", \"distortion\", \"bitcrusher\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 11.3137 }], \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 100, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 0 }] } },\n        ]) },\n    { name: \"(compatable) AbyssBox Presets\", presets: toNameMap([\n            { name: \"Demonic Bell\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.0884 }], \"effects\": [\"detune\", \"distortion\", \"bitcrusher\", \"echo\", \"reverb\"], \"detuneCents\": -52, \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 29, \"panDelay\": 10, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 68, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"harmonics\": [43, 71, 71, 100, 86, 100, 43, 86, 71, 57, 86, 29, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 64, \"envelopes\": [] } },\n            { name: \"Spacey Triangle\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 4 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 4 }], \"effects\": [\"transition type\", \"vibrato\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 14, \"panDelay\": 10, \"chorus\": 86, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"wave\": \"triangle\", \"unison\": \"dirty\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [] } },\n            { name: \"Harmonic Piano\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }], \"effects\": [\"transition type\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [100, 57, 57, 57, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"Organic Synth\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"effects\": [\"chord type\", \"reverb\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"panDelay\": 10, \"reverb\": 71, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 96, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            { name: \"Nokia Ringtone\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"transition type\", \"chord type\"], \"transition\": \"interrupt\", \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }], \"envelopes\": [] } },\n            { name: \"Supersaw Pluck\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 9, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"eqSubFilters1\": [], \"effects\": [\"chord type\", \"note filter\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 7, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3828.43, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3828.43, \"linearGain\": 0.5 }], \"panDelay\": 10, \"chorus\": 14, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"pulseWidth\": 40, \"decimalOffset\": 0, \"dynamism\": 67, \"spread\": 50, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n            { name: \"Credits Bass\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"transition type\", \"chord type\", \"note filter\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 9, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"alto sax\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 2, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 1\" }] } },\n            { name: \"FM Violin\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"vibrato\", \"distortion\", \"chorus\", \"echo\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"distortion\": 43, \"aliases\": false, \"panDelay\": 10, \"chorus\": 14, \"echoSustain\": 14, \"echoDelayBeats\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"Custom\", \"feedbackType\": \"Custom\", \"feedbackAmplitude\": 4, \"customAlgorithm\": { \"mods\": [[6, 2, 3, 4, 5], [], [], [], [], []], \"carrierCount\": 2 }, \"customFeedback\": { \"mods\": [[1], [], [], [], [], []] }, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 12, \"waveform\": \"rounded\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang 3\" }, { \"target\": \"noteVolume\", \"envelope\": \"swell 2\" }] } },\n            { name: \"Shamisen 2\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 }], \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"Custom\", \"feedbackType\": \"Custom\", \"feedbackAmplitude\": 4, \"customAlgorithm\": { \"mods\": [[6, 2, 3, 4, 5], [], [], [], [], []], \"carrierCount\": 2 }, \"customFeedback\": { \"mods\": [[1], [], [], [], [], []] }, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 12, \"waveform\": \"rounded\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n            { name: \"Picked Dist Guitar\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\"], \"vibrato\": \"custom\", \"vibratoDepth\": 0.32, \"vibratoDelay\": 19, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 14, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [86, 86, 86, 86, 71, 57, 71, 71, 14, 14, 14, 29, 57, 43, 43, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 0, 71], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n            { name: \"Future Keys (no phaser)\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 1, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.25 }], \"effects\": [\"chorus\", \"echo\", \"reverb\", \"phaser\"], \"phaserMix\": 100, \"phaserFreq\": 94, \"phaserFeedback\": 42, \"phaserStages\": 97, \"panDelay\": 10, \"chorus\": 43, \"echoSustain\": 43, \"echoDelayBeats\": 0.75, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [100, 100, 100, 86, 86, 86, 71, 71, 57, 29, 14, 14, 14, 0, 29, 57, 29, 0, 29, 43, 57, 57, 29, 14, 14, 29, 43, 29], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang -1\" }] } },\n            { name: \"Light Bell\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"reverb\", \"ring modulation\"], \"ringMod\": 71, \"ringModHz\": 90, \"rmWaveformIndex\": 0, \"rmPulseWidth\": 0, \"panDelay\": 10, \"reverb\": 39, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 43], \"unison\": \"shimmer\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang 3\" }] } },\n            { name: \"Ghost House\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"vibrato\", \"bitcrusher\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"vibrato\": \"heavy\", \"vibratoDepth\": 0.45, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 3.5, \"bitcrusherQuantization\": 43, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n            { name: \"Chipwave Music Box\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\"], \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }], \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 14, \"panDelay\": 10, \"chorus\": 14, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": 24, \"1\": 24, \"2\": 24, \"3\": 23, \"4\": 23, \"5\": 22, \"6\": 21, \"7\": 19, \"8\": 17, \"9\": 14, \"10\": 11, \"11\": 7, \"12\": 3, \"13\": -1, \"14\": -5, \"15\": -8, \"16\": -10, \"17\": -12, \"18\": -14, \"19\": -16, \"20\": -17, \"21\": -18, \"22\": -19, \"23\": -20, \"24\": -21, \"25\": -22, \"26\": -23, \"27\": -23, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -23, \"37\": -23, \"38\": -22, \"39\": -21, \"40\": -20, \"41\": -19, \"42\": -18, \"43\": -17, \"44\": -16, \"45\": -14, \"46\": -12, \"47\": -10, \"48\": -8, \"49\": -5, \"50\": -1, \"51\": 3, \"52\": 7, \"53\": 11, \"54\": 14, \"55\": 17, \"56\": 19, \"57\": 21, \"58\": 22, \"59\": 23, \"60\": 23, \"61\": 24, \"62\": 24, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"decay 3\", \"index\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"decay 3\" }] } },\n        ]) },\n    {\n        name: \"Slarmoo's Box Presets\", presets: toNameMap([\n            { name: \"radio fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"effects\": [\"detune\", \"vibrato\", \"bitcrusher\", \"reverb\"], \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 43, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.12×\", \"amplitude\": 7, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 10, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"anguished underworld\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\", \"bitcrusher\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"reverb\": 0, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 6, \"algorithm\": \"1 2←4 3←(5 6)\", \"feedbackType\": \"1→5 2→6 3→4\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"0.25×\", \"amplitude\": 14, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.75×\", \"amplitude\": 3, \"waveform\": \"ramp\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"decay -1\", \"index\": 5 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"wibble 3\" }], \"isDrum\": false } },\n            { name: \"faint sorrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"detune\", \"vibrato\", \"echo\", \"reverb\"], \"detuneCents\": 22, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"echoSustain\": 100, \"echoDelayBeats\": 0.667, \"reverb\": 87, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 48, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"bright sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"chord type\", \"note filter\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 1.4142 }], \"echoSustain\": 71, \"echoDelayBeats\": 1.333, \"reverb\": 61, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"wet sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"decay 3\", \"index\": 2 }], \"isDrum\": false } },\n            { name: \"scream fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"effects\": [\"detune\", \"note filter\", \"distortion\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"distortion\": 0, \"aliases\": false, \"reverb\": 87, \"fadeInSeconds\": 0.135, \"fadeOutTicks\": -3, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 11, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"swell 1\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo4\" }], \"isDrum\": false } },\n            { name: \"anguished radio fm pad\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqSubFilters4\": [], \"effects\": [\"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"detuneCents\": -16, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters4\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 43, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 58, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1→3\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"juicy kick\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [], \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }], \"isDrum\": false } },\n            { name: \"good vibes supersaw\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 37, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": true, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"detune\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"chorus\": 14, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"pulseWidth\": 26, \"decimalOffset\": 0, \"dynamism\": 33, \"spread\": 33, \"shape\": 17, \"envelopes\": [{ \"target\": \"supersawShape\", \"envelope\": \"pitch\" }, { \"target\": \"detune\", \"envelope\": \"tremolo2\" }], \"isDrum\": false } },\n            { name: \"ethereal\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 4, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 36, \"vibrato\": \"custom\", \"vibratoDepth\": 0.12, \"vibratoDelay\": 36, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"chorus\": 71, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [43, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 57, 0, 43, 0, 43, 0, 0, 29, 0, 29, 0, 14, 14, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"detune\", \"envelope\": \"tremolo3\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n            { name: \"walrus wuh\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 71, \"chorus\": 86, \"reverb\": 32, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 48, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 50, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"decay 3\" }], \"isDrum\": false } },\n            { name: \"saturnic\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"vibrato\", \"chorus\", \"echo\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"chorus\": 100, \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"reverb\": 45, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"glassy harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"detune\", \"note filter\", \"chorus\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"chorus\": 14, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [100, 0, 43, 29, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 29, 14, 0, 14, 0, 0, 0, 0, 100, 0, 0, 14, 0], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"plucked\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"echoSustain\": 100, \"echoDelayBeats\": 1.333, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [100, 86, 57, 0, 0, 57, 57, 57, 86, 57, 57, 43, 43, 43, 29, 29, 14, 14, 29, 14, 14, 14, 29, 100, 57, 43, 14, 14], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"jungle bass\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"effects\": [\"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"chorus\": 14, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1↔2 3↔4\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 12, \"pitchEnvelopeEnd2\": 28, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"swell 3\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"pitch\", \"index\": 0 }], \"isDrum\": false } },\n            { name: \"beach tide\", generalMidi: false, isNoise: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"chord type\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"chorus\": 14, \"reverb\": 32, \"fadeInSeconds\": 0.0938, \"fadeOutTicks\": 72, \"harmonics\": [86, 86, 71, 57, 57, 43, 43, 43, 29, 29, 14, 14, 14, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n            { name: \"starlight\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"effects\": [\"transition type\", \"vibrato\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 29, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"distant monument\", generalMidi: false, isNoise: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"effects\": [\"transition type\", \"chord type\", \"detune\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 14, \"chorus\": 86, \"echoSustain\": 71, \"echoDelayBeats\": 1, \"reverb\": 35, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"wave\": \"modbox pnryshk a (u5)\", \"unison\": \"detune\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n            { name: \"mercurial\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [], \"effects\": [\"distortion\", \"chorus\"], \"distortion\": 43, \"aliases\": false, \"chorus\": 43, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"Custom\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 8, \"customAlgorithm\": { \"mods\": [[3], [5], [4], [], [6], []], \"carrierCount\": 2 }, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"linear\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"distortion\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 20, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"spectral phaser\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 10, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 14, \"chorus\": 100, \"echoSustain\": 86, \"echoDelayBeats\": 1, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"spectrum\": [86, 0, 0, 0, 57, 0, 0, 71, 0, 0, 0, 86, 0, 0, 57, 0, 43, 0, 43, 0, 0, 43, 0, 29, 0, 29, 14, 14, 29, 14], \"unison\": \"piano\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.07, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.06, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.05, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.04, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.09, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.08, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 5 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 6 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.03, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 7 }, { \"target\": \"distortion\", \"envelope\": \"none\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 0.3 }], \"isDrum\": false } },\n            { name: \"distant sorrow\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"detune\", \"vibrato\", \"note filter\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.2, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"echoSustain\": 100, \"echoDelayBeats\": 1, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [86, 71, 57, 43, 43, 29, 57, 0, 14, 0, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 57, 57, 57, 0, 57, 57, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"fall\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 2 }], \"isDrum\": false } },\n            { name: \"metallic kick\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 28, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"effects\": [], \"panDelay\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"128x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 3.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"chimes\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"effects\": [\"chord type\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 29, \"panDelay\": 0, \"chorus\": 29, \"echoSustain\": 86, \"echoDelayBeats\": 0.667, \"reverb\": 84, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [0, 100, 71, 71, 29, 0, 57, 86, 0, 0, 0, 0, 71, 29, 0, 0, 57, 0, 0, 86, 0, 0, 0, 100, 0, 100, 0, 57], \"unison\": \"none\", \"stringSustain\": 36, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 4.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"stringSustain\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1, \"steps\": 14, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }], \"isDrum\": false } },\n            { name: \"supersaw bass\", generalMidi: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"chorus\": 29, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 67, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"ascension\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqSubFilters1\": [], \"effects\": [\"granular\", \"chorus\", \"reverb\"], \"granular\": 7, \"grainSize\": 44, \"grainAmounts\": 9, \"grainRange\": 37, \"chorus\": 71, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"spectrum\": [43, 0, 0, 57, 0, 0, 14, 100, 29, 0, 0, 100, 29, 0, 100, 0, 57, 29, 86, 14, 14, 100, 14, 0, 14, 14, 0, 0, 43, 0], \"unison\": \"voiced\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 0.7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 6 }], \"isDrum\": false } },\n            { name: \"liminal\", generalMidi: false, isNoise: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"detune\", \"vibrato\", \"note filter\", \"granular\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"detuneCents\": 8, \"vibrato\": \"custom\", \"vibratoDepth\": 0.48, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"granular\": 6, \"grainSize\": 49, \"grainAmounts\": 10, \"grainRange\": 40, \"distortion\": 57, \"aliases\": false, \"bitcrusherOctave\": 5, \"bitcrusherQuantization\": 0, \"chorus\": 29, \"reverb\": 48, \"fadeInSeconds\": 0, \"fadeOutTicks\": 72, \"pulseWidth\": 30, \"decimalOffset\": 0, \"dynamism\": 17, \"spread\": 83, \"shape\": 67, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 17, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 1.3333, \"perEnvelopeLowerBound\": 0.1, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0.2, \"perEnvelopeUpperBound\": 1, \"discrete\": true, \"steps\": 8, \"seed\": 2, \"waveform\": 2 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 18, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"granular\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Chip Presets\", presets: toNameMap([\n            { name: \"Slarmoo's Pulse\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"chord type\", \"detune\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 24, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n            { name: \"discovery square\", midiProgram: 80, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"bitcrusher\"], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 57, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"octave\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 2, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"VRC6 Sawtooth alt\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"distortion\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"distortion\": 0, \"aliases\": false, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": -1, \"1\": -1, \"2\": -1, \"3\": -1, \"4\": -1, \"5\": -1, \"6\": -1, \"7\": -1, \"8\": -1, \"9\": -5, \"10\": -5, \"11\": -5, \"12\": -4, \"13\": -4, \"14\": -4, \"15\": -3, \"16\": -3, \"17\": -3, \"18\": -7, \"19\": -7, \"20\": -6, \"21\": -6, \"22\": -5, \"23\": -5, \"24\": -4, \"25\": -4, \"26\": -4, \"27\": -7, \"28\": -7, \"29\": -6, \"30\": -6, \"31\": -5, \"32\": -5, \"33\": -4, \"34\": -4, \"35\": -4, \"36\": -8, \"37\": -8, \"38\": -7, \"39\": -7, \"40\": -6, \"41\": -6, \"42\": -5, \"43\": -5, \"44\": -4, \"45\": -4, \"46\": 21, \"47\": 20, \"48\": 18, \"49\": 17, \"50\": 16, \"51\": 14, \"52\": 13, \"53\": 12, \"54\": 11, \"55\": 7, \"56\": 6, \"57\": 6, \"58\": 5, \"59\": 5, \"60\": 5, \"61\": 4, \"62\": 4, \"63\": 4 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"pulse arps\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 7, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"effects\": [\"transition type\", \"chord type\", \"detune\", \"chorus\", \"echo\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 64, \"chorus\": 43, \"echoSustain\": 71, \"echoDelayBeats\": 0.333, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }, { \"target\": \"pulseWidth\", \"envelope\": \"pitch\", \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 24, \"pitchEnvelopeEnd\": 83 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"waveform\": 0, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"chorus\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Instrumental Presets\", presets: toNameMap([\n            { name: \"rusty flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"effects\": [\"transition type\", \"detune\", \"distortion\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"detuneCents\": -7, \"distortion\": 14, \"aliases\": false, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"bitcrushed piano\", midiProgram: 4, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 0, \"distortion\": 29, \"aliases\": true, \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 43, \"panDelay\": 0, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"triangle\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": true, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0.6, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"detuned piano\", midiProgram: 3, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"effects\": [\"transition type\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 44, \"vibrato\": \"custom\", \"vibratoDepth\": 0.04, \"vibratoDelay\": 13, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 14, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [86, 86, 71, 71, 57, 57, 43, 29, 14, 29, 29, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 14, 14, 0, 0, 0], \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.26, \"unisonOffset\": 0, \"unisonExpression\": 1, \"unisonSign\": 1, \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 49, \"waveform\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1.6667, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"unison\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 20, \"waveform\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n            { name: \"pan flute 2\", midiProgram: 75, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 57, \"reverb\": 16, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -6, \"spectrum\": [100, 29, 14, 14, 57, 0, 0, 71, 0, 86, 57, 43, 57, 71, 14, 29, 14, 14, 14, 100, 71, 14, 14, 14, 14, 86, 43, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n            { name: \"trumpet 2\", midiProgram: 56, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3049.17, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"detune\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"detuneCents\": -64, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 17, \"vibratoSpeed\": 12, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"distortion\": 29, \"aliases\": false, \"chorus\": 14, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"0.75×\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 2 }, { \"frequency\": \"1×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"harp 2\", midiProgram: 46, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqSubFilters1\": [], \"effects\": [\"detune\", \"note filter\", \"echo\", \"reverb\"], \"detuneCents\": -23, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"echoSustain\": 29, \"echoDelayBeats\": 1.083, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←4 2←5 3←6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"detune\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"electric guitar 1\", midiProgram: 30, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [\"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"distortion\": 100, \"aliases\": false, \"panDelay\": 0, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 0, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.25×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"vibratoDepth\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 9, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"electric guitar 2\", midiProgram: 30, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"effects\": [\"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 22, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": true, \"perEnvelopeSpeed\": 2.25, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 0.9, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Novelty Presets\", presets: toNameMap([\n            { name: \"bitcrushed artifacts\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"distortion\", \"bitcrusher\", \"echo\"], \"distortion\": 71, \"aliases\": false, \"bitcrusherOctave\": 2, \"bitcrusherQuantization\": 86, \"echoSustain\": 0, \"echoDelayBeats\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 100, 43, 0, 0, 14, 86, 0, 14, 0, 0, 0, 0, 0, 86], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"whistle 2\", midiProgram: 78, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2110.37, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 6, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"pitch shift\", \"note filter\", \"distortion\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 11, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"distortion\": 43, \"aliases\": false, \"echoSustain\": 57, \"echoDelayBeats\": 1.083, \"reverb\": 87, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -1, \"harmonics\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 86, 57, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 57, 29, 0, 29, 100, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"decay 1\" }], \"isDrum\": false } },\n            { name: \"frog wuh\", generalMidi: false, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqSubFilters1\": [], \"effects\": [\"pitch shift\", \"note filter\"], \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"spectrum\": [100, 29, 14, 29, 0, 14, 0, 71, 0, 43, 14, 71, 0, 0, 71, 14, 100, 0, 71, 0, 43, 86, 43, 0, 43, 0, 0, 43, 29, 29], \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n            { name: \"stationary harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"effects\": [\"transition type\", \"chord type\", \"vibrato\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [100, 0, 57, 29, 14, 57, 29, 29, 14, 14, 29, 43, 14, 14, 14, 0, 14, 29, 29, 14, 0, 0, 14, 0, 0, 29, 14, 14], \"unison\": \"stationary\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"dead souls\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": true, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"effects\": [\"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"distortion\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"detuneCents\": -200, \"distortion\": 100, \"aliases\": false, \"chorus\": 14, \"reverb\": 35, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [100, 71, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 14, 14, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 24, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.2, \"steps\": 16, \"seed\": 37, \"waveform\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n            { name: \"flutter\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"effects\": [\"transition type\", \"chorus\", \"reverb\", \"ring mod\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"ringMod\": 100, \"ringModHz\": 100, \"ringModWaveformIndex\": 0, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"ringModulationHz\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 1.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.9 }, { \"target\": \"noteVolume\", \"envelope\": \"blip\", \"inverse\": false, \"perEnvelopeSpeed\": 0.25, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"vinyl\", generalMidi: false, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"effects\": [\"transition type\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 14, \"chorus\": 29, \"echoSustain\": 14, \"echoDelayBeats\": 0.083, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"wave\": \"crackling\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n        ])\n    },\n    { name: \"LemmBox Presets\", presets: toNameMap([\n            { name: \"HD triangle wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"lemmbox HD triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"HD sawtooth wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"lemmbox HD sawtooth\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"HD rounded wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"lemmbox HD rounded\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"trapasquare\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"lemmbox trapasquare\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"supersaw sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"reverb\"], \"vibrato\": \"custom\", \"vibratoDepth\": 0.08, \"vibratoDelay\": 20, \"vibratoSpeed\": 7, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"pan\": 0, \"panDelay\": 10, \"reverb\": 29, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 24, \"pulseWidth\": 16, \"decimalOffset\": 0, \"dynamism\": 83, \"spread\": 8, \"shape\": 33, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell -1\" }], \"isDrum\": false } },\n        ]) },\n    { name: \"Misc Modded Presets\", presets: toNameMap([\n            { name: \"nes white (UltraBox)\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [], \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } },\n            { name: \"nes ping (UltraBox)\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [], \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } },\n            { name: \"sandbox netsky hollow\", generalMidi: false, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45] } },\n            { name: \"sandbox tv static\", generalMidi: false, isNoise: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 40, \"filterEnvelope\": \"steady\", \"wave\": \"static\" } },\n            { name: \"Hollow Retro Riser (MidBox)\", isNoise: true, generalMidi: false, settings: { \"type\": \"noise\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 43, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 57, \"echoDelayBeats\": 0.5, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"hollow\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"Heavy Knock (AbyssBox)\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"vibrato\", \"note filter\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 7, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3828.43, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3828.43, \"linearGain\": 0.5 }], \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"wave\": \"white\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            { name: \"spectrum wind (Slarmoo's Box)\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"reverb\": 87, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"spectrum\": [29, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 14, 57, 14, 0, 57, 57, 0, 0, 57, 0, 71, 14, 29, 100, 71, 0, 100, 14, 86], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"hi-hat (Slarmoo's Box)\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters3\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"effects\": [], \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"white\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"air hiss (Slarmoo's Box)\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"distortion\": 71, \"aliases\": false, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": -24, \"spectrum\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 57, 71, 86, 100, 100, 100, 100, 86, 71, 71, 43], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"shaker (Slarmoo's Box)\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 43, \"chorus\": 43, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 96, \"wave\": \"deep\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 12, \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": true } },\n            { name: \"White Noise (VoxBox)\", isNoise: true, settings: { \"type\": \"noise\", \"volume\": -5, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"white\", \"envelopes\": [], \"isDrum\": true } },\n        ]) },\n    {\n        name: \"CoolTasDude's JukeBox Presets\", presets: toNameMap([\n            { name: \"electrodonk\", generalMidi: false, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"preset\": 1728, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"effects\": [\"panning\", \"chord type\", \"vibrato\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"pan\": -42, \"panDelay\": 0, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"pulseWidth\": 38, \"decimalOffset\": 0, \"unison\": \"inject\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 1.25, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 1.5, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 0, \"discrete\": false }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 0.9, \"discrete\": false, \"waveform\": 3, \"steps\": 2 }], \"isDrum\": false } },\n            { name: \"epic space chip\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 2, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 2.8284 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"chorus\", \"reverb\"], \"detuneCents\": 0, \"pan\": -30, \"panDelay\": 10, \"chorus\": 86, \"reverb\": 45, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 24, \"33\": 24, \"34\": 24, \"35\": 24, \"36\": 24, \"37\": 24, \"38\": 24, \"39\": 24, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 24, \"49\": 24, \"50\": 24, \"51\": 24, \"52\": 24, \"53\": 24, \"54\": 24, \"55\": 24, \"56\": 24, \"57\": 24, \"58\": 24, \"59\": 24, \"60\": 24, \"61\": 24, \"62\": 24, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [{ \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": true, \"perEnvelopeSpeed\": 0.6, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 0, \"steps\": 2 }], \"isDrum\": false } },\n            { name: \"deep bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1.4142 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"pitch shift\", \"distortion\"], \"pitchShiftSemitones\": 13, \"distortion\": 57, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -24, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare\", \"inverse\": true, \"perEnvelopeSpeed\": 7.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"pitchShift\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 1.3333, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"night triangle pulse 1\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"chorus\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"strumParts\": 1, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"unison\": \"none\", \"wave\": \"square\", \"customChipWave\": { \"0\": 16, \"1\": 17, \"2\": 17, \"3\": 17, \"4\": 17, \"5\": 17, \"6\": 17, \"7\": 12, \"8\": 11, \"9\": 9, \"10\": 8, \"11\": 7, \"12\": 5, \"13\": 3, \"14\": 1, \"15\": 0, \"16\": -1, \"17\": -3, \"18\": -5, \"19\": -6, \"20\": -7, \"21\": -9, \"22\": -10, \"23\": -12, \"24\": -13, \"25\": -14, \"26\": -15, \"27\": -16, \"28\": -16, \"29\": -16, \"30\": -16, \"31\": -16, \"32\": -16, \"33\": -16, \"34\": -16, \"35\": -16, \"36\": -16, \"37\": -15, \"38\": -13, \"39\": -12, \"40\": -11, \"41\": -9, \"42\": -7, \"43\": -6, \"44\": -4, \"45\": -3, \"46\": -2, \"47\": 0, \"48\": 1, \"49\": 3, \"50\": 4, \"51\": 6, \"52\": 7, \"53\": 8, \"54\": 9, \"55\": 11, \"56\": 13, \"57\": 14, \"58\": 16, \"59\": 16, \"60\": 16, \"61\": 16, \"62\": 16, \"63\": 16 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"night triangle pulse 2\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"chorus\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"strumParts\": 1, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 43, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"unison\": \"none\", \"wave\": \"square\", \"customChipWave\": { \"0\": 24, \"1\": 24, \"2\": 24, \"3\": 24, \"4\": 24, \"5\": 24, \"6\": 24, \"7\": 13, \"8\": 11, \"9\": 9, \"10\": 8, \"11\": 7, \"12\": 5, \"13\": 3, \"14\": 1, \"15\": 0, \"16\": -1, \"17\": -3, \"18\": -5, \"19\": -6, \"20\": -7, \"21\": -9, \"22\": -10, \"23\": -12, \"24\": -13, \"25\": -14, \"26\": -15, \"27\": -16, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": -16, \"37\": -15, \"38\": -13, \"39\": -12, \"40\": -11, \"41\": -9, \"42\": -7, \"43\": -6, \"44\": -4, \"45\": -3, \"46\": -2, \"47\": 0, \"48\": 1, \"49\": 3, \"50\": 4, \"51\": 6, \"52\": 7, \"53\": 8, \"54\": 9, \"55\": 11, \"56\": 13, \"57\": 14, \"58\": 24, \"59\": 24, \"60\": 24, \"61\": 24, \"62\": 24, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"neglected sawtooth\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"effects\": [\"panning\", \"transition type\", \"vibrato\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"custom\", \"vibratoDepth\": 0.12, \"vibratoDelay\": 8, \"vibratoSpeed\": 4, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 4.894, \"unisonOffset\": 3, \"unisonExpression\": 0.8, \"unisonSign\": 0.5, \"unisonBuzzes\": false, \"wave\": \"1/4 pulse\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -23, \"3\": -22, \"4\": -21, \"5\": -20, \"6\": -19, \"7\": -16, \"8\": -12, \"9\": -6, \"10\": -2, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": -23, \"26\": -20, \"27\": -14, \"28\": -9, \"29\": -5, \"30\": -5, \"31\": -2, \"32\": 16, \"33\": 16, \"34\": 16, \"35\": 16, \"36\": 4, \"37\": 4, \"38\": 4, \"39\": 4, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 6, \"52\": 4, \"53\": 1, \"54\": -2, \"55\": -4, \"56\": -7, \"57\": -11, \"58\": -13, \"59\": -13, \"60\": -13, \"61\": -14, \"62\": -14, \"63\": -13 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"FM hard bass\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 250, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 250, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"chord type\", \"pitch shift\", \"note filter\"], \"chord\": \"arpeggio\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"pitchShiftSemitones\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"pan\": 0, \"panDelay\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"0.75×\", \"amplitude\": 13, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 12, \"waveform\": \"pulse width\", \"pulseWidth\": 6 }, { \"frequency\": \"~2×\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 0, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"operatorAmplitude\", \"envelope\": \"linear\", \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"alien choir\", generalMidi: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 32, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 48, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 50, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"decay\", \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"FM Snare\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1.4142 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"pitch shift\", \"distortion\"], \"pitchShiftSemitones\": 24, \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←2←3←4←5←6\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 3.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pitchShift\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 13, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"linear\", \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0.1, \"perEnvelopeUpperBound\": 1.2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"subworld bass\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chorus\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 0, \"chorus\": 71, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"octave\", \"customChipWave\": { \"0\": -20, \"1\": -20, \"2\": -20, \"3\": -20, \"4\": -14, \"5\": -14, \"6\": -14, \"7\": -14, \"8\": -8, \"9\": -8, \"10\": -8, \"11\": -8, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 5, \"17\": 5, \"18\": 5, \"19\": 5, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": -4, \"25\": -4, \"26\": -4, \"27\": -4, \"28\": -4, \"29\": -4, \"30\": -4, \"31\": -4, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": -24, \"41\": -24, \"42\": -24, \"43\": -24, \"44\": -24, \"45\": -24, \"46\": -24, \"47\": -24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"hypersonic pluck\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 4 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 4 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"pitch shift\", \"distortion\", \"chorus\", \"reverb\"], \"pitchShiftSemitones\": 7, \"distortion\": 86, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 57, \"reverb\": 23, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"Custom\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 15, \"customAlgorithm\": { \"mods\": [[3], [4], [], [5], [], []], \"carrierCount\": 2 }, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 3.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pitchShift\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"linear\", \"inverse\": false, \"perEnvelopeSpeed\": 6, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0.1, \"perEnvelopeUpperBound\": 1.2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"operatorAmplitude\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 40, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 1 }], \"isDrum\": false } },\n            { name: \"otherworldly wub\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"vibrato\", \"note filter\", \"reverb\"], \"transition\": \"slide\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"vibrato\": \"heavy\", \"vibratoDepth\": 0.45, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"wave\": \"haileybox test1\", \"unison\": \"spinner\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 3, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 9, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"John Waveform\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1469.4, \"linearGain\": 1 }], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"chorus\"], \"pan\": 0, \"panDelay\": 0, \"chorus\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"algorithm\": \"1 2←5 (3 4)←6\", \"feedbackType\": \"1→2→3→4→5→6\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"0.75×\", \"amplitude\": 8, \"waveform\": \"ramp\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 11, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"waveform\": \"pulse width\", \"pulseWidth\": 3 }, { \"frequency\": \"2×\", \"amplitude\": 7, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 6, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"wibble\", \"inverse\": false, \"perEnvelopeSpeed\": 0.2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 5 }], \"isDrum\": false } },\n            { name: \"space saw narrow\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 0, \"chorus\": 29, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"wave\": \"zefbox saw narrow\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"space whisp\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"echo\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }], \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 0, \"echoSustain\": 57, \"echoDelayBeats\": 0.917, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"wave\": \"modbox curved sawtooth\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 4, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"linear\", \"inverse\": false, \"perEnvelopeSpeed\": 20, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"star strings\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }], \"effects\": [\"panning\", \"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.7071 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.1768 }], \"noteSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.1768 }], \"noteSubFilters3\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.1768 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 43, \"reverb\": 32, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 1, \"operators\": [{ \"frequency\": \"0.5×\", \"amplitude\": 15, \"waveform\": \"pulse width\", \"pulseWidth\": 0 }, { \"frequency\": \"0.75×\", \"amplitude\": 14, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 10, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"3.5×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 20, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"inverse\": false, \"perEnvelopeSpeed\": 0.4, \"perEnvelopeLowerBound\": 0.9, \"perEnvelopeUpperBound\": 1.3, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"vibrate pulse 1\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"pitch shift\"], \"pitchShiftSemitones\": 13, \"pan\": 0, \"panDelay\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"wave\": \"square\", \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 3.5, \"unisonOffset\": 7, \"unisonExpression\": 0.53, \"unisonSign\": 1, \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": 24, \"12\": 24, \"13\": 24, \"14\": 24, \"15\": 24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": 24, \"33\": 24, \"34\": 24, \"35\": 24, \"36\": 24, \"37\": 24, \"38\": 24, \"39\": 24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": -24, \"44\": -24, \"45\": -24, \"46\": -24, \"47\": -24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 40, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"vibrate pulse 2\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"vibrato\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"pan\": 0, \"panDelay\": 0, \"chorus\": 29, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"wave\": \"square\", \"unison\": \"vibrate\", \"customChipWave\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 24, \"12\": 24, \"13\": 24, \"14\": 24, \"15\": 24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 24, \"30\": 24, \"31\": 24, \"32\": 24, \"33\": 24, \"34\": 24, \"35\": 24, \"36\": 24, \"37\": 24, \"38\": 24, \"39\": 24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 24, \"52\": 24, \"53\": 24, \"54\": 24, \"55\": 24, \"56\": 24, \"57\": 24, \"58\": 24, \"59\": 24, \"60\": 24, \"61\": 24, \"62\": 24, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"mechanical guitar\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"algorithm\": \"Custom\", \"feedbackType\": \"Custom\", \"feedbackAmplitude\": 12, \"customAlgorithm\": { \"mods\": [[3, 4], [3], [5], [], [], []], \"carrierCount\": 3 }, \"customFeedback\": { \"mods\": [[], [4], [], [], [], []] }, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 14, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"3.5×\", \"amplitude\": 12, \"waveform\": \"quasi-sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"exosphere\", generalMidi: false, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4787.19, \"linearGain\": 1 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 2, \"envelopeSpeed\": 12, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.0884 }], \"distortion\": 86, \"aliases\": false, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 0, \"pan\": 0, \"panDelay\": 0, \"chorus\": 86, \"echoSustain\": 71, \"echoDelayBeats\": 0.75, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"fifth\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"activated pulse\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": -2, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"transition type\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 86, \"echoSustain\": 43, \"echoDelayBeats\": 0.583, \"reverb\": 23, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"double pulse\", \"unison\": \"none\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": 24, \"24\": 24, \"25\": 24, \"26\": 24, \"27\": 24, \"28\": 24, \"29\": 24, \"30\": 24, \"31\": 24, \"32\": 24, \"33\": 24, \"34\": 24, \"35\": 24, \"36\": 24, \"37\": 24, \"38\": 24, \"39\": 24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": 24, \"49\": 24, \"50\": 24, \"51\": 24, \"52\": 24, \"53\": 24, \"54\": 24, \"55\": 24, \"56\": 24, \"57\": 24, \"58\": 24, \"59\": 24, \"60\": 24, \"61\": 24, \"62\": 24, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"dramatic strums\", generalMidi: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"chord type\", \"detune\", \"note filter\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"detuneCents\": 24, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"echoSustain\": 86, \"echoDelayBeats\": 0.667, \"reverb\": 84, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 50, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }], \"isDrum\": false } },\n            { name: \"electric sand guitar\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 3, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.1768 }], \"effects\": [\"panning\", \"distortion\", \"bitcrusher\", \"reverb\"], \"distortion\": 71, \"aliases\": false, \"bitcrusherOctave\": 5, \"bitcrusherQuantization\": 0, \"pan\": 0, \"panDelay\": 0, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"0.5×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"15×\", \"amplitude\": 4, \"waveform\": \"pulse width\", \"pulseWidth\": 8 }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 5.5, \"perEnvelopeLowerBound\": 0.1, \"perEnvelopeUpperBound\": 0.9, \"discrete\": false, \"index\": 3 }], \"isDrum\": false } },\n            { name: \"flattened pulse\", generalMidi: false, settings: { \"type\": \"PWM\", \"volume\": 3, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2110.37, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 6, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"chorus\", \"reverb\"], \"pan\": 0, \"panDelay\": 0, \"chorus\": 57, \"reverb\": 35, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"pulseWidth\": 38, \"decimalOffset\": 0, \"unison\": \"detune\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"harmonic bass\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"transition\": \"slide\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }], \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 71, \"pan\": -38, \"panDelay\": 0, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"harmonics\": [86, 71, 100, 86, 57, 86, 100, 71, 86, 57, 86, 86, 71, 57, 57, 57, 43, 43, 43, 57, 57, 43, 43, 43, 29, 29, 29, 29], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"panning\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 0.5, \"discrete\": false, \"pitchEnvelopeStart\": 14, \"pitchEnvelopeEnd\": 36 }, { \"target\": \"panning\", \"envelope\": \"pitch\", \"inverse\": true, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"pitchEnvelopeStart\": 14, \"pitchEnvelopeEnd\": 36 }], \"isDrum\": false } },\n            { name: \"shell whistle\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 2 }], \"effects\": [\"panning\", \"chord type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"pitchShiftSemitones\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"pan\": 0, \"panDelay\": 0, \"chorus\": 86, \"reverb\": 3, \"fadeInSeconds\": 0.0938, \"fadeOutTicks\": 12, \"harmonics\": [71, 0, 0, 0, 43, 0, 14, 86, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 57, 0, 14], \"unison\": \"inject\", \"stringSustain\": 57, \"envelopes\": [{ \"target\": \"chorus\", \"envelope\": \"swell\", \"inverse\": true, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0.9, \"perEnvelopeUpperBound\": 1.1, \"discrete\": false }, { \"target\": \"none\", \"envelope\": \"none\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"blent chip\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 28, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"note filter\", \"chorus\", \"echo\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.0884 }], \"pan\": 0, \"panDelay\": 0, \"chorus\": 57, \"echoSustain\": 29, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"wave\": \"glitch\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 224, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"linear\", \"inverse\": false, \"perEnvelopeSpeed\": 0.04, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"burnt speaker\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"note filter\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.3536 }], \"pan\": 0, \"panDelay\": 0, \"fadeInSeconds\": 0.0938, \"fadeOutTicks\": 12, \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"0.25×\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 1, \"waveform\": \"pulse width\", \"pulseWidth\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 5.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 1.6667, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 2 }, { \"target\": \"operatorFrequency\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0.3, \"perEnvelopeUpperBound\": 0.6, \"discrete\": false, \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 4.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"slidey saw\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"pitch shift\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\"], \"pitchShiftSemitones\": 0, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 2 }], \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 0, \"chorus\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"harmonics\": [29, 14, 14, 14, 14, 14, 29, 14, 29, 29, 29, 57, 43, 57, 86, 100, 71, 14, 14, 29, 14, 14, 14, 0, 14, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"focused crystal\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": -11, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"vibrato\", \"note filter\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1.083, \"reverb\": 68, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n            { name: \"monument\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"distortion\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 86, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 35, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"wave\": \"modbox pnryshk a (u5)\", \"unison\": \"octave\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1.4, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 1.3, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"boosted synth kick\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"detune\"], \"detuneCents\": 0, \"pan\": 0, \"panDelay\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"6×\", \"amplitude\": 15, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 24, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"operatorFrequency\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 0 }], \"isDrum\": false } },\n            { name: \"electric gitrumpet 2\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1.4142 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"detuneCents\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 17, \"vibratoSpeed\": 12, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 0, \"chorus\": 43, \"reverb\": 13, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"0.75×\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 2 }, { \"frequency\": \"1×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare\", \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"operatorFrequency\", \"envelope\": \"decay\", \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"detune\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"decimated kick\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 500, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 500, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"pitch shift\", \"vibrato\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"pitchShiftSemitones\": 12, \"vibrato\": \"custom\", \"vibratoDepth\": 0.92, \"vibratoDelay\": 18, \"vibratoSpeed\": 30, \"vibratoType\": 0, \"distortion\": 29, \"aliases\": false, \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 57, \"pan\": 0, \"panDelay\": 10, \"chorus\": 0, \"echoSustain\": 43, \"echoDelayBeats\": 0.5, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pitchShift\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pitchShift\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"operatorFrequency\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 0 }], \"isDrum\": false } },\n            { name: \"epic vibes supersaw\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 125, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 125, \"linearGain\": 1.4142 }], \"effects\": [\"panning\", \"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 1, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4787.19, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4787.19, \"linearGain\": 1 }], \"distortion\": 71, \"aliases\": false, \"pan\": 0, \"panDelay\": 0, \"reverb\": 10, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -6, \"wave\": \"zefbox saw wide\", \"unison\": \"fifth\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"execute pulse\", generalMidi: false, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }], \"effects\": [\"panning\", \"detune\", \"note filter\", \"reverb\"], \"detuneCents\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.125 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.125 }], \"pan\": 0, \"panDelay\": 17, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"unison\": \"custom\", \"unisonVoices\": 1, \"unisonSpread\": 1, \"unisonOffset\": 1, \"unisonExpression\": 1.4, \"unisonSign\": -0.5, \"unisonBuzzes\": false, \"pulseWidth\": 44, \"decimalOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }, { \"target\": \"unison\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n            { name: \"execute lead\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 0, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"vibrato\", \"note filter\", \"chorus\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 9, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": 72, \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0, \"unisonOffset\": 0, \"unisonExpression\": 1, \"unisonSign\": 1, \"unisonBuzzes\": false, \"wave\": \"modbox pnryshk a (u5)\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }], \"isDrum\": false } },\n            { name: \"execute whisp\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"vibrato\", \"note filter\", \"chorus\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 9, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"fadeInSeconds\": 0.1575, \"fadeOutTicks\": 96, \"unison\": \"custom\", \"unisonVoices\": 1, \"unisonSpread\": 0, \"unisonOffset\": 0, \"unisonExpression\": 1, \"unisonSign\": 1, \"unisonBuzzes\": false, \"wave\": \"zefbox pulse\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 9, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }], \"isDrum\": false } },\n            { name: \"static guitar\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\"], \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 2 }], \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"harmonics\": [29, 14, 14, 14, 14, 14, 29, 14, 29, 29, 29, 57, 43, 57, 86, 100, 71, 14, 14, 29, 14, 14, 14, 0, 14, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"JukeBox Guest Presets\", presets: toNameMap([\n            { name: \"enhanced supersaw - Perriot\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": -13, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"note filter\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 10, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 3, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"none\", \"envelope\": \"none\" }], \"isDrum\": false } },\n            { name: \"unnamed string - Perriot\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": -10, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1.4142 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1.4142 }], \"distortion\": 14, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"harmonics\": [71, 86, 86, 86, 71, 71, 57, 43, 43, 43, 43, 43, 71, 71, 71, 71, 71, 71, 71, 71, 57, 43, 43, 43, 43, 43, 43, 29], \"unison\": \"none\", \"stringSustain\": 50, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"heavenly choir - Perriot\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"chorus\", \"reverb\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 61, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 96, \"harmonics\": [71, 86, 86, 71, 71, 71, 43, 43, 43, 43, 29, 29, 29, 29, 43, 43, 43, 14, 43, 43, 43, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"fifth\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"hollow shaft - Perriot\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": -8, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 29, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 4, \"unisonOffset\": 4, \"unisonExpression\": 1, \"unisonSign\": 1, \"unisonBuzzes\": false, \"spectrum\": [57, 0, 14, 57, 57, 0, 29, 29, 71, 0, 14, 0, 14, 43, 71, 0, 29, 0, 29, 57, 0, 29, 29, 29, 0, 0, 0, 14, 14, 0], \"envelopes\": [{ \"target\": \"chorus\", \"envelope\": \"swell 1\" }, { \"target\": \"chorus\", \"envelope\": \"swell 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"swell -1\" }], \"isDrum\": false } },\n            { name: \"expired glass - Perriot\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": -9, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 2.8284 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 4 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 2.8284 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 4 }], \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -24, \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"100×\", \"amplitude\": 4, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"0.12×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"hardware kick - Mathiew\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 0, \"pan\": 2, \"panDelay\": 0, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"pulse width\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"50×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"none\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"bit wobble - LemonLime\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 4, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 17, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 1.5, \"reverb\": 29, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 24, \"wave\": \"lemmbox trapasquare\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 512, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang 3\" }], \"isDrum\": false } },\n            { name: \"muffled pulse - LemonLime\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": -7, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"transition type\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\"], \"transition\": \"slide\", \"clicklessTransition\": false, \"vibrato\": \"custom\", \"vibratoDepth\": 0.2, \"vibratoDelay\": 19, \"vibratoSpeed\": 4, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"distortion\": 29, \"aliases\": true, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 0, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": 24, \"25\": 24, \"26\": 24, \"27\": 24, \"28\": 24, \"29\": 24, \"30\": 24, \"31\": 24, \"32\": 24, \"33\": 24, \"34\": 24, \"35\": 24, \"36\": 24, \"37\": 24, \"38\": 24, \"39\": 24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": 24, \"49\": 24, \"50\": 24, \"51\": 24, \"52\": 24, \"53\": 24, \"54\": 24, \"55\": 24, \"56\": 24, \"57\": 24, \"58\": 24, \"59\": 24, \"60\": 24, \"61\": 24, \"62\": 24, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [{ \"target\": \"none\", \"envelope\": \"swell -1\" }], \"isDrum\": false } },\n            { name: \"cave oo - LemonLime\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": -6, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1.4142 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 57, \"echoDelayBeats\": 1.5, \"reverb\": 6, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 24, \"algorithm\": \"1←2←3←4←5←6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang 3\" }], \"isDrum\": false } },\n            { name: \"summoning bell - LemonLime\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": -15, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"detune\", \"vibrato\", \"chorus\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"strumParts\": 1, \"detuneCents\": -40, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"harmonics\": [100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"void 1 - LemonLime\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": -23, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 125, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 125, \"linearGain\": 2 }], \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\", \"echo\", \"reverb\"], \"vibrato\": \"custom\", \"vibratoDepth\": 0.28, \"vibratoDelay\": 19, \"vibratoSpeed\": 2, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1.4142 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1.4142 }], \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 0, \"chorus\": 14, \"echoSustain\": 57, \"echoDelayBeats\": 1.5, \"reverb\": 58, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"algorithm\": \"1 2 3 (4 5)←6\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"0.5×\", \"amplitude\": 6, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.12×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.25×\", \"amplitude\": 6, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 5 }], \"isDrum\": false } },\n            { name: \"void 2 - LemonLime\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"vibrato\", \"reverb\"], \"vibrato\": \"custom\", \"vibratoDepth\": 0.32, \"vibratoDelay\": 19, \"vibratoSpeed\": 3, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"reverb\": 58, \"fadeInSeconds\": 0.1575, \"fadeOutTicks\": 24, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"swell 1\" }], \"isDrum\": false } },\n            { name: \"mellow triangle - LemonLime\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": -5, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"chord type\", \"detune\", \"vibrato\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": -40, \"vibrato\": \"custom\", \"vibratoDepth\": 0.28, \"vibratoDelay\": 6, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 29, \"echoDelayBeats\": 0.25, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"unison\": \"none\", \"wave\": \"square\", \"customChipWave\": { \"0\": -1, \"1\": -1, \"2\": -4, \"3\": -4, \"4\": -8, \"5\": -8, \"6\": -11, \"7\": -11, \"8\": -14, \"9\": -14, \"10\": -17, \"11\": -17, \"12\": -20, \"13\": -20, \"14\": -24, \"15\": -24, \"16\": -23, \"17\": -23, \"18\": -20, \"19\": -20, \"20\": -17, \"21\": -17, \"22\": -14, \"23\": -14, \"24\": -11, \"25\": -11, \"26\": -7, \"27\": -7, \"28\": -4, \"29\": -4, \"30\": -1, \"31\": -1, \"32\": 2, \"33\": 2, \"34\": 5, \"35\": 5, \"36\": 8, \"37\": 8, \"38\": 12, \"39\": 12, \"40\": 15, \"41\": 15, \"42\": 18, \"43\": 18, \"44\": 21, \"45\": 21, \"46\": 24, \"47\": 24, \"48\": 24, \"49\": 24, \"50\": 21, \"51\": 21, \"52\": 18, \"53\": 18, \"54\": 15, \"55\": 15, \"56\": 12, \"57\": 12, \"58\": 8, \"59\": 8, \"60\": 5, \"61\": 5, \"62\": 2, \"63\": 2 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"jello kick - LemonLime\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"pan\": 0, \"panDelay\": 0, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"1←(2 3 4 5 6)\", \"feedbackType\": \"1→4 2→5 3→6\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"0.12×\", \"amplitude\": 15, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 8, \"waveform\": \"pulse width\", \"pulseWidth\": 6 }, { \"frequency\": \"0.75×\", \"amplitude\": 9, \"waveform\": \"pulse width\", \"pulseWidth\": 6 }, { \"frequency\": \"7×\", \"amplitude\": 3, \"waveform\": \"ramp\", \"pulseWidth\": 5 }, { \"frequency\": \"0.75×\", \"amplitude\": 11, \"waveform\": \"quasi-sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"wibble 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"wibble 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"linear-1\", \"index\": 3 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell -1\", \"index\": 4 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 5 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }], \"isDrum\": false } },\n            { name: \"soggy frog - cach1rul0\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"pitch shift\", \"note filter\", \"echo\", \"reverb\"], \"pitchShiftSemitones\": 13, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.7071 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 14, \"echoDelayBeats\": 0.833, \"reverb\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [100, 100, 100, 86, 86, 71, 57, 57, 43, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"flare 1\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }], \"isDrum\": false } },\n            { name: \"doomsday bass - cach1rul0\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 10, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"chord type\", \"pitch shift\", \"detune\", \"note filter\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [], \"echoSustain\": 0, \"echoDelayBeats\": 1, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }], \"isDrum\": false } },\n            { name: \"sawtooth chirp - cach1rul0\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 5, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 19027.31, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 19027.31, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 1.4142 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.12, \"vibratoDelay\": 0, \"vibratoSpeed\": 28, \"vibratoType\": 1, \"pan\": 0, \"panDelay\": 10, \"chorus\": 0, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"sawtooth\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"sonic-ish lead - cach1ru10\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 14, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"detuneCents\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"distortion\": 0, \"aliases\": true, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 10, \"chorus\": 0, \"echoSustain\": 43, \"echoDelayBeats\": 0.667, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"wave\": \"triangle\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": true, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"sonic bass - cach1ru10\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": 10, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"distortion\": 0, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"1←3←4 2←5←6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 1\" }, { \"target\": \"none\", \"envelope\": \"twang 3\" }], \"isDrum\": false } },\n            { name: \"coolsaw - Hexefe\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 5, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [], \"effects\": [\"transition type\", \"vibrato\", \"chorus\", \"echo\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"chorus\": 71, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"sawtooth\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n        ])\n    }\n]);\n//# sourceMappingURL=EditorConfig.js.map","export function scaleElementsByFactor(array, factor) {\n    for (let i = 0; i < array.length; i++) {\n        array[i] *= factor;\n    }\n}\nfunction isPowerOf2(n) {\n    return !!n && !(n & (n - 1));\n}\nfunction countBits(n) {\n    if (!isPowerOf2(n))\n        throw new Error(\"FFT array length must be a power of 2.\");\n    return Math.round(Math.log(n) / Math.log(2));\n}\nfunction reverseIndexBits(array, fullArrayLength) {\n    const bitCount = countBits(fullArrayLength);\n    if (bitCount > 16)\n        throw new Error(\"FFT array length must not be greater than 2^16.\");\n    const finalShift = 16 - bitCount;\n    for (let i = 0; i < fullArrayLength; i++) {\n        let j;\n        j = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n        j = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n        j = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n        j = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\n        if (j > i) {\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n}\nexport function discreteFourierTransform(realArray, imagArray) {\n    const fullArrayLength = realArray.length;\n    if (fullArrayLength != imagArray.length)\n        throw new Error(\"FFT arrays must be the same length.\");\n    const realOut = [];\n    const imagOut = [];\n    for (let i = 0; i < fullArrayLength; i++) {\n        realOut[i] = 0.0;\n        imagOut[i] = 0.0;\n        for (let j = 0; j < fullArrayLength; j++) {\n            const radians = -6.2831853 * j * i / fullArrayLength;\n            const c = Math.cos(radians);\n            const s = Math.sin(radians);\n            realOut[i] += realArray[j] * c - imagArray[j] * s;\n            imagOut[i] += realArray[j] * s + imagArray[j] * c;\n        }\n    }\n    return [realOut, imagOut];\n}\nexport function fastFourierTransform(realArray, imagArray) {\n    const fullArrayLength = realArray.length;\n    if (!isPowerOf2(fullArrayLength))\n        throw new Error(\"FFT array length must be a power of 2.\");\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    if (fullArrayLength != imagArray.length)\n        throw new Error(\"FFT arrays must be the same length.\");\n    reverseIndexBits(realArray, fullArrayLength);\n    reverseIndexBits(imagArray, fullArrayLength);\n    for (let startIndex = 0; startIndex < fullArrayLength; startIndex += 4) {\n        const startIndex1 = startIndex + 1;\n        const startIndex2 = startIndex + 2;\n        const startIndex3 = startIndex + 3;\n        const real0 = realArray[startIndex];\n        const real1 = realArray[startIndex1];\n        const real2 = realArray[startIndex2];\n        const real3 = realArray[startIndex3];\n        const imag0 = imagArray[startIndex];\n        const imag1 = imagArray[startIndex1];\n        const imag2 = imagArray[startIndex2];\n        const imag3 = imagArray[startIndex3];\n        const realTemp0 = real0 + real1;\n        const realTemp1 = real0 - real1;\n        const realTemp2 = real2 + real3;\n        const realTemp3 = real2 - real3;\n        const imagTemp0 = imag0 + imag1;\n        const imagTemp1 = imag0 - imag1;\n        const imagTemp2 = imag2 + imag3;\n        const imagTemp3 = imag2 - imag3;\n        realArray[startIndex] = realTemp0 + realTemp2;\n        realArray[startIndex1] = realTemp1 + imagTemp3;\n        realArray[startIndex2] = realTemp0 - realTemp2;\n        realArray[startIndex3] = realTemp1 - imagTemp3;\n        imagArray[startIndex] = imagTemp0 + imagTemp2;\n        imagArray[startIndex1] = imagTemp1 - realTemp3;\n        imagArray[startIndex2] = imagTemp0 - imagTemp2;\n        imagArray[startIndex3] = imagTemp1 + realTemp3;\n    }\n    for (let stride = 8; stride <= fullArrayLength; stride += stride) {\n        const halfLength = stride >>> 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            let c = 1.0;\n            let s = 0.0;\n            let cPrev = cosIncrement;\n            let sPrev = sinIncrement;\n            const secondHalf = startIndex + halfLength;\n            for (let i = startIndex; i < secondHalf; i++) {\n                const j = i + halfLength;\n                const real0 = realArray[i];\n                const imag0 = imagArray[i];\n                const real1 = realArray[j] * c - imagArray[j] * s;\n                const imag1 = realArray[j] * s + imagArray[j] * c;\n                realArray[i] = real0 + real1;\n                imagArray[i] = imag0 + imag1;\n                realArray[j] = real0 - real1;\n                imagArray[j] = imag0 - imag1;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n}\nexport function forwardRealFourierTransform(array) {\n    const fullArrayLength = array.length;\n    const totalPasses = countBits(fullArrayLength);\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    reverseIndexBits(array, fullArrayLength);\n    for (let index = 0; index < fullArrayLength; index += 4) {\n        const index1 = index + 1;\n        const index2 = index + 2;\n        const index3 = index + 3;\n        const real0 = array[index];\n        const real1 = array[index1];\n        const real2 = array[index2];\n        const real3 = array[index3];\n        const tempA = real0 + real1;\n        const tempB = real2 + real3;\n        array[index] = tempA + tempB;\n        array[index1] = real0 - real1;\n        array[index2] = tempA - tempB;\n        array[index3] = real2 - real3;\n    }\n    const sqrt2over2 = Math.sqrt(2.0) / 2.0;\n    for (let index = 0; index < fullArrayLength; index += 8) {\n        const index1 = index + 1;\n        const index3 = index + 3;\n        const index4 = index + 4;\n        const index5 = index + 5;\n        const index7 = index + 7;\n        const real0 = array[index];\n        const real1 = array[index1];\n        const imag3 = array[index3];\n        const real4 = array[index4];\n        const real5 = array[index5];\n        const imag7 = array[index7];\n        const tempA = (real5 - imag7) * sqrt2over2;\n        const tempB = (real5 + imag7) * sqrt2over2;\n        array[index] = real0 + real4;\n        array[index1] = real1 + tempA;\n        array[index3] = real1 - tempA;\n        array[index4] = real0 - real4;\n        array[index5] = tempB - imag3;\n        array[index7] = tempB + imag3;\n    }\n    for (let pass = 3; pass < totalPasses; pass++) {\n        const subStride = 1 << pass;\n        const midSubStride = subStride >> 1;\n        const stride = subStride << 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            const startIndexA = startIndex;\n            const startIndexB = startIndexA + subStride;\n            const stopIndex = startIndexB + subStride;\n            const realStartA = array[startIndexA];\n            const realStartB = array[startIndexB];\n            array[startIndexA] = realStartA + realStartB;\n            array[startIndexB] = realStartA - realStartB;\n            let c = cosIncrement;\n            let s = -sinIncrement;\n            let cPrev = 1.0;\n            let sPrev = 0.0;\n            for (let index = 1; index < midSubStride; index++) {\n                const indexA0 = startIndexA + index;\n                const indexA1 = startIndexB - index;\n                const indexB0 = startIndexB + index;\n                const indexB1 = stopIndex - index;\n                const real0 = array[indexA0];\n                const imag0 = array[indexA1];\n                const real1 = array[indexB0];\n                const imag1 = array[indexB1];\n                const tempA = real1 * c + imag1 * s;\n                const tempB = real1 * s - imag1 * c;\n                array[indexA0] = real0 + tempA;\n                array[indexA1] = real0 - tempA;\n                array[indexB0] = -imag0 - tempB;\n                array[indexB1] = imag0 - tempB;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n}\nexport function inverseRealFourierTransform(array, fullArrayLength) {\n    const totalPasses = countBits(fullArrayLength);\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    for (let pass = totalPasses - 1; pass >= 2; pass--) {\n        const subStride = 1 << pass;\n        const midSubStride = subStride >> 1;\n        const stride = subStride << 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            const startIndexA = startIndex;\n            const midIndexA = startIndexA + midSubStride;\n            const startIndexB = startIndexA + subStride;\n            const midIndexB = startIndexB + midSubStride;\n            const stopIndex = startIndexB + subStride;\n            const realStartA = array[startIndexA];\n            const imagStartB = array[startIndexB];\n            array[startIndexA] = realStartA + imagStartB;\n            array[midIndexA] *= 2;\n            array[startIndexB] = realStartA - imagStartB;\n            array[midIndexB] *= 2;\n            let c = cosIncrement;\n            let s = -sinIncrement;\n            let cPrev = 1.0;\n            let sPrev = 0.0;\n            for (let index = 1; index < midSubStride; index++) {\n                const indexA0 = startIndexA + index;\n                const indexA1 = startIndexB - index;\n                const indexB0 = startIndexB + index;\n                const indexB1 = stopIndex - index;\n                const real0 = array[indexA0];\n                const real1 = array[indexA1];\n                const imag0 = array[indexB0];\n                const imag1 = array[indexB1];\n                const tempA = real0 - real1;\n                const tempB = imag0 + imag1;\n                array[indexA0] = real0 + real1;\n                array[indexA1] = imag1 - imag0;\n                array[indexB0] = tempA * c - tempB * s;\n                array[indexB1] = tempB * c + tempA * s;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n    for (let index = 0; index < fullArrayLength; index += 4) {\n        const index1 = index + 1;\n        const index2 = index + 2;\n        const index3 = index + 3;\n        const real0 = array[index];\n        const real1 = array[index1] * 2;\n        const imag2 = array[index2];\n        const imag3 = array[index3] * 2;\n        const tempA = real0 + imag2;\n        const tempB = real0 - imag2;\n        array[index] = tempA + real1;\n        array[index1] = tempA - real1;\n        array[index2] = tempB + imag3;\n        array[index3] = tempB - imag3;\n    }\n    reverseIndexBits(array, fullArrayLength);\n}\n//# sourceMappingURL=FFT.js.map","export class Deque {\n    constructor() {\n        this._capacity = 1;\n        this._buffer = [undefined];\n        this._mask = 0;\n        this._offset = 0;\n        this._count = 0;\n    }\n    pushFront(element) {\n        if (this._count >= this._capacity)\n            this._expandCapacity();\n        this._offset = (this._offset - 1) & this._mask;\n        this._buffer[this._offset] = element;\n        this._count++;\n    }\n    pushBack(element) {\n        if (this._count >= this._capacity)\n            this._expandCapacity();\n        this._buffer[(this._offset + this._count) & this._mask] = element;\n        this._count++;\n    }\n    popFront() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        const element = this._buffer[this._offset];\n        this._buffer[this._offset] = undefined;\n        this._offset = (this._offset + 1) & this._mask;\n        this._count--;\n        return element;\n    }\n    popBack() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        this._count--;\n        const index = (this._offset + this._count) & this._mask;\n        const element = this._buffer[index];\n        this._buffer[index] = undefined;\n        return element;\n    }\n    peakFront() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        return this._buffer[this._offset];\n    }\n    peakBack() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        return this._buffer[(this._offset + this._count - 1) & this._mask];\n    }\n    count() {\n        return this._count;\n    }\n    set(index, element) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        this._buffer[(this._offset + index) & this._mask] = element;\n    }\n    get(index) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        return this._buffer[(this._offset + index) & this._mask];\n    }\n    remove(index) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        if (index <= (this._count >> 1)) {\n            while (index > 0) {\n                this.set(index, this.get(index - 1));\n                index--;\n            }\n            this.popFront();\n        }\n        else {\n            index++;\n            while (index < this._count) {\n                this.set(index - 1, this.get(index));\n                index++;\n            }\n            this.popBack();\n        }\n    }\n    _expandCapacity() {\n        if (this._capacity >= 0x40000000)\n            throw new Error(\"Capacity too big.\");\n        this._capacity = this._capacity << 1;\n        const oldBuffer = this._buffer;\n        const newBuffer = new Array(this._capacity);\n        const size = this._count | 0;\n        const offset = this._offset | 0;\n        for (let i = 0; i < size; i++) {\n            newBuffer[i] = oldBuffer[(offset + i) & this._mask];\n        }\n        for (let i = size; i < this._capacity; i++) {\n            newBuffer[i] = undefined;\n        }\n        this._offset = 0;\n        this._buffer = newBuffer;\n        this._mask = this._capacity - 1;\n    }\n}\n//# sourceMappingURL=Deque.js.map","class EventManager {\n    constructor() {\n        this.activeEvents = [];\n        this.listeners = {};\n        this.activeEvents = [];\n        this.listeners = {};\n    }\n    raise(eventType, eventData, extraEventData) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.activeEvents.push(eventType);\n        for (let i = 0; i < this.listeners[eventType].length; i++) {\n            this.listeners[eventType][i](eventData, extraEventData);\n        }\n        this.activeEvents.pop();\n    }\n    listen(eventType, callback) {\n        if (this.listeners[eventType] == undefined) {\n            this.listeners[eventType] = [];\n        }\n        this.listeners[eventType].push(callback);\n    }\n    unlisten(eventType, callback) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        const lisen = this.listeners[eventType].indexOf(callback);\n        if (lisen != -1) {\n            this.listeners[eventType].splice(lisen, 1);\n        }\n    }\n    unlistenAll(eventType) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.listeners[eventType] = [];\n    }\n}\nexport const events = new EventManager();\n//# sourceMappingURL=Events.js.map","export class FilterCoefficients {\n    constructor() {\n        this.a = [1.0];\n        this.b = [1.0];\n        this.order = 0;\n    }\n    linearGain0thOrder(linearGain) {\n        this.b[0] = linearGain;\n        this.order = 0;\n    }\n    lowPass1stOrderButterworth(cornerRadiansPerSample) {\n        const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n        const a0 = 1.0 + g;\n        this.a[1] = (1.0 - g) / a0;\n        this.b[1] = this.b[0] = 1 / a0;\n        this.order = 1;\n    }\n    lowPass1stOrderSimplified(cornerRadiansPerSample) {\n        const g = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n        this.a[1] = g - 1.0;\n        this.b[0] = g;\n        this.b[1] = 0.0;\n        this.order = 1;\n    }\n    highPass1stOrderButterworth(cornerRadiansPerSample) {\n        const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n        const a0 = 1.0 + g;\n        this.a[1] = (1.0 - g) / a0;\n        this.b[0] = g / a0;\n        this.b[1] = -g / a0;\n        this.order = 1;\n    }\n    highShelf1stOrder(cornerRadiansPerSample, shelfLinearGain) {\n        const tan = Math.tan(cornerRadiansPerSample * 0.5);\n        const sqrtGain = Math.sqrt(shelfLinearGain);\n        const g = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n        const a0 = 1.0;\n        this.a[1] = g / a0;\n        this.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n        this.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n        this.order = 1;\n    }\n    allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample) {\n        const g = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n        this.a[1] = g;\n        this.b[0] = g;\n        this.b[1] = 1.0;\n        this.order = 1;\n    }\n    allPass1stOrderFractionalDelay(delay) {\n        const g = (1.0 - delay) / (1.0 + delay);\n        this.a[1] = g;\n        this.b[0] = g;\n        this.b[1] = 1.0;\n        this.order = 1;\n    }\n    lowPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {\n        const alpha = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n        const cos = Math.cos(cornerRadiansPerSample);\n        const a0 = 1.0 + alpha;\n        this.a[1] = -2.0 * cos / a0;\n        this.a[2] = (1 - alpha) / a0;\n        this.b[2] = this.b[0] = (1 - cos) / (2.0 * a0);\n        this.b[1] = (1 - cos) / a0;\n        this.order = 2;\n    }\n    lowPass2ndOrderSimplified(cornerRadiansPerSample, peakLinearGain) {\n        const g = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n        const filterResonance = 1.0 - 1.0 / (2.0 * peakLinearGain);\n        const feedback = filterResonance + filterResonance / (1.0 - g);\n        this.a[1] = 2.0 * g + (g - 1.0) * g * feedback - 2.0;\n        this.a[2] = (g - 1.0) * (g - g * feedback - 1.0);\n        this.b[0] = g * g;\n        this.b[1] = 0;\n        this.b[2] = 0;\n        this.order = 2;\n    }\n    highPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {\n        const alpha = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n        const cos = Math.cos(cornerRadiansPerSample);\n        const a0 = 1.0 + alpha;\n        this.a[1] = -2.0 * cos / a0;\n        this.a[2] = (1.0 - alpha) / a0;\n        this.b[2] = this.b[0] = (1.0 + cos) / (2.0 * a0);\n        this.b[1] = -(1.0 + cos) / a0;\n        this.order = 2;\n    }\n    highShelf2ndOrder(cornerRadiansPerSample, shelfLinearGain, slope) {\n        const A = Math.sqrt(shelfLinearGain);\n        const c = Math.cos(cornerRadiansPerSample);\n        const Aplus = A + 1.0;\n        const Aminus = A - 1.0;\n        const alpha = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\n        const sqrtA2Alpha = 2.0 * Math.sqrt(A) * alpha;\n        const a0 = (Aplus - Aminus * c + sqrtA2Alpha);\n        this.a[1] = 2 * (Aminus - Aplus * c) / a0;\n        this.a[2] = (Aplus - Aminus * c - sqrtA2Alpha) / a0;\n        this.b[0] = A * (Aplus + Aminus * c + sqrtA2Alpha) / a0;\n        this.b[1] = -2 * A * (Aminus + Aplus * c) / a0;\n        this.b[2] = A * (Aplus + Aminus * c - sqrtA2Alpha) / a0;\n        this.order = 2;\n    }\n    peak2ndOrder(cornerRadiansPerSample, peakLinearGain, bandWidthScale) {\n        const sqrtGain = Math.sqrt(peakLinearGain);\n        const bandWidth = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1 / sqrtGain);\n        const alpha = Math.tan(bandWidth * 0.5);\n        const a0 = 1.0 + alpha / sqrtGain;\n        this.b[0] = (1.0 + alpha * sqrtGain) / a0;\n        this.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n        this.b[2] = (1.0 - alpha * sqrtGain) / a0;\n        this.a[2] = (1.0 - alpha / sqrtGain) / a0;\n        this.order = 2;\n    }\n}\nexport class FrequencyResponse {\n    constructor() {\n        this.real = 0.0;\n        this.imag = 0.0;\n        this.denom = 1.0;\n    }\n    analyze(filter, radiansPerSample) {\n        this.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n    }\n    analyzeComplex(filter, real, imag) {\n        const a = filter.a;\n        const b = filter.b;\n        const realZ1 = real;\n        const imagZ1 = -imag;\n        let realNum = b[0] + b[1] * realZ1;\n        let imagNum = b[1] * imagZ1;\n        let realDenom = 1.0 + a[1] * realZ1;\n        let imagDenom = a[1] * imagZ1;\n        let realZ = realZ1;\n        let imagZ = imagZ1;\n        for (let i = 2; i <= filter.order; i++) {\n            const realTemp = realZ * realZ1 - imagZ * imagZ1;\n            const imagTemp = realZ * imagZ1 + imagZ * realZ1;\n            realZ = realTemp;\n            imagZ = imagTemp;\n            realNum += b[i] * realZ;\n            imagNum += b[i] * imagZ;\n            realDenom += a[i] * realZ;\n            imagDenom += a[i] * imagZ;\n        }\n        this.denom = realDenom * realDenom + imagDenom * imagDenom;\n        this.real = realNum * realDenom + imagNum * imagDenom;\n        this.imag = imagNum * realDenom - realNum * imagDenom;\n    }\n    magnitude() {\n        return Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n    }\n    angle() {\n        return Math.atan2(this.imag, this.real);\n    }\n}\nexport class DynamicBiquadFilter {\n    constructor() {\n        this.a1 = 0.0;\n        this.a2 = 0.0;\n        this.b0 = 1.0;\n        this.b1 = 0.0;\n        this.b2 = 0.0;\n        this.a1Delta = 0.0;\n        this.a2Delta = 0.0;\n        this.b0Delta = 0.0;\n        this.b1Delta = 0.0;\n        this.b2Delta = 0.0;\n        this.output1 = 0.0;\n        this.output2 = 0.0;\n        this.useMultiplicativeInputCoefficients = false;\n    }\n    resetOutput() {\n        this.output1 = 0.0;\n        this.output2 = 0.0;\n    }\n    loadCoefficientsWithGradient(start, end, deltaRate, useMultiplicativeInputCoefficients) {\n        if (start.order != 2 || end.order != 2)\n            throw new Error();\n        this.a1 = start.a[1];\n        this.a2 = start.a[2];\n        this.b0 = start.b[0];\n        this.b1 = start.b[1];\n        this.b2 = start.b[2];\n        this.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n        this.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n        if (useMultiplicativeInputCoefficients) {\n            this.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n            this.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n            this.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n        }\n        else {\n            this.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n            this.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n            this.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n        }\n        this.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n    }\n}\nexport function warpNyquistToInfinity(radians) {\n    return 2.0 * Math.tan(radians * 0.5);\n}\nexport function warpInfinityToNyquist(radians) {\n    return 2.0 * Math.atan(radians * 0.5);\n}\n//# sourceMappingURL=filtering.js.map","const PRIME32_1 = 2654435761;\nconst PRIME32_2 = 2246822519;\nconst PRIME32_3 = 3266489917;\nconst PRIME32_4 = 668265263;\nconst PRIME32_5 = 374761393;\nlet encoder;\n/**\n *\n * @param input - byte array or string\n * @param seed - optional seed (32-bit unsigned);\n */\nexport function xxHash32(input, seed = 0) {\n    const buffer = typeof input === 'string' ? (encoder ??= new TextEncoder()).encode(input) : input;\n    const b = buffer;\n    /*\n        Step 1. Initialize internal accumulators\n        Each accumulator gets an initial value based on optional seed input. Since the seed is optional, it can be 0.\n\n        ```\n            u32 acc1 = seed + PRIME32_1 + PRIME32_2;\n            u32 acc2 = seed + PRIME32_2;\n            u32 acc3 = seed + 0;\n            u32 acc4 = seed - PRIME32_1;\n        ```\n        Special case : input is less than 16 bytes\n        When input is too small (< 16 bytes), the algorithm will not process any stripe. Consequently, it will not\n        make use of parallel accumulators.\n\n        In which case, a simplified initialization is performed, using a single accumulator :\n\n        u32 acc  = seed + PRIME32_5;\n        The algorithm then proceeds directly to step 4.\n    */\n    let acc = (seed + PRIME32_5) & 0xffffffff;\n    let offset = 0;\n    if (b.length >= 16) {\n        const accN = [\n            (seed + PRIME32_1 + PRIME32_2) & 0xffffffff,\n            (seed + PRIME32_2) & 0xffffffff,\n            (seed + 0) & 0xffffffff,\n            (seed - PRIME32_1) & 0xffffffff,\n        ];\n        /*\n            Step 2. Process stripes\n            A stripe is a contiguous segment of 16 bytes. It is evenly divided into 4 lanes, of 4 bytes each.\n            The first lane is used to update accumulator 1, the second lane is used to update accumulator 2, and so on.\n\n            Each lane read its associated 32-bit value using little-endian convention.\n\n            For each {lane, accumulator}, the update process is called a round, and applies the following formula :\n\n            ```\n            accN = accN + (laneN * PRIME32_2);\n            accN = accN <<< 13;\n            accN = accN * PRIME32_1;\n            ```\n\n            This shuffles the bits so that any bit from input lane impacts several bits in output accumulator.\n            All operations are performed modulo 2^32.\n\n            Input is consumed one full stripe at a time. Step 2 is looped as many times as necessary to consume\n            the whole input, except the last remaining bytes which cannot form a stripe (< 16 bytes). When that\n            happens, move to step 3.\n        */\n        const b = buffer;\n        const limit = b.length - 16;\n        let lane = 0;\n        for (offset = 0; (offset & 0xfffffff0) <= limit; offset += 4) {\n            const i = offset;\n            const laneN0 = b[i + 0] + (b[i + 1] << 8);\n            const laneN1 = b[i + 2] + (b[i + 3] << 8);\n            const laneNP = laneN0 * PRIME32_2 + ((laneN1 * PRIME32_2) << 16);\n            let acc = (accN[lane] + laneNP) & 0xffffffff;\n            acc = (acc << 13) | (acc >>> 19);\n            const acc0 = acc & 0xffff;\n            const acc1 = acc >>> 16;\n            accN[lane] = (acc0 * PRIME32_1 + ((acc1 * PRIME32_1) << 16)) & 0xffffffff;\n            lane = (lane + 1) & 0x3;\n        }\n        /*\n            Step 3. Accumulator convergence\n            All 4 lane accumulators from previous steps are merged to produce a single remaining accumulator\n            of same width (32-bit). The associated formula is as follows :\n\n            ```\n            acc = (acc1 <<< 1) + (acc2 <<< 7) + (acc3 <<< 12) + (acc4 <<< 18);\n            ```\n        */\n        acc =\n            (((accN[0] << 1) | (accN[0] >>> 31)) +\n                ((accN[1] << 7) | (accN[1] >>> 25)) +\n                ((accN[2] << 12) | (accN[2] >>> 20)) +\n                ((accN[3] << 18) | (accN[3] >>> 14))) &\n                0xffffffff;\n    }\n    /*\n        Step 4. Add input length\n        The input total length is presumed known at this stage. This step is just about adding the length to\n        accumulator, so that it participates to final mixing.\n\n        ```\n        acc = acc + (u32)inputLength;\n        ```\n    */\n    acc = (acc + buffer.length) & 0xffffffff;\n    /*\n        Step 5. Consume remaining input\n        There may be up to 15 bytes remaining to consume from the input. The final stage will digest them according\n        to following pseudo-code :\n        ```\n        while (remainingLength >= 4) {\n            lane = read_32bit_little_endian(input_ptr);\n            acc = acc + lane * PRIME32_3;\n            acc = (acc <<< 17) * PRIME32_4;\n            input_ptr += 4; remainingLength -= 4;\n        }\n        ```\n        This process ensures that all input bytes are present in the final mix.\n    */\n    const limit = buffer.length - 4;\n    for (; offset <= limit; offset += 4) {\n        const i = offset;\n        const laneN0 = b[i + 0] + (b[i + 1] << 8);\n        const laneN1 = b[i + 2] + (b[i + 3] << 8);\n        const laneP = laneN0 * PRIME32_3 + ((laneN1 * PRIME32_3) << 16);\n        acc = (acc + laneP) & 0xffffffff;\n        acc = (acc << 17) | (acc >>> 15);\n        acc = ((acc & 0xffff) * PRIME32_4 + (((acc >>> 16) * PRIME32_4) << 16)) & 0xffffffff;\n    }\n    /*\n        ```\n        while (remainingLength >= 1) {\n            lane = read_byte(input_ptr);\n            acc = acc + lane * PRIME32_5;\n            acc = (acc <<< 11) * PRIME32_1;\n            input_ptr += 1; remainingLength -= 1;\n        }\n        ```\n    */\n    for (; offset < b.length; ++offset) {\n        const lane = b[offset];\n        acc = acc + lane * PRIME32_5;\n        acc = (acc << 11) | (acc >>> 21);\n        acc = ((acc & 0xffff) * PRIME32_1 + (((acc >>> 16) * PRIME32_1) << 16)) & 0xffffffff;\n    }\n    /*\n        Step 6. Final mix (avalanche)\n        The final mix ensures that all input bits have a chance to impact any bit in the output digest,\n        resulting in an unbiased distribution. This is also called avalanche effect.\n        ```\n        acc = acc xor (acc >> 15);\n        acc = acc * PRIME32_2;\n        acc = acc xor (acc >> 13);\n        acc = acc * PRIME32_3;\n        acc = acc xor (acc >> 16);\n        ```\n    */\n    acc = acc ^ (acc >>> 15);\n    acc = (((acc & 0xffff) * PRIME32_2) & 0xffffffff) + (((acc >>> 16) * PRIME32_2) << 16);\n    acc = acc ^ (acc >>> 13);\n    acc = (((acc & 0xffff) * PRIME32_3) & 0xffffffff) + (((acc >>> 16) * PRIME32_3) << 16);\n    acc = acc ^ (acc >>> 16);\n    // turn any negatives back into a positive number;\n    return acc < 0 ? acc + 4294967296 : acc;\n}\n//# sourceMappingURL=xxHash32.js.map","import { startLoadingSample, sampleLoadingState, sampleLoadEvents, SampleLoadedEvent, loadBuiltInSamples, toNameMap, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegralOld, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, effectsIncludeRingModulation, effectsIncludeGranular, calculateRingModHertz } from \"./SynthConfig\";\nimport { EditorConfig } from \"../editor/EditorConfig\";\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\nimport { Deque } from \"./Deque\";\nimport { events } from \"../global/Events\";\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter, warpInfinityToNyquist } from \"./filtering\";\nimport { xxHash32 } from \"js-xxhash\";\nconst epsilon = (1.0e-24);\nexport function clamp(min, max, val) {\n    max = max - 1;\n    if (val <= max) {\n        if (val >= min)\n            return val;\n        else\n            return min;\n    }\n    else {\n        return max;\n    }\n}\nfunction validateRange(min, max, val) {\n    if (min <= val && val <= max)\n        return val;\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\nexport function parseFloatWithDefault(s, defaultValue) {\n    let result = parseFloat(s);\n    if (Number.isNaN(result))\n        result = defaultValue;\n    return result;\n}\nexport function parseIntWithDefault(s, defaultValue) {\n    let result = parseInt(s);\n    if (Number.isNaN(result))\n        result = defaultValue;\n    return result;\n}\nfunction encode32BitNumber(buffer, x) {\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\n}\nfunction decode32BitNumber(compressed, charIndex) {\n    let x = 0;\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\n    return x;\n}\nfunction encodeUnisonSettings(buffer, v, s, o, e, i) {\n    buffer.push(base64IntToCharCode[v]);\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\n    let cleanS = Math.round(Math.abs(s) * 1000);\n    let cleanSDivided = Math.floor(cleanS / 63);\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\n    let cleanO = Math.round(Math.abs(o) * 1000);\n    let cleanODivided = Math.floor(cleanO / 63);\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\n    buffer.push(base64IntToCharCode[Number((e > 0))]);\n    let cleanE = Math.round(Math.abs(e) * 1000);\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\n    let cleanI = Math.round(Math.abs(i) * 1000);\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\n}\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex) {\n    let key = clamp(0, Config.keys.length, rawKeyIndex);\n    let octave = 0;\n    if (rawKeyIndex === 12) {\n        key = 0;\n        octave = 1;\n    }\n    else if (rawKeyIndex === 13) {\n        key = 6;\n        octave = -1;\n    }\n    else if (rawKeyIndex === 14) {\n        key = 0;\n        octave = -1;\n    }\n    else if (rawKeyIndex === 15) {\n        key = 5;\n        octave = -1;\n    }\n    return [key, octave];\n}\nconst base64IntToCharCode = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\nconst base64CharCodeToInt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0];\nclass BitFieldReader {\n    constructor(source, startIndex, stopIndex) {\n        this._bits = [];\n        this._readIndex = 0;\n        for (let i = startIndex; i < stopIndex; i++) {\n            const value = base64CharCodeToInt[source.charCodeAt(i)];\n            this._bits.push((value >> 5) & 0x1);\n            this._bits.push((value >> 4) & 0x1);\n            this._bits.push((value >> 3) & 0x1);\n            this._bits.push((value >> 2) & 0x1);\n            this._bits.push((value >> 1) & 0x1);\n            this._bits.push(value & 0x1);\n        }\n    }\n    read(bitCount) {\n        let result = 0;\n        while (bitCount > 0) {\n            result = result << 1;\n            result += this._bits[this._readIndex++];\n            bitCount--;\n        }\n        return result;\n    }\n    readLongTail(minValue, minBits) {\n        let result = minValue;\n        let numBits = minBits;\n        while (this._bits[this._readIndex++]) {\n            result += 1 << numBits;\n            numBits++;\n        }\n        while (numBits > 0) {\n            numBits--;\n            if (this._bits[this._readIndex++]) {\n                result += 1 << numBits;\n            }\n        }\n        return result;\n    }\n    readPartDuration() {\n        return this.readLongTail(1, 3);\n    }\n    readLegacyPartDuration() {\n        return this.readLongTail(1, 2);\n    }\n    readPinCount() {\n        return this.readLongTail(1, 0);\n    }\n    readPitchInterval() {\n        if (this.read(1)) {\n            return -this.readLongTail(1, 3);\n        }\n        else {\n            return this.readLongTail(1, 3);\n        }\n    }\n}\nclass BitFieldWriter {\n    constructor() {\n        this._index = 0;\n        this._bits = [];\n    }\n    clear() {\n        this._index = 0;\n    }\n    write(bitCount, value) {\n        bitCount--;\n        while (bitCount >= 0) {\n            this._bits[this._index++] = (value >>> bitCount) & 1;\n            bitCount--;\n        }\n    }\n    writeLongTail(minValue, minBits, value) {\n        if (value < minValue)\n            throw new Error(\"value out of bounds\");\n        value -= minValue;\n        let numBits = minBits;\n        while (value >= (1 << numBits)) {\n            this._bits[this._index++] = 1;\n            value -= 1 << numBits;\n            numBits++;\n        }\n        this._bits[this._index++] = 0;\n        while (numBits > 0) {\n            numBits--;\n            this._bits[this._index++] = (value >>> numBits) & 1;\n        }\n    }\n    writePartDuration(value) {\n        this.writeLongTail(1, 3, value);\n    }\n    writePinCount(value) {\n        this.writeLongTail(1, 0, value);\n    }\n    writePitchInterval(value) {\n        if (value < 0) {\n            this.write(1, 1);\n            this.writeLongTail(1, 3, -value);\n        }\n        else {\n            this.write(1, 0);\n            this.writeLongTail(1, 3, value);\n        }\n    }\n    concat(other) {\n        for (let i = 0; i < other._index; i++) {\n            this._bits[this._index++] = other._bits[i];\n        }\n    }\n    encodeBase64(buffer) {\n        for (let i = 0; i < this._index; i += 6) {\n            const value = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\n            buffer.push(base64IntToCharCode[value]);\n        }\n        return buffer;\n    }\n    lengthBase64() {\n        return Math.ceil(this._index / 6);\n    }\n}\nexport function makeNotePin(interval, time, size) {\n    return { interval: interval, time: time, size: size };\n}\nexport class Note {\n    constructor(pitch, start, end, size, fadeout = false) {\n        this.pitches = [pitch];\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n        this.start = start;\n        this.end = end;\n        this.continuesLastPattern = false;\n    }\n    pickMainInterval() {\n        let longestFlatIntervalDuration = 0;\n        let mainInterval = 0;\n        for (let pinIndex = 1; pinIndex < this.pins.length; pinIndex++) {\n            const pinA = this.pins[pinIndex - 1];\n            const pinB = this.pins[pinIndex];\n            if (pinA.interval == pinB.interval) {\n                const duration = pinB.time - pinA.time;\n                if (longestFlatIntervalDuration < duration) {\n                    longestFlatIntervalDuration = duration;\n                    mainInterval = pinA.interval;\n                }\n            }\n        }\n        if (longestFlatIntervalDuration == 0) {\n            let loudestSize = 0;\n            for (let pinIndex = 0; pinIndex < this.pins.length; pinIndex++) {\n                const pin = this.pins[pinIndex];\n                if (loudestSize < pin.size) {\n                    loudestSize = pin.size;\n                    mainInterval = pin.interval;\n                }\n            }\n        }\n        return mainInterval;\n    }\n    clone() {\n        const newNote = new Note(-1, this.start, this.end, 3);\n        newNote.pitches = this.pitches.concat();\n        newNote.pins = [];\n        for (const pin of this.pins) {\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n        }\n        newNote.continuesLastPattern = this.continuesLastPattern;\n        return newNote;\n    }\n    getEndPinIndex(part) {\n        let endPinIndex;\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n            if (this.pins[endPinIndex].time + this.start > part)\n                break;\n        }\n        return endPinIndex;\n    }\n}\nexport class Pattern {\n    constructor() {\n        this.notes = [];\n        this.instruments = [0];\n    }\n    cloneNotes() {\n        const result = [];\n        for (const note of this.notes) {\n            result.push(note.clone());\n        }\n        return result;\n    }\n    reset() {\n        this.notes.length = 0;\n        this.instruments[0] = 0;\n        this.instruments.length = 1;\n    }\n    toJsonObject(song, channel, isModChannel) {\n        const noteArray = [];\n        for (const note of this.notes) {\n            let instrument = channel.instruments[this.instruments[0]];\n            let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);\n            let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n            const pointArray = [];\n            for (const pin of note.pins) {\n                let useVol = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\n                pointArray.push({\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\n                    \"pitchBend\": pin.interval,\n                    \"volume\": useVol,\n                    \"forMod\": isModChannel,\n                });\n            }\n            const noteObject = {\n                \"pitches\": note.pitches,\n                \"points\": pointArray,\n            };\n            if (note.start == 0) {\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n            }\n            noteArray.push(noteObject);\n        }\n        const patternObject = { \"notes\": noteArray };\n        if (song.patternInstruments) {\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\n        }\n        return patternObject;\n    }\n    fromJsonObject(patternObject, song, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, jsonFormat = \"auto\") {\n        const format = jsonFormat.toLowerCase();\n        if (song.patternInstruments) {\n            if (Array.isArray(patternObject[\"instruments\"])) {\n                const instruments = patternObject[\"instruments\"];\n                const instrumentCount = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n                for (let j = 0; j < instrumentCount; j++) {\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n                }\n                this.instruments.length = instrumentCount;\n            }\n            else {\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n                this.instruments.length = 1;\n            }\n        }\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n            const maxNoteCount = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\n            for (let j = 0; j < patternObject[\"notes\"].length; j++) {\n                if (j >= maxNoteCount)\n                    break;\n                const noteObject = patternObject[\"notes\"][j];\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n                    continue;\n                }\n                const note = new Note(0, 0, 0, 0);\n                note.pitches = [];\n                note.pins = [];\n                for (let k = 0; k < noteObject[\"pitches\"].length; k++) {\n                    const pitch = noteObject[\"pitches\"][k] | 0;\n                    if (note.pitches.indexOf(pitch) != -1)\n                        continue;\n                    note.pitches.push(pitch);\n                    if (note.pitches.length >= Config.maxChordSize)\n                        break;\n                }\n                if (note.pitches.length < 1)\n                    continue;\n                let startInterval = 0;\n                let instrument = channel.instruments[this.instruments[0]];\n                let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);\n                for (let k = 0; k < noteObject[\"points\"].length; k++) {\n                    const pointObject = noteObject[\"points\"][k];\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined)\n                        continue;\n                    const interval = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n                    const time = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n                    let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n                    let size;\n                    if (pointObject[\"volume\"] == undefined) {\n                        size = volumeCap;\n                    }\n                    else if (pointObject[\"forMod\"] == undefined) {\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    else {\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    if (time > song.beatsPerBar * Config.partsPerBeat)\n                        continue;\n                    if (note.pins.length == 0) {\n                        note.start = time;\n                        startInterval = interval;\n                    }\n                    else {\n                    }\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n                }\n                if (note.pins.length < 2)\n                    continue;\n                note.end = note.pins[note.pins.length - 1].time + note.start;\n                const maxPitch = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\n                let lowestPitch = maxPitch;\n                let highestPitch = 0;\n                for (let k = 0; k < note.pitches.length; k++) {\n                    note.pitches[k] += startInterval;\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n                        note.pitches.splice(k, 1);\n                        k--;\n                    }\n                    if (note.pitches[k] < lowestPitch)\n                        lowestPitch = note.pitches[k];\n                    if (note.pitches[k] > highestPitch)\n                        highestPitch = note.pitches[k];\n                }\n                if (note.pitches.length < 1)\n                    continue;\n                for (let k = 0; k < note.pins.length; k++) {\n                    const pin = note.pins[k];\n                    if (pin.interval + lowestPitch < 0)\n                        pin.interval = -lowestPitch;\n                    if (pin.interval + highestPitch > maxPitch)\n                        pin.interval = maxPitch - highestPitch;\n                    if (k >= 2) {\n                        if (pin.interval == note.pins[k - 1].interval &&\n                            pin.interval == note.pins[k - 2].interval &&\n                            pin.size == note.pins[k - 1].size &&\n                            pin.size == note.pins[k - 2].size) {\n                            note.pins.splice(k - 1, 1);\n                            k--;\n                        }\n                    }\n                }\n                if (note.start == 0) {\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n                }\n                else {\n                    note.continuesLastPattern = false;\n                }\n                if ((format != \"ultrabox\" && format != \"slarmoosbox\") && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                    for (const pin of note.pins) {\n                        const oldMin = 30;\n                        const newMin = 1;\n                        const old = pin.size + oldMin;\n                        pin.size = old - newMin;\n                    }\n                }\n                this.notes.push(note);\n            }\n        }\n    }\n}\nexport class Operator {\n    constructor(index) {\n        this.frequency = 4;\n        this.amplitude = 0;\n        this.waveform = 0;\n        this.pulseWidth = 0.5;\n        this.reset(index);\n    }\n    reset(index) {\n        this.frequency = 4;\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n        this.waveform = 0;\n        this.pulseWidth = 5;\n    }\n    copy(other) {\n        this.frequency = other.frequency;\n        this.amplitude = other.amplitude;\n        this.waveform = other.waveform;\n        this.pulseWidth = other.pulseWidth;\n    }\n}\nexport class CustomAlgorithm {\n    constructor() {\n        this.name = \"\";\n        this.carrierCount = 0;\n        this.modulatedBy = [[], [], [], [], [], []];\n        this.associatedCarrier = [];\n        this.fromPreset(1);\n    }\n    set(carriers, modulation) {\n        this.reset();\n        this.carrierCount = carriers;\n        for (let i = 0; i < this.modulatedBy.length; i++) {\n            this.modulatedBy[i] = modulation[i];\n            if (i < carriers) {\n                this.associatedCarrier[i] = i + 1;\n            }\n            this.name += (i + 1);\n            for (let j = 0; j < modulation[i].length; j++) {\n                this.name += modulation[i][j];\n                if (modulation[i][j] > carriers - 1) {\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\n                }\n                this.name += \",\";\n            }\n            if (i < carriers) {\n                this.name += \"|\";\n            }\n            else {\n                this.name += \".\";\n            }\n        }\n    }\n    reset() {\n        this.name = \"\";\n        this.carrierCount = 1;\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\n    }\n    copy(other) {\n        this.name = other.name;\n        this.carrierCount = other.carrierCount;\n        this.modulatedBy = other.modulatedBy;\n        this.associatedCarrier = other.associatedCarrier;\n    }\n    fromPreset(other) {\n        this.reset();\n        let preset = Config.algorithms6Op[other];\n        this.name = preset.name;\n        this.carrierCount = preset.carrierCount;\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\n        }\n    }\n}\nexport class CustomFeedBack {\n    constructor() {\n        this.name = \"\";\n        this.indices = [[], [], [], [], [], []];\n        this.fromPreset(1);\n    }\n    set(inIndices) {\n        this.reset();\n        for (let i = 0; i < this.indices.length; i++) {\n            this.indices[i] = inIndices[i];\n            for (let j = 0; j < inIndices[i].length; j++) {\n                this.name += inIndices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n    reset() {\n        this.reset;\n        this.name = \"\";\n        this.indices = [[1], [], [], [], [], []];\n    }\n    copy(other) {\n        this.name = other.name;\n        this.indices = other.indices;\n    }\n    fromPreset(other) {\n        this.reset();\n        let preset = Config.feedbacks6Op[other];\n        for (var i = 0; i < preset.indices.length; i++) {\n            this.indices[i] = Array.from(preset.indices[i]);\n            for (let j = 0; j < preset.indices[i].length; j++) {\n                this.name += preset.indices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n}\nexport class SpectrumWave {\n    constructor(isNoiseChannel) {\n        this.spectrum = [];\n        this.hash = -1;\n        this.reset(isNoiseChannel);\n    }\n    reset(isNoiseChannel) {\n        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n            if (isNoiseChannel) {\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n            }\n            else {\n                const isHarmonic = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n            }\n        }\n        this.markCustomWaveDirty();\n    }\n    markCustomWaveDirty() {\n        const hashMult = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\n        let hash = 0;\n        for (const point of this.spectrum)\n            hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\nclass SpectrumWaveState {\n    constructor() {\n        this.wave = null;\n        this._hash = -1;\n    }\n    getCustomWave(settings, lowestOctave) {\n        if (this._hash == settings.hash)\n            return this.wave;\n        this._hash = settings.hash;\n        const waveLength = Config.spectrumNoiseLength;\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave = this.wave;\n        for (let i = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n        const highestOctave = 14;\n        const falloffRatio = 0.25;\n        const pitchTweak = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\n        function controlPointToOctave(point) {\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n        }\n        let combinedAmplitude = 1;\n        for (let i = 0; i < Config.spectrumControlPoints + 1; i++) {\n            const value1 = (i <= 0) ? 0 : settings.spectrum[i - 1];\n            const value2 = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\n            const octave1 = controlPointToOctave(i - 1);\n            let octave2 = controlPointToOctave(i);\n            if (i >= Config.spectrumControlPoints)\n                octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n            if (value1 == 0 && value2 == 0)\n                continue;\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n        }\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n        }\n        inverseRealFourierTransform(wave, waveLength);\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n        wave[waveLength] = wave[0];\n        return wave;\n    }\n}\nexport class HarmonicsWave {\n    constructor() {\n        this.harmonics = [];\n        this.hash = -1;\n        this.reset();\n    }\n    reset() {\n        for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n            this.harmonics[i] = 0;\n        }\n        this.harmonics[0] = Config.harmonicsMax;\n        this.harmonics[3] = Config.harmonicsMax;\n        this.harmonics[6] = Config.harmonicsMax;\n        this.markCustomWaveDirty();\n    }\n    markCustomWaveDirty() {\n        const hashMult = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\n        let hash = 0;\n        for (const point of this.harmonics)\n            hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\nclass HarmonicsWaveState {\n    constructor() {\n        this.wave = null;\n        this._hash = -1;\n    }\n    getCustomWave(settings, instrumentType) {\n        if (this._hash == settings.hash && this._generatedForType == instrumentType)\n            return this.wave;\n        this._hash = settings.hash;\n        this._generatedForType = instrumentType;\n        const harmonicsRendered = (instrumentType == 7) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n        const waveLength = Config.harmonicsWavelength;\n        const retroWave = getDrumWave(0, null, null);\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave = this.wave;\n        for (let i = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n        const overallSlope = -0.25;\n        let combinedControlPointAmplitude = 1;\n        for (let harmonicIndex = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n            const harmonicFreq = harmonicIndex + 1;\n            let controlValue = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n            }\n            const normalizedValue = controlValue / Config.harmonicsMax;\n            let amplitude = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n            if (harmonicIndex < Config.harmonicsControlPoints) {\n                combinedControlPointAmplitude += amplitude;\n            }\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\n            amplitude *= retroWave[harmonicIndex + 589];\n            wave[waveLength - harmonicFreq] = amplitude;\n        }\n        inverseRealFourierTransform(wave, waveLength);\n        const mult = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n        for (let i = 0; i < wave.length; i++)\n            wave[i] *= mult;\n        performIntegralOld(wave);\n        wave[waveLength] = wave[0];\n        return wave;\n    }\n}\nclass Grain {\n    constructor() {\n        this.delayLinePosition = 0;\n        this.ageInSamples = 0;\n        this.maxAgeInSamples = 0;\n        this.delay = 0;\n        this.parabolicEnvelopeAmplitude = 0;\n        this.parabolicEnvelopeSlope = 0;\n        this.parabolicEnvelopeCurve = 0;\n        this.rcbEnvelopeAmplitude = 0;\n        this.rcbEnvelopeAttackIndex = 0;\n        this.rcbEnvelopeReleaseIndex = 0;\n        this.rcbEnvelopeSustain = 0;\n    }\n    initializeParabolicEnvelope(durationInSamples, amplitude) {\n        this.parabolicEnvelopeAmplitude = 0;\n        const invDuration = 1.0 / durationInSamples;\n        const invDurationSquared = invDuration * invDuration;\n        this.parabolicEnvelopeSlope = 4.0 * amplitude * (invDuration - invDurationSquared);\n        this.parabolicEnvelopeCurve = -8.0 * amplitude * invDurationSquared;\n    }\n    updateParabolicEnvelope() {\n        this.parabolicEnvelopeAmplitude += this.parabolicEnvelopeSlope;\n        this.parabolicEnvelopeSlope += this.parabolicEnvelopeCurve;\n    }\n    initializeRCBEnvelope(durationInSamples, amplitude) {\n        this.rcbEnvelopeAttackIndex = Math.floor(durationInSamples / 6);\n        this.rcbEnvelopeSustain = amplitude;\n        this.rcbEnvelopeReleaseIndex = Math.floor(durationInSamples * 5 / 6);\n    }\n    updateRCBEnvelope() {\n        if (this.ageInSamples < this.rcbEnvelopeAttackIndex) {\n            this.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI + (Math.PI * (this.ageInSamples / this.rcbEnvelopeAttackIndex) * (this.rcbEnvelopeSustain / 2.0))));\n        }\n        else if (this.ageInSamples > this.rcbEnvelopeReleaseIndex) {\n            this.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI * ((this.ageInSamples - this.rcbEnvelopeReleaseIndex) / this.rcbEnvelopeAttackIndex)) * (this.rcbEnvelopeSustain / 2.0));\n        }\n    }\n    addDelay(delay) {\n        this.delay = delay;\n    }\n}\nexport class FilterControlPoint {\n    constructor() {\n        this.freq = 0;\n        this.gain = Config.filterGainCenter;\n        this.type = 2;\n    }\n    set(freqSetting, gainSetting) {\n        this.freq = freqSetting;\n        this.gain = gainSetting;\n    }\n    getHz() {\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\n    }\n    static getHzFromSettingValue(value) {\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n    }\n    static getSettingValueFromHz(hz) {\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n    }\n    static getRoundedSettingValueFromHz(hz) {\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n    }\n    getLinearGain(peakMult = 1.0) {\n        const power = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        const neutral = (this.type == 2) ? 0.0 : -0.5;\n        const interpolatedPower = neutral + (power - neutral) * peakMult;\n        return Math.pow(2.0, interpolatedPower);\n    }\n    static getRoundedSettingValueFromLinearGain(linearGain) {\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n    }\n    toCoefficients(filter, sampleRate, freqMult = 1.0, peakMult = 1.0) {\n        const cornerRadiansPerSample = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n        const linearGain = this.getLinearGain(peakMult);\n        switch (this.type) {\n            case 0:\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case 1:\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case 2:\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n                break;\n            default:\n                throw new Error();\n        }\n    }\n    getVolumeCompensationMult() {\n        const octave = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n        const gainPow = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        switch (this.type) {\n            case 0:\n                const freqRelativeTo8khz = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n                const warpedFreq = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n                const warpedOctave = Math.log2(warpedFreq);\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n            case 1:\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n            case 2:\n                const distanceFromCenter = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n                const freqLoudness = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n            default:\n                throw new Error();\n        }\n    }\n}\nexport class FilterSettings {\n    constructor() {\n        this.controlPoints = [];\n        this.controlPointCount = 0;\n        this.reset();\n    }\n    reset() {\n        this.controlPointCount = 0;\n    }\n    addPoint(type, freqSetting, gainSetting) {\n        let controlPoint;\n        if (this.controlPoints.length <= this.controlPointCount) {\n            controlPoint = new FilterControlPoint();\n            this.controlPoints[this.controlPointCount] = controlPoint;\n        }\n        else {\n            controlPoint = this.controlPoints[this.controlPointCount];\n        }\n        this.controlPointCount++;\n        controlPoint.type = type;\n        controlPoint.set(freqSetting, gainSetting);\n    }\n    toJsonObject() {\n        const filterArray = [];\n        for (let i = 0; i < this.controlPointCount; i++) {\n            const point = this.controlPoints[i];\n            filterArray.push({\n                \"type\": Config.filterTypeNames[point.type],\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n            });\n        }\n        return filterArray;\n    }\n    fromJsonObject(filterObject) {\n        this.controlPoints.length = 0;\n        if (filterObject) {\n            for (const pointObject of filterObject) {\n                const point = new FilterControlPoint();\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n                if (point.type == -1)\n                    point.type = 2;\n                if (pointObject[\"cutoffHz\"] != undefined) {\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n                }\n                else {\n                    point.freq = 0;\n                }\n                if (pointObject[\"linearGain\"] != undefined) {\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n                }\n                else {\n                    point.gain = Config.filterGainCenter;\n                }\n                this.controlPoints.push(point);\n            }\n        }\n        this.controlPointCount = this.controlPoints.length;\n    }\n    static filtersCanMorph(filterA, filterB) {\n        if (filterA.controlPointCount != filterB.controlPointCount)\n            return false;\n        for (let i = 0; i < filterA.controlPointCount; i++) {\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\n                return false;\n        }\n        return true;\n    }\n    static lerpFilters(filterA, filterB, pos) {\n        let lerpedFilter = new FilterSettings();\n        if (filterA == null) {\n            return filterA;\n        }\n        if (filterB == null) {\n            return filterB;\n        }\n        pos = Math.max(0, Math.min(1, pos));\n        if (this.filtersCanMorph(filterA, filterB)) {\n            for (let i = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\n            }\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\n            return lerpedFilter;\n        }\n        else {\n            return (pos >= 1) ? filterB : filterA;\n        }\n    }\n    convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyEnv) {\n        this.reset();\n        const legacyFilterCutoffMaxHz = 8000;\n        const legacyFilterMax = 0.95;\n        const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance = 0.95;\n        const legacyFilterCutoffRange = 11;\n        const legacyFilterResonanceRange = 8;\n        const resonant = (legacyResonanceSetting > 1);\n        const firstOrder = (legacyResonanceSetting == 0);\n        const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        const envDecays = (legacyEnv.type == 5 || legacyEnv.type == 6 || legacyEnv.type == 10 || legacyEnv.type == 1);\n        const standardSampleRate = 48000;\n        const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n        if (legacyEnv.type == 0 && !resonant && cutoffAtMax) {\n        }\n        else if (firstOrder) {\n            const extraOctaves = 3.5;\n            const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians = response.magnitude();\n            let logGain = Math.log2(legacyFilterGainAtNewRadians);\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            if (envDecays)\n                logGain = Math.min(logGain, -1.0);\n            const convertedGain = Math.pow(2.0, logGain);\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        else {\n            const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain = 0.5 / intendedGain;\n            const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio = legacyRadians / maxRadians;\n            const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz;\n            if (envDecays) {\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\n            }\n            else {\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            }\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            let legacyFilterGain;\n            if (envDecays) {\n                legacyFilterGain = intendedGain;\n            }\n            else {\n                const legacyFilter = new FilterCoefficients();\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n                const response = new FrequencyResponse();\n                response.analyze(legacyFilter, curvedRadians);\n                legacyFilterGain = response.magnitude();\n            }\n            if (!resonant)\n                legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        this.controlPoints.length = this.controlPointCount;\n    }\n    convertLegacySettingsForSynth(legacyCutoffSetting, legacyResonanceSetting, allowFirstOrder = false) {\n        this.reset();\n        const legacyFilterCutoffMaxHz = 8000;\n        const legacyFilterMax = 0.95;\n        const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance = 0.95;\n        const legacyFilterCutoffRange = 11;\n        const legacyFilterResonanceRange = 8;\n        const firstOrder = (legacyResonanceSetting == 0 && allowFirstOrder);\n        const standardSampleRate = 48000;\n        const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n        if (firstOrder) {\n            const extraOctaves = 3.5;\n            const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians = response.magnitude();\n            let logGain = Math.log2(legacyFilterGainAtNewRadians);\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            const convertedGain = Math.pow(2.0, logGain);\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        else {\n            const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain = 0.5 / intendedGain;\n            const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio = legacyRadians / maxRadians;\n            const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz;\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getSettingValueFromHz(curvedHz);\n            let legacyFilterGain;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, curvedRadians);\n            legacyFilterGain = response.magnitude();\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n    }\n}\nexport class EnvelopeSettings {\n    constructor(isNoiseEnvelope) {\n        this.isNoiseEnvelope = isNoiseEnvelope;\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n        this.perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n        this.perEnvelopeLowerBound = 0;\n        this.perEnvelopeUpperBound = 1;\n        this.tempEnvelopeSpeed = null;\n        this.tempEnvelopeLowerBound = null;\n        this.tempEnvelopeUpperBound = null;\n        this.steps = 2;\n        this.seed = 2;\n        this.waveform = 0;\n        this.discrete = false;\n        this.reset();\n    }\n    reset() {\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n        this.pitchEnvelopeStart = 0;\n        this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount - 1 : Config.maxPitch;\n        this.inverse = false;\n        this.isNoiseEnvelope = false;\n        this.perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n        this.perEnvelopeLowerBound = 0;\n        this.perEnvelopeUpperBound = 1;\n        this.tempEnvelopeSpeed = null;\n        this.tempEnvelopeLowerBound = null;\n        this.tempEnvelopeUpperBound = null;\n        this.steps = 2;\n        this.seed = 2;\n        this.waveform = 0;\n        this.discrete = false;\n    }\n    toJsonObject() {\n        const envelopeObject = {\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\n            \"envelope\": Config.newEnvelopes[this.envelope].name,\n            \"inverse\": this.inverse,\n            \"perEnvelopeSpeed\": this.perEnvelopeSpeed,\n            \"perEnvelopeLowerBound\": this.perEnvelopeLowerBound,\n            \"perEnvelopeUpperBound\": this.perEnvelopeUpperBound,\n            \"discrete\": this.discrete,\n        };\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n            envelopeObject[\"index\"] = this.index;\n        }\n        if (Config.newEnvelopes[this.envelope].name == \"pitch\") {\n            envelopeObject[\"pitchEnvelopeStart\"] = this.pitchEnvelopeStart;\n            envelopeObject[\"pitchEnvelopeEnd\"] = this.pitchEnvelopeEnd;\n        }\n        else if (Config.newEnvelopes[this.envelope].name == \"random\") {\n            envelopeObject[\"steps\"] = this.steps;\n            envelopeObject[\"seed\"] = this.seed;\n            envelopeObject[\"waveform\"] = this.waveform;\n        }\n        else if (Config.newEnvelopes[this.envelope].name == \"lfo\") {\n            envelopeObject[\"waveform\"] = this.waveform;\n            envelopeObject[\"steps\"] = this.steps;\n        }\n        return envelopeObject;\n    }\n    fromJsonObject(envelopeObject, format) {\n        this.reset();\n        let target = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n        if (target == null)\n            target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n        this.target = target.index;\n        let envelope = Config.envelopes.dictionary[\"none\"];\n        let isTremolo2 = false;\n        if (format == \"slarmoosbox\") {\n            if (envelopeObject[\"envelope\"] == \"tremolo2\") {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (envelopeObject[\"envelope\"] == \"tremolo\") {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = false;\n            }\n            else {\n                envelope = Config.newEnvelopes.dictionary[envelopeObject[\"envelope\"]];\n            }\n        }\n        else {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == 9) {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > 8) {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            }\n            else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n        if (envelope == undefined) {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == 9) {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > 8) {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            }\n            else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n        if (envelope == null)\n            envelope = Config.envelopes.dictionary[\"none\"];\n        this.envelope = envelope.index;\n        if (envelopeObject[\"index\"] != undefined) {\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n        }\n        else {\n            this.index = 0;\n        }\n        if (envelopeObject[\"pitchEnvelopeStart\"] != undefined) {\n            this.pitchEnvelopeStart = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeStart\"]);\n        }\n        else {\n            this.pitchEnvelopeStart = 0;\n        }\n        if (envelopeObject[\"pitchEnvelopeEnd\"] != undefined) {\n            this.pitchEnvelopeEnd = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeEnd\"]);\n        }\n        else {\n            this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch;\n        }\n        this.inverse = Boolean(envelopeObject[\"inverse\"]);\n        if (envelopeObject[\"perEnvelopeSpeed\"] != undefined) {\n            this.perEnvelopeSpeed = envelopeObject[\"perEnvelopeSpeed\"];\n        }\n        else {\n            this.perEnvelopeSpeed = Config.envelopes.dictionary[envelopeObject[\"envelope\"]].speed;\n        }\n        if (envelopeObject[\"perEnvelopeLowerBound\"] != undefined) {\n            this.perEnvelopeLowerBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeLowerBound\"]);\n        }\n        else {\n            this.perEnvelopeLowerBound = 0;\n        }\n        if (envelopeObject[\"perEnvelopeUpperBound\"] != undefined) {\n            this.perEnvelopeUpperBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeUpperBound\"]);\n        }\n        else {\n            this.perEnvelopeUpperBound = 1;\n        }\n        if (isTremolo2) {\n            if (this.inverse) {\n                this.perEnvelopeUpperBound = Math.floor((this.perEnvelopeUpperBound / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = Math.floor((this.perEnvelopeLowerBound / 2) * 10) / 10;\n            }\n            else {\n                this.perEnvelopeUpperBound = Math.floor((0.5 + (this.perEnvelopeUpperBound - this.perEnvelopeLowerBound) / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = 0.5;\n            }\n        }\n        if (envelopeObject[\"steps\"] != undefined) {\n            this.steps = clamp(1, Config.randomEnvelopeStepsMax + 1, envelopeObject[\"steps\"]);\n        }\n        else {\n            this.steps = 2;\n        }\n        if (envelopeObject[\"seed\"] != undefined) {\n            this.seed = clamp(1, Config.randomEnvelopeSeedMax + 1, envelopeObject[\"seed\"]);\n        }\n        else {\n            this.seed = 2;\n        }\n        if (envelopeObject[\"waveform\"] != undefined) {\n            this.waveform = envelopeObject[\"waveform\"];\n        }\n        else {\n            this.waveform = 0;\n        }\n        if (envelopeObject[\"discrete\"] != undefined) {\n            this.discrete = envelopeObject[\"discrete\"];\n        }\n        else {\n            this.discrete = false;\n        }\n    }\n}\nexport class Instrument {\n    constructor(isNoiseChannel, isModChannel) {\n        this.type = 0;\n        this.preset = 0;\n        this.chipWave = 2;\n        this.isUsingAdvancedLoopControls = false;\n        this.chipWaveLoopStart = 0;\n        this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n        this.chipWaveLoopMode = 0;\n        this.chipWavePlayBackwards = false;\n        this.chipWaveStartOffset = 0;\n        this.chipNoise = 1;\n        this.eqFilter = new FilterSettings();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        this.noteFilter = new FilterSettings();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.eqSubFilters = [];\n        this.noteSubFilters = [];\n        this.envelopes = [];\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.envelopeCount = 0;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.pitchShift = 0;\n        this.detune = 0;\n        this.vibrato = 0;\n        this.interval = 0;\n        this.vibratoDepth = 0;\n        this.vibratoSpeed = 10;\n        this.vibratoDelay = 0;\n        this.vibratoType = 0;\n        this.envelopeSpeed = 12;\n        this.unison = 0;\n        this.unisonVoices = 1;\n        this.unisonSpread = 0.0;\n        this.unisonOffset = 0.0;\n        this.unisonExpression = 1.4;\n        this.unisonSign = 1.0;\n        this.effects = 0;\n        this.chord = 1;\n        this.volume = 0;\n        this.pan = Config.panCenter;\n        this.panDelay = 0;\n        this.arpeggioSpeed = 12;\n        this.monoChordTone = 0;\n        this.fastTwoNoteArp = false;\n        this.legacyTieOver = false;\n        this.clicklessTransition = false;\n        this.aliases = false;\n        this.pulseWidth = Config.pulseWidthRange;\n        this.decimalOffset = 0;\n        this.supersawDynamism = Config.supersawDynamismMax;\n        this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n        this.supersawShape = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = 1;\n        this.distortion = 0;\n        this.bitcrusherFreq = 0;\n        this.bitcrusherQuantization = 0;\n        this.ringModulation = Config.ringModRange >> 1;\n        this.ringModulationHz = Config.ringModHzRange >> 1;\n        this.ringModWaveformIndex = 0;\n        this.ringModPulseWidth = Config.pwmOperatorWaves.length >> 1;\n        this.ringModHzOffset = 200;\n        this.granular = 4;\n        this.grainSize = (Config.grainSizeMax - Config.grainSizeMin) / Config.grainSizeStep;\n        this.grainAmounts = Config.grainAmountsMax;\n        this.grainRange = 40;\n        this.chorus = 0;\n        this.reverb = 0;\n        this.echoSustain = 0;\n        this.echoDelay = 0;\n        this.algorithm = 0;\n        this.feedbackType = 0;\n        this.algorithm6Op = 1;\n        this.feedbackType6Op = 1;\n        this.customAlgorithm = new CustomAlgorithm();\n        this.customFeedbackType = new CustomFeedBack();\n        this.feedbackAmplitude = 0;\n        this.customChipWave = new Float32Array(64);\n        this.customChipWaveIntegral = new Float32Array(65);\n        this.operators = [];\n        this.harmonicsWave = new HarmonicsWave();\n        this.drumsetEnvelopes = [];\n        this.drumsetSpectrumWaves = [];\n        this.modChannels = [];\n        this.modInstruments = [];\n        this.modulators = [];\n        this.modFilterTypes = [];\n        this.modEnvelopeNumbers = [];\n        this.invalidModulators = [];\n        this.isNoiseInstrument = false;\n        if (isModChannel) {\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                this.modChannels.push(-2);\n                this.modInstruments.push(0);\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n            }\n        }\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\n        for (let i = 0; i < Config.operatorCount + 2; i++) {\n            this.operators[i] = new Operator(i);\n        }\n        for (let i = 0; i < Config.drumCount; i++) {\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n        }\n        for (let i = 0; i < 64; i++) {\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\n        }\n        let sum = 0.0;\n        for (let i = 0; i < this.customChipWave.length; i++) {\n            sum += this.customChipWave[i];\n        }\n        const average = sum / this.customChipWave.length;\n        let cumulative = 0;\n        let wavePrev = 0;\n        for (let i = 0; i < this.customChipWave.length; i++) {\n            cumulative += wavePrev;\n            wavePrev = this.customChipWave[i] - average;\n            this.customChipWaveIntegral[i] = cumulative;\n        }\n        this.customChipWaveIntegral[64] = 0.0;\n        this.isNoiseInstrument = isNoiseChannel;\n    }\n    setTypeAndReset(type, isNoiseChannel, isModChannel) {\n        if (isModChannel)\n            type = 10;\n        this.type = type;\n        this.preset = type;\n        this.volume = 0;\n        this.effects = (1 << 2);\n        this.chorus = Config.chorusRange - 1;\n        this.reverb = 0;\n        this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\n        this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\n        this.eqFilter.reset();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        for (let i = 0; i < Config.filterMorphCount; i++) {\n            this.eqSubFilters[i] = null;\n            this.noteSubFilters[i] = null;\n        }\n        this.noteFilter.reset();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\n        this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5);\n        this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\n        this.ringModulation = Config.ringModRange >> 1;\n        this.ringModulationHz = Config.ringModHzRange >> 1;\n        this.ringModWaveformIndex = 0;\n        this.ringModPulseWidth = Config.pwmOperatorWaves.length >> 1;\n        this.ringModHzOffset = 200;\n        this.granular = 4;\n        this.grainSize = (Config.grainSizeMax - Config.grainSizeMin) / Config.grainSizeStep;\n        this.grainAmounts = Config.grainAmountsMax;\n        this.grainRange = 40;\n        this.pan = Config.panCenter;\n        this.panDelay = 0;\n        this.pitchShift = Config.pitchShiftCenter;\n        this.detune = Config.detuneCenter;\n        this.vibrato = 0;\n        this.unison = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = Config.enableAcousticSustain ? 1 : 0;\n        this.clicklessTransition = false;\n        this.arpeggioSpeed = 12;\n        this.monoChordTone = 1;\n        this.envelopeSpeed = 12;\n        this.legacyTieOver = false;\n        this.aliases = false;\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.envelopeCount = 0;\n        this.isNoiseInstrument = isNoiseChannel;\n        switch (type) {\n            case 0:\n                this.chipWave = 2;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveStartOffset = 0;\n                break;\n            case 9:\n                this.chipWave = 2;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                for (let i = 0; i < 64; i++) {\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\n                }\n                let sum = 0.0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average = sum / this.customChipWave.length;\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n                this.customChipWaveIntegral[64] = 0.0;\n                break;\n            case 1:\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.feedbackAmplitude = 0;\n                for (let i = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case 11:\n                this.transition = 1;\n                this.vibrato = 0;\n                this.effects = 1;\n                this.chord = 3;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.algorithm6Op = 1;\n                this.feedbackType6Op = 1;\n                this.customAlgorithm.fromPreset(1);\n                this.feedbackAmplitude = 0;\n                for (let i = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case 2:\n                this.chipNoise = 1;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case 3:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.spectrumWave.reset(isNoiseChannel);\n                break;\n            case 4:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                for (let i = 0; i < Config.drumCount; i++) {\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n                    }\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n                }\n                break;\n            case 5:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case 6:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.pulseWidth = Config.pulseWidthRange;\n                this.decimalOffset = 0;\n                break;\n            case 7:\n                this.chord = Config.chords.dictionary[\"strum\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case 10:\n                this.transition = 0;\n                this.vibrato = 0;\n                this.interval = 0;\n                this.effects = 0;\n                this.chord = 0;\n                this.modChannels = [];\n                this.modInstruments = [];\n                this.modulators = [];\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    this.modChannels.push(-2);\n                    this.modInstruments.push(0);\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n                    this.invalidModulators[mod] = false;\n                    this.modFilterTypes[mod] = 0;\n                    this.modEnvelopeNumbers[mod] = 0;\n                }\n                break;\n            case 8:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.supersawDynamism = Config.supersawDynamismMax;\n                this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n                this.supersawShape = 0;\n                this.pulseWidth = Config.pulseWidthRange - 1;\n                this.decimalOffset = 0;\n                break;\n            default:\n                throw new Error(\"Unrecognized instrument type: \" + type);\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n            this.effects = (this.effects | (1 << 11));\n        }\n    }\n    convertLegacySettings(legacySettings, forceSimpleFilter) {\n        let legacyCutoffSetting = legacySettings.filterCutoff;\n        let legacyResonanceSetting = legacySettings.filterResonance;\n        let legacyFilterEnv = legacySettings.filterEnvelope;\n        let legacyPulseEnv = legacySettings.pulseEnvelope;\n        let legacyOperatorEnvelopes = legacySettings.operatorEnvelopes;\n        let legacyFeedbackEnv = legacySettings.feedbackEnvelope;\n        if (legacyCutoffSetting == undefined)\n            legacyCutoffSetting = (this.type == 0) ? 6 : 10;\n        if (legacyResonanceSetting == undefined)\n            legacyResonanceSetting = 0;\n        if (legacyFilterEnv == undefined)\n            legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        if (legacyPulseEnv == undefined)\n            legacyPulseEnv = Config.envelopes.dictionary[(this.type == 6) ? \"twang 2\" : \"none\"];\n        if (legacyOperatorEnvelopes == undefined)\n            legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == 1) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n        if (legacyFeedbackEnv == undefined)\n            legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n        const legacyFilterCutoffRange = 11;\n        const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        if (cutoffAtMax && legacyFilterEnv.type == 4)\n            legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        const carrierCount = Config.algorithms[this.algorithm].carrierCount;\n        let noCarriersControlledByNoteSize = true;\n        let allCarriersControlledByNoteSize = true;\n        let noteSizeControlsSomethingElse = (legacyFilterEnv.type == 1) || (legacyPulseEnv.type == 1);\n        if (this.type == 1 || this.type == 11) {\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == 1);\n            for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {\n                if (i < carrierCount) {\n                    if (legacyOperatorEnvelopes[i].type != 1) {\n                        allCarriersControlledByNoteSize = false;\n                    }\n                    else {\n                        noCarriersControlledByNoteSize = false;\n                    }\n                }\n                else {\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == 1);\n                }\n            }\n        }\n        this.envelopeCount = 0;\n        if (this.type == 1 || this.type == 11) {\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            }\n            else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            }\n        }\n        if (legacyFilterEnv.type == 0) {\n            this.noteFilter.reset();\n            this.noteFilterType = false;\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects &= ~(1 << 5);\n            if (forceSimpleFilter || this.eqFilterType) {\n                this.eqFilterType = true;\n                this.eqFilterSimpleCut = legacyCutoffSetting;\n                this.eqFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n        else {\n            this.eqFilter.reset();\n            this.eqFilterType = false;\n            this.noteFilterType = false;\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects |= 1 << 5;\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index, false);\n            if (forceSimpleFilter || this.noteFilterType) {\n                this.noteFilterType = true;\n                this.noteFilterSimpleCut = legacyCutoffSetting;\n                this.noteFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n        if (legacyPulseEnv.type != 0) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index, false);\n        }\n        for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {\n            if (i < carrierCount && allCarriersControlledByNoteSize)\n                continue;\n            if (legacyOperatorEnvelopes[i].type != 0) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index, false);\n            }\n        }\n        if (legacyFeedbackEnv.type != 0) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index, false);\n        }\n    }\n    toJsonObject() {\n        const instrumentObject = {\n            \"type\": Config.instrumentTypeNames[this.type],\n            \"volume\": this.volume,\n            \"eqFilter\": this.eqFilter.toJsonObject(),\n            \"eqFilterType\": this.eqFilterType,\n            \"eqSimpleCut\": this.eqFilterSimpleCut,\n            \"eqSimplePeak\": this.eqFilterSimplePeak,\n            \"envelopeSpeed\": this.envelopeSpeed\n        };\n        if (this.preset != this.type) {\n            instrumentObject[\"preset\"] = this.preset;\n        }\n        for (let i = 0; i < Config.filterMorphCount; i++) {\n            if (this.eqSubFilters[i] != null)\n                instrumentObject[\"eqSubFilters\" + i] = this.eqSubFilters[i].toJsonObject();\n        }\n        const effects = [];\n        for (const effect of Config.effectOrder) {\n            if (this.effects & (1 << effect)) {\n                effects.push(Config.effectNames[effect]);\n            }\n        }\n        instrumentObject[\"effects\"] = effects;\n        if (effectsIncludeTransition(this.effects)) {\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\n        }\n        if (effectsIncludeChord(this.effects)) {\n            instrumentObject[\"chord\"] = this.getChord().name;\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\n            instrumentObject[\"monoChordTone\"] = this.monoChordTone;\n        }\n        if (effectsIncludePitchShift(this.effects)) {\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n        }\n        if (effectsIncludeDetune(this.effects)) {\n            instrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune);\n        }\n        if (effectsIncludeVibrato(this.effects)) {\n            if (this.vibrato == -1) {\n                this.vibrato = 5;\n            }\n            if (this.vibrato != 5) {\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n            }\n            else {\n                instrumentObject[\"vibrato\"] = \"custom\";\n            }\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\n        }\n        if (effectsIncludeNoteFilter(this.effects)) {\n            instrumentObject[\"noteFilterType\"] = this.noteFilterType;\n            instrumentObject[\"noteSimpleCut\"] = this.noteFilterSimpleCut;\n            instrumentObject[\"noteSimplePeak\"] = this.noteFilterSimplePeak;\n            instrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null)\n                    instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i].toJsonObject();\n            }\n        }\n        if (effectsIncludeGranular(this.effects)) {\n            instrumentObject[\"granular\"] = this.granular;\n            instrumentObject[\"grainSize\"] = this.grainSize;\n            instrumentObject[\"grainAmounts\"] = this.grainAmounts;\n            instrumentObject[\"grainRange\"] = this.grainRange;\n        }\n        if (effectsIncludeRingModulation(this.effects)) {\n            instrumentObject[\"ringMod\"] = Math.round(100 * this.ringModulation / (Config.ringModRange - 1));\n            instrumentObject[\"ringModHz\"] = Math.round(100 * this.ringModulationHz / (Config.ringModHzRange - 1));\n            instrumentObject[\"ringModWaveformIndex\"] = this.ringModWaveformIndex;\n            instrumentObject[\"ringModPulseWidth\"] = Math.round(100 * this.ringModPulseWidth / (Config.pulseWidthRange - 1));\n            instrumentObject[\"ringModHzOffset\"] = Math.round(100 * this.ringModHzOffset / (Config.rmHzOffsetMax));\n        }\n        if (effectsIncludeDistortion(this.effects)) {\n            instrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\n            instrumentObject[\"aliases\"] = this.aliases;\n        }\n        if (effectsIncludeBitcrusher(this.effects)) {\n            instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\n            instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\n        }\n        if (effectsIncludePanning(this.effects)) {\n            instrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\n            instrumentObject[\"panDelay\"] = this.panDelay;\n        }\n        if (effectsIncludeChorus(this.effects)) {\n            instrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\n        }\n        if (effectsIncludeEcho(this.effects)) {\n            instrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\n            instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\n        }\n        if (effectsIncludeReverb(this.effects)) {\n            instrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\n        }\n        if (this.type != 4) {\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\n            instrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\n        }\n        if (this.type == 5 || this.type == 7) {\n            instrumentObject[\"harmonics\"] = [];\n            for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n            }\n        }\n        if (this.type == 2) {\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 3) {\n            instrumentObject[\"spectrum\"] = [];\n            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n            }\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 4) {\n            instrumentObject[\"drums\"] = [];\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            for (let j = 0; j < Config.drumCount; j++) {\n                const spectrum = [];\n                for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n                }\n                instrumentObject[\"drums\"][j] = {\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n                    \"spectrum\": spectrum,\n                };\n            }\n        }\n        else if (this.type == 0) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\n            instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\n            instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\n            instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\n            instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\n            instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\n        }\n        else if (this.type == 6) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 8) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\n            instrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\n            instrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\n        }\n        else if (this.type == 7) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n            if (Config.enableAcousticSustain) {\n                instrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\n            }\n        }\n        else if (this.type == 5) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 1 || this.type == 11) {\n            const operatorArray = [];\n            for (const operator of this.operators) {\n                operatorArray.push({\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\n                    \"amplitude\": operator.amplitude,\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\n                    \"pulseWidth\": operator.pulseWidth,\n                });\n            }\n            if (this.type == 1) {\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n            else {\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                if (this.algorithm6Op == 0) {\n                    const customAlgorithm = {};\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\n                }\n                if (this.feedbackType6Op == 0) {\n                    const customFeedback = {};\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\n                    instrumentObject[\"customFeedback\"] = customFeedback;\n                }\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n        }\n        else if (this.type == 9) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\n            for (let i = 0; i < this.customChipWave.length; i++) {\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\n            }\n        }\n        else if (this.type == 10) {\n            instrumentObject[\"modChannels\"] = [];\n            instrumentObject[\"modInstruments\"] = [];\n            instrumentObject[\"modSettings\"] = [];\n            instrumentObject[\"modFilterTypes\"] = [];\n            instrumentObject[\"modEnvelopeNumbers\"] = [];\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\n                instrumentObject[\"modEnvelopeNumbers\"][mod] = this.modEnvelopeNumbers[mod];\n            }\n        }\n        else {\n            throw new Error(\"Unrecognized instrument type\");\n        }\n        const envelopes = [];\n        for (let i = 0; i < this.envelopeCount; i++) {\n            envelopes.push(this.envelopes[i].toJsonObject());\n        }\n        instrumentObject[\"envelopes\"] = envelopes;\n        return instrumentObject;\n    }\n    fromJsonObject(instrumentObject, isNoiseChannel, isModChannel, useSlowerRhythm, useFastTwoNoteArp, legacyGlobalReverb = 0, jsonFormat = Config.jsonFormat) {\n        if (instrumentObject == undefined)\n            instrumentObject = {};\n        const format = jsonFormat.toLowerCase();\n        let type = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n        if ((format == \"synthbox\") && (instrumentObject[\"type\"] == \"FM\"))\n            type = Config.instrumentTypeNames.indexOf(\"FM6op\");\n        if (type == -1)\n            type = isModChannel ? 10 : (isNoiseChannel ? 2 : 0);\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\n        this.effects &= ~(1 << 2);\n        if (instrumentObject[\"preset\"] != undefined) {\n            this.preset = instrumentObject[\"preset\"] >>> 0;\n        }\n        if (instrumentObject[\"volume\"] != undefined) {\n            if (format == \"jummbox\" || format == \"midbox\" || format == \"synthbox\" || format == \"goldbox\" || format == \"paandorasbox\" || format == \"ultrabox\" || format == \"slarmoosbox\") {\n                this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\n            }\n            else {\n                this.volume = Math.round(-clamp(0, 8, Math.round(5 - (instrumentObject[\"volume\"] | 0) / 20)) * 25.0 / 7.0);\n            }\n        }\n        else {\n            this.volume = 0;\n        }\n        this.envelopeSpeed = instrumentObject[\"envelopeSpeed\"] != undefined ? clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0) : 12;\n        if (Array.isArray(instrumentObject[\"effects\"])) {\n            let effects = 0;\n            for (let i = 0; i < instrumentObject[\"effects\"].length; i++) {\n                effects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\n            }\n            this.effects = (effects & ((1 << 15) - 1));\n        }\n        else {\n            const legacyEffectsNames = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\n            this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\n            if (this.effects == -1)\n                this.effects = (this.type == 2) ? 0 : 1;\n        }\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        const transitionProperty = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"];\n        if (transitionProperty != undefined) {\n            let transition = Config.transitions.dictionary[transitionProperty];\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n                const legacySettings = {\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                }[transitionProperty];\n                if (legacySettings != undefined) {\n                    transition = Config.transitions.dictionary[legacySettings.transition];\n                    this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\n                    this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n                }\n            }\n            if (transition != undefined)\n                this.transition = transition.index;\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n                this.effects = (this.effects | (1 << 10));\n            }\n        }\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\n            this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n        }\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\n            this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n        }\n        {\n            const chordProperty = instrumentObject[\"chord\"];\n            const legacyChordNames = { \"harmony\": \"simultaneous\" };\n            const chord = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n            if (chord != undefined) {\n                this.chord = chord.index;\n            }\n            else {\n                if (this.type == 2) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                }\n                else if (this.type == 7) {\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\n                }\n                else if (this.type == 0) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                }\n                else if (this.type == 1 || this.type == 11) {\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                }\n                else {\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                }\n            }\n        }\n        this.unison = Config.unisons.dictionary[\"none\"].index;\n        const unisonProperty = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"];\n        if (unisonProperty != undefined) {\n            const legacyChorusNames = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\", \"error\": \"voiced\" };\n            const unison = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n            if (unison != undefined)\n                this.unison = unison.index;\n            if (unisonProperty == \"custom\")\n                this.unison = Config.unisons.length;\n        }\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\n            this.effects = (this.effects | (1 << 11));\n        }\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n        }\n        if (instrumentObject[\"octoff\"] != undefined) {\n            let potentialPitchShift = instrumentObject[\"octoff\"];\n            this.effects = (this.effects | (1 << 7));\n            if ((potentialPitchShift == \"+1 (octave)\") || (potentialPitchShift == \"+2 (2 octaves)\")) {\n                this.pitchShift = 24;\n            }\n            else if ((potentialPitchShift == \"+1/2 (fifth)\") || (potentialPitchShift == \"+1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 18;\n            }\n            else if ((potentialPitchShift == \"-1 (octave)\") || (potentialPitchShift == \"-2 (2 octaves\")) {\n                this.pitchShift = 0;\n            }\n            else if ((potentialPitchShift == \"-1/2 (fifth)\") || (potentialPitchShift == \"-1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 6;\n            }\n            else {\n                this.pitchShift = 12;\n            }\n        }\n        if (instrumentObject[\"detuneCents\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\n        }\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index;\n        const vibratoProperty = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"];\n        if (vibratoProperty != undefined) {\n            const legacyVibratoNames = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\n            const vibrato = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n            if (vibrato != undefined)\n                this.vibrato = vibrato.index;\n            else if (vibratoProperty == \"custom\")\n                this.vibrato = Config.vibratos.length;\n            if (this.vibrato == Config.vibratos.length) {\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\n                this.vibratoType = instrumentObject[\"vibratoType\"];\n            }\n            else {\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\n                this.vibratoSpeed = 10;\n                this.vibratoType = Config.vibratos[this.vibrato].type;\n            }\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\n                this.effects = (this.effects | (1 << 9));\n            }\n        }\n        if (instrumentObject[\"pan\"] != undefined) {\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\n        }\n        else if (instrumentObject[\"ipan\"] != undefined) {\n            this.pan = clamp(0, Config.panMax + 1, Config.panCenter + (instrumentObject[\"ipan\"] * -50));\n        }\n        else {\n            this.pan = Config.panCenter;\n        }\n        if (this.pan != Config.panCenter) {\n            this.effects = (this.effects | (1 << 2));\n        }\n        if (instrumentObject[\"panDelay\"] != undefined) {\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\n        }\n        else {\n            this.panDelay = 0;\n        }\n        if (instrumentObject[\"detune\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\n        }\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\n            this.detune = Config.detuneCenter;\n        }\n        if (instrumentObject[\"ringMod\"] != undefined) {\n            this.ringModulation = clamp(0, Config.ringModRange, Math.round((Config.ringModRange - 1) * (instrumentObject[\"ringMod\"] | 0) / 100));\n        }\n        if (instrumentObject[\"ringModHz\"] != undefined) {\n            this.ringModulationHz = clamp(0, Config.ringModHzRange, Math.round((Config.ringModHzRange - 1) * (instrumentObject[\"ringModHz\"] | 0) / 100));\n        }\n        if (instrumentObject[\"ringModWaveformIndex\"] != undefined) {\n            this.ringModWaveformIndex = clamp(0, Config.operatorWaves.length, instrumentObject[\"ringModWaveformIndex\"]);\n        }\n        if (instrumentObject[\"ringModPulseWidth\"] != undefined) {\n            this.ringModPulseWidth = clamp(0, Config.pulseWidthRange, Math.round((Config.pulseWidthRange - 1) * (instrumentObject[\"ringModPulseWidth\"] | 0) / 100));\n        }\n        if (instrumentObject[\"ringModHzOffset\"] != undefined) {\n            this.ringModHzOffset = clamp(0, Config.rmHzOffsetMax, Math.round((Config.rmHzOffsetMax - 1) * (instrumentObject[\"ringModHzOffset\"] | 0) / 100));\n        }\n        if (instrumentObject[\"granular\"] != undefined) {\n            this.granular = instrumentObject[\"granular\"];\n        }\n        if (instrumentObject[\"grainSize\"] != undefined) {\n            this.grainSize = instrumentObject[\"grainSize\"];\n        }\n        if (instrumentObject[\"grainAmounts\"] != undefined) {\n            this.grainAmounts = instrumentObject[\"grainAmounts\"];\n        }\n        if (instrumentObject[\"grainRange\"] != undefined) {\n            this.grainRange = clamp(0, Config.grainRangeMax / Config.grainSizeStep + 1, instrumentObject[\"grainRange\"]);\n        }\n        if (instrumentObject[\"distortion\"] != undefined) {\n            this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\n        }\n        if (instrumentObject[\"bitcrusherOctave\"] != undefined) {\n            this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\n        }\n        if (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\n            this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\n        }\n        if (instrumentObject[\"echoSustain\"] != undefined) {\n            this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\n        }\n        if (instrumentObject[\"echoDelayBeats\"] != undefined) {\n            this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\n        }\n        if (!isNaN(instrumentObject[\"chorus\"])) {\n            this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\n        }\n        if (instrumentObject[\"reverb\"] != undefined) {\n            this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\n        }\n        else {\n            this.reverb = legacyGlobalReverb;\n        }\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\n        }\n        else {\n            this.pulseWidth = Config.pulseWidthRange;\n        }\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\n        }\n        else {\n            this.decimalOffset = 0;\n        }\n        if (instrumentObject[\"dynamism\"] != undefined) {\n            this.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\n        }\n        else {\n            this.supersawDynamism = Config.supersawDynamismMax;\n        }\n        if (instrumentObject[\"spread\"] != undefined) {\n            this.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\n        }\n        else {\n            this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n        }\n        if (instrumentObject[\"shape\"] != undefined) {\n            this.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\n        }\n        else {\n            this.supersawShape = 0;\n        }\n        if (instrumentObject[\"harmonics\"] != undefined) {\n            for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n            }\n            this.harmonicsWave.markCustomWaveDirty();\n        }\n        else {\n            this.harmonicsWave.reset();\n        }\n        if (instrumentObject[\"spectrum\"] != undefined) {\n            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n                this.spectrumWave.markCustomWaveDirty();\n            }\n        }\n        else {\n            this.spectrumWave.reset(isNoiseChannel);\n        }\n        if (instrumentObject[\"stringSustain\"] != undefined) {\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n        }\n        else {\n            this.stringSustain = 10;\n        }\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : 0;\n        if (this.stringSustainType == -1)\n            this.stringSustainType = 0;\n        if (this.type == 2) {\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (instrumentObject[\"wave\"] == \"pink noise\")\n                this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\n            if (instrumentObject[\"wave\"] == \"brownian noise\")\n                this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\n            if (this.chipNoise == -1)\n                this.chipNoise = 1;\n        }\n        const legacyEnvelopeNames = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\n        const getEnvelope = (name) => {\n            if (legacyEnvelopeNames[name] != undefined)\n                return Config.envelopes.dictionary[legacyEnvelopeNames[name]];\n            else {\n                return Config.envelopes.dictionary[name];\n            }\n        };\n        if (this.type == 4) {\n            if (instrumentObject[\"drums\"] != undefined) {\n                for (let j = 0; j < Config.drumCount; j++) {\n                    const drum = instrumentObject[\"drums\"][j];\n                    if (drum == undefined)\n                        continue;\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (drum[\"filterEnvelope\"] != undefined) {\n                        const envelope = getEnvelope(drum[\"filterEnvelope\"]);\n                        if (envelope != undefined)\n                            this.drumsetEnvelopes[j] = envelope.index;\n                    }\n                    if (drum[\"spectrum\"] != undefined) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n                        }\n                    }\n                    this.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                }\n            }\n        }\n        if (this.type == 0) {\n            const legacyWaveNames = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\n            const modboxWaveNames = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\n            const sandboxWaveNames = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\n            const zefboxWaveNames = { \"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71, \"deep pulse\": 72 };\n            const miscWaveNames = { \"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\n            const paandorasboxWaveNames = { \"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119 };\n            this.chipWave = -1;\n            const rawName = instrumentObject[\"wave\"];\n            for (const table of [\n                legacyWaveNames,\n                modboxWaveNames,\n                sandboxWaveNames,\n                zefboxWaveNames,\n                miscWaveNames,\n                paandorasboxWaveNames\n            ]) {\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\n                    this.chipWave = table[rawName];\n                    break;\n                }\n            }\n            if (this.chipWave == -1) {\n                const potentialChipWaveIndex = Config.chipWaves.findIndex(wave => wave.name == rawName);\n                if (potentialChipWaveIndex != -1)\n                    this.chipWave = potentialChipWaveIndex;\n            }\n            if (this.chipWave == -1)\n                this.chipWave = 1;\n        }\n        if (this.type == 1 || this.type == 11) {\n            if (this.type == 1) {\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm == -1)\n                    this.algorithm = 0;\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType == -1)\n                    this.feedbackType = 0;\n            }\n            else {\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm6Op == -1)\n                    this.algorithm6Op = 1;\n                if (this.algorithm6Op == 0) {\n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\n                }\n                else {\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\n                }\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType6Op == -1) {\n                    let synthboxLegacyFeedbacks = toNameMap([\n                        { name: \"2⟲ 3⟲\", indices: [[], [2], [3], [], [], []] },\n                        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\n                        { name: \"4⟲ 5⟲\", indices: [[], [], [], [4], [5], []] },\n                        { name: \"5⟲ 6⟲\", indices: [[], [], [], [], [5], [6]] },\n                        { name: \"1⟲ 6⟲\", indices: [[1], [], [], [], [], [6]] },\n                        { name: \"1⟲ 3⟲\", indices: [[1], [], [3], [], [], []] },\n                        { name: \"1⟲ 4⟲\", indices: [[1], [], [], [4], [], []] },\n                        { name: \"1⟲ 5⟲\", indices: [[1], [], [], [], [5], []] },\n                        { name: \"4⟲ 6⟲\", indices: [[], [], [], [4], [], [6]] },\n                        { name: \"2⟲ 6⟲\", indices: [[], [2], [], [], [], [6]] },\n                        { name: \"3⟲ 6⟲\", indices: [[], [], [3], [], [], [6]] },\n                        { name: \"4⟲ 5⟲ 6⟲\", indices: [[], [], [], [4], [5], [6]] },\n                        { name: \"1⟲ 3⟲ 6⟲\", indices: [[1], [], [3], [], [], [6]] },\n                        { name: \"2→5\", indices: [[], [], [], [], [2], []] },\n                        { name: \"2→6\", indices: [[], [], [], [], [], [2]] },\n                        { name: \"3→5\", indices: [[], [], [], [], [3], []] },\n                        { name: \"3→6\", indices: [[], [], [], [], [], [3]] },\n                        { name: \"4→6\", indices: [[], [], [], [], [], [4]] },\n                        { name: \"5→6\", indices: [[], [], [], [], [], [5]] },\n                        { name: \"1→3→4\", indices: [[], [], [1], [], [3], []] },\n                        { name: \"2→5→6\", indices: [[], [], [], [], [2], [5]] },\n                        { name: \"2→4→6\", indices: [[], [], [], [2], [], [4]] },\n                        { name: \"4→5→6\", indices: [[], [], [], [], [4], [5]] },\n                        { name: \"3→4→5→6\", indices: [[], [], [], [3], [4], [5]] },\n                        { name: \"2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n                        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n                    ]);\n                    let synthboxFeedbackType = synthboxLegacyFeedbacks[synthboxLegacyFeedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"])].indices;\n                    if (synthboxFeedbackType != undefined) {\n                        this.feedbackType6Op = 0;\n                        this.customFeedbackType.set(synthboxFeedbackType);\n                    }\n                    else {\n                        this.feedbackType6Op = 1;\n                    }\n                }\n                if ((this.feedbackType6Op == 0) && (instrumentObject[\"customFeedback\"] != undefined)) {\n                    this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\n                }\n                else {\n                    this.customFeedbackType.fromPreset(this.feedbackType6Op);\n                }\n            }\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n            }\n            else {\n                this.feedbackAmplitude = 0;\n            }\n            for (let j = 0; j < Config.operatorCount + (this.type == 11 ? 2 : 0); j++) {\n                const operator = this.operators[j];\n                let operatorObject = undefined;\n                if (instrumentObject[\"operators\"] != undefined)\n                    operatorObject = instrumentObject[\"operators\"][j];\n                if (operatorObject == undefined)\n                    operatorObject = {};\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\n                if (operator.frequency == -1)\n                    operator.frequency = 0;\n                if (operatorObject[\"amplitude\"] != undefined) {\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n                }\n                else {\n                    operator.amplitude = 0;\n                }\n                if (operatorObject[\"waveform\"] != undefined) {\n                    if (format == \"goldbox\" && j > 3) {\n                        operator.waveform = 0;\n                        continue;\n                    }\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\n                    if (operator.waveform == -1) {\n                        if (operatorObject[\"waveform\"] == \"square\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\n                            operator.pulseWidth = 5;\n                        }\n                        else if (operatorObject[\"waveform\"] == \"rounded\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"quasi-sine\"].index;\n                        }\n                        else {\n                            operator.waveform = 0;\n                        }\n                    }\n                }\n                else {\n                    operator.waveform = 0;\n                }\n                if (operatorObject[\"pulseWidth\"] != undefined) {\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\n                }\n                else {\n                    operator.pulseWidth = 5;\n                }\n            }\n        }\n        else if (this.type == 9) {\n            if (instrumentObject[\"customChipWave\"]) {\n                for (let i = 0; i < 64; i++) {\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\n                }\n                let sum = 0.0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average = sum / this.customChipWave.length;\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n                this.customChipWaveIntegral[64] = 0.0;\n            }\n        }\n        else if (this.type == 10) {\n            if (instrumentObject[\"modChannels\"] != undefined) {\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\n                        this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\n                    if (instrumentObject[\"modEnvelopeNumbers\"] != undefined)\n                        this.modEnvelopeNumbers[mod] = instrumentObject[\"modEnvelopeNumbers\"][mod];\n                }\n            }\n        }\n        if (this.type != 10) {\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\n            }\n            else {\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12;\n            }\n            if (this.chord == Config.chords.dictionary[\"monophonic\"].index && instrumentObject[\"monoChordTone\"] != undefined) {\n                this.monoChordTone = instrumentObject[\"monoChordTone\"];\n            }\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\n            }\n            else {\n                this.fastTwoNoteArp = useFastTwoNoteArp;\n            }\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\n            }\n            else {\n                this.clicklessTransition = false;\n            }\n            if (instrumentObject[\"aliases\"] != undefined) {\n                this.aliases = instrumentObject[\"aliases\"];\n            }\n            else {\n                if (format == \"modbox\") {\n                    this.effects = (this.effects | (1 << 3));\n                    this.aliases = true;\n                    this.distortion = 0;\n                }\n                else {\n                    this.aliases = false;\n                }\n            }\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\n            }\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\n            }\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\n            }\n            if (instrumentObject[\"noteFilter\"] != undefined) {\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n            }\n            else {\n                this.noteFilter.reset();\n            }\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\n                    this.noteSubFilters[i] = new FilterSettings();\n                    this.noteSubFilters[i].fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\n                }\n            }\n            if (instrumentObject[\"eqFilterType\"] != undefined) {\n                this.eqFilterType = instrumentObject[\"eqFilterType\"];\n            }\n            if (instrumentObject[\"eqSimpleCut\"] != undefined) {\n                this.eqFilterSimpleCut = instrumentObject[\"eqSimpleCut\"];\n            }\n            if (instrumentObject[\"eqSimplePeak\"] != undefined) {\n                this.eqFilterSimplePeak = instrumentObject[\"eqSimplePeak\"];\n            }\n            if (Array.isArray(instrumentObject[\"eqFilter\"])) {\n                this.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\n            }\n            else {\n                this.eqFilter.reset();\n                const legacySettings = {};\n                const filterCutoffMaxHz = 8000;\n                const filterCutoffRange = 11;\n                const filterResonanceRange = 8;\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n                }\n                else {\n                    legacySettings.filterCutoff = (this.type == 0) ? 6 : 10;\n                }\n                if (instrumentObject[\"filterResonance\"] != undefined) {\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n                }\n                else {\n                    legacySettings.filterResonance = 0;\n                }\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n                if (Array.isArray(instrumentObject[\"operators\"])) {\n                    legacySettings.operatorEnvelopes = [];\n                    for (let j = 0; j < Config.operatorCount + (this.type == 11 ? 2 : 0); j++) {\n                        let envelope;\n                        if (instrumentObject[\"operators\"][j] != undefined) {\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n                        }\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n                    }\n                }\n                if (instrumentObject[\"filter\"] != undefined) {\n                    const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];\n                    const legacyToEnvelope = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                    const filterNames = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n                    const oldFilterNames = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\n                    let legacyFilter = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n                    if (legacyFilter == -1)\n                        legacyFilter = 0;\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n                    legacySettings.filterResonance = 0;\n                }\n                this.convertLegacySettings(legacySettings, true);\n            }\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"eqSubFilters\" + i])) {\n                    this.eqSubFilters[i] = new FilterSettings();\n                    this.eqSubFilters[i].fromJsonObject(instrumentObject[\"eqSubFilters\" + i]);\n                }\n            }\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\n                const envelopeArray = instrumentObject[\"envelopes\"];\n                for (let i = 0; i < envelopeArray.length; i++) {\n                    if (this.envelopeCount >= Config.maxEnvelopeCount)\n                        break;\n                    const tempEnvelope = new EnvelopeSettings(this.isNoiseInstrument);\n                    tempEnvelope.fromJsonObject(envelopeArray[i], format);\n                    let pitchEnvelopeStart;\n                    if (instrumentObject[\"pitchEnvelopeStart\"] != undefined && instrumentObject[\"pitchEnvelopeStart\"] != null) {\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\"];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeStart\" + i] != undefined && instrumentObject[\"pitchEnvelopeStart\" + i] != undefined) {\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\" + i];\n                    }\n                    else {\n                        pitchEnvelopeStart = tempEnvelope.pitchEnvelopeStart;\n                    }\n                    let pitchEnvelopeEnd;\n                    if (instrumentObject[\"pitchEnvelopeEnd\"] != undefined && instrumentObject[\"pitchEnvelopeEnd\"] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\"];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeEnd\" + i] != undefined && instrumentObject[\"pitchEnvelopeEnd\" + i] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\" + i];\n                    }\n                    else {\n                        pitchEnvelopeEnd = tempEnvelope.pitchEnvelopeEnd;\n                    }\n                    let envelopeInverse;\n                    if (instrumentObject[\"envelopeInverse\" + i] != undefined && instrumentObject[\"envelopeInverse\" + i] != null) {\n                        envelopeInverse = instrumentObject[\"envelopeInverse\" + i];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeInverse\"] != undefined && instrumentObject[\"pitchEnvelopeInverse\"] != null && Config.envelopes[tempEnvelope.envelope].name == \"pitch\") {\n                        envelopeInverse = instrumentObject[\"pitchEnvelopeInverse\"];\n                    }\n                    else {\n                        envelopeInverse = tempEnvelope.inverse;\n                    }\n                    let discreteEnvelope;\n                    if (instrumentObject[\"discreteEnvelope\"] != undefined) {\n                        discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\n                    }\n                    else {\n                        discreteEnvelope = tempEnvelope.discrete;\n                    }\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, tempEnvelope.perEnvelopeSpeed, tempEnvelope.perEnvelopeLowerBound, tempEnvelope.perEnvelopeUpperBound, tempEnvelope.steps, tempEnvelope.seed, tempEnvelope.waveform, discreteEnvelope);\n                }\n            }\n        }\n        if (type === 0) {\n            if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\n                this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\n                this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\n                this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\n                this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\n                this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\n                this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\n            }\n            else {\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveStartOffset = 0;\n            }\n        }\n    }\n    getLargestControlPointCount(forNoteFilter) {\n        let largest;\n        if (forNoteFilter) {\n            largest = this.noteFilter.controlPointCount;\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i].controlPointCount > largest)\n                    largest = this.noteSubFilters[i].controlPointCount;\n            }\n        }\n        else {\n            largest = this.eqFilter.controlPointCount;\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (this.eqSubFilters[i] != null && this.eqSubFilters[i].controlPointCount > largest)\n                    largest = this.eqSubFilters[i].controlPointCount;\n            }\n        }\n        return largest;\n    }\n    static frequencyFromPitch(pitch) {\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\n    }\n    addEnvelope(target, index, envelope, newEnvelopes, start = 0, end = -1, inverse = false, perEnvelopeSpeed = -1, perEnvelopeLowerBound = 0, perEnvelopeUpperBound = 1, steps = 2, seed = 2, waveform = 0, discrete = false) {\n        end = end != -1 ? end : this.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch;\n        perEnvelopeSpeed = perEnvelopeSpeed != -1 ? perEnvelopeSpeed : newEnvelopes ? 1 : Config.envelopes[envelope].speed;\n        let makeEmpty = false;\n        if (!this.supportsEnvelopeTarget(target, index))\n            makeEmpty = true;\n        if (this.envelopeCount >= Config.maxEnvelopeCount)\n            throw new Error();\n        while (this.envelopes.length <= this.envelopeCount)\n            this.envelopes[this.envelopes.length] = new EnvelopeSettings(this.isNoiseInstrument);\n        const envelopeSettings = this.envelopes[this.envelopeCount];\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\n        envelopeSettings.index = makeEmpty ? 0 : index;\n        if (!newEnvelopes) {\n            envelopeSettings.envelope = clamp(0, Config.newEnvelopes.length, Config.envelopes[envelope].type);\n        }\n        else {\n            envelopeSettings.envelope = envelope;\n        }\n        envelopeSettings.pitchEnvelopeStart = start;\n        envelopeSettings.pitchEnvelopeEnd = end;\n        envelopeSettings.inverse = inverse;\n        envelopeSettings.perEnvelopeSpeed = perEnvelopeSpeed;\n        envelopeSettings.perEnvelopeLowerBound = perEnvelopeLowerBound;\n        envelopeSettings.perEnvelopeUpperBound = perEnvelopeUpperBound;\n        envelopeSettings.steps = steps;\n        envelopeSettings.seed = seed;\n        envelopeSettings.waveform = waveform;\n        envelopeSettings.discrete = discrete;\n        this.envelopeCount++;\n    }\n    supportsEnvelopeTarget(target, index) {\n        const automationTarget = Config.instrumentAutomationTargets[target];\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\n            return false;\n        }\n        if (index >= automationTarget.maxCount) {\n            return false;\n        }\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n            return false;\n        }\n        if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\n            return false;\n        }\n        if (automationTarget.name == \"arpeggioSpeed\") {\n            return effectsIncludeChord(this.effects) && this.chord == Config.chords.dictionary[\"arpeggio\"].index;\n        }\n        if (automationTarget.isFilter) {\n            let useControlPointCount = this.noteFilter.controlPointCount;\n            if (this.noteFilterType)\n                useControlPointCount = 1;\n            if (index >= useControlPointCount)\n                return false;\n        }\n        if ((automationTarget.name == \"operatorFrequency\") || (automationTarget.name == \"operatorAmplitude\")) {\n            if (index >= 4 + (this.type == 11 ? 2 : 0))\n                return false;\n        }\n        return true;\n    }\n    clearInvalidEnvelopeTargets() {\n        for (let envelopeIndex = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n            const target = this.envelopes[envelopeIndex].target;\n            const index = this.envelopes[envelopeIndex].index;\n            if (!this.supportsEnvelopeTarget(target, index)) {\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                this.envelopes[envelopeIndex].index = 0;\n            }\n        }\n    }\n    getTransition() {\n        return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :\n            (this.type == 10 ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\n    }\n    getFadeInSeconds() {\n        return (this.type == 4) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\n    }\n    getFadeOutTicks() {\n        return (this.type == 4) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut);\n    }\n    getChord() {\n        return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n    }\n    getDrumsetEnvelope(pitch) {\n        if (this.type != 4)\n            throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\n    }\n}\nexport class Channel {\n    constructor() {\n        this.octave = 0;\n        this.instruments = [];\n        this.patterns = [];\n        this.bars = [];\n        this.muted = false;\n        this.name = \"\";\n    }\n}\nexport class Song {\n    constructor(string) {\n        this.scaleCustom = [];\n        this.channels = [];\n        this.limitDecay = 4.0;\n        this.limitRise = 4000.0;\n        this.compressionThreshold = 1.0;\n        this.limitThreshold = 1.0;\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.masterGain = 1.0;\n        this.inVolumeCap = 0.0;\n        this.outVolumeCap = 0.0;\n        this.eqFilter = new FilterSettings();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        this.eqSubFilters = [];\n        this.getNewNoteVolume = (isMod, modChannel, modInstrument, modCount) => {\n            if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n                return Config.noteSizeMax;\n            else {\n                modCount = Config.modCount - modCount - 1;\n                const instrument = this.channels[modChannel].instruments[modInstrument];\n                let vol = Config.modulators[instrument.modulators[modCount]].newNoteVol;\n                let currentIndex = instrument.modulators[modCount];\n                let tempoIndex = Config.modulators.dictionary[\"tempo\"].index;\n                if (currentIndex == tempoIndex)\n                    vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\n                if (!Config.modulators[currentIndex].forSong && instrument.modInstruments[modCount] < this.channels[instrument.modChannels[modCount]].instruments.length) {\n                    let chorusIndex = Config.modulators.dictionary[\"chorus\"].index;\n                    let reverbIndex = Config.modulators.dictionary[\"reverb\"].index;\n                    let panningIndex = Config.modulators.dictionary[\"pan\"].index;\n                    let panDelayIndex = Config.modulators.dictionary[\"pan delay\"].index;\n                    let distortionIndex = Config.modulators.dictionary[\"distortion\"].index;\n                    let detuneIndex = Config.modulators.dictionary[\"detune\"].index;\n                    let vibratoDepthIndex = Config.modulators.dictionary[\"vibrato depth\"].index;\n                    let vibratoSpeedIndex = Config.modulators.dictionary[\"vibrato speed\"].index;\n                    let vibratoDelayIndex = Config.modulators.dictionary[\"vibrato delay\"].index;\n                    let arpSpeedIndex = Config.modulators.dictionary[\"arp speed\"].index;\n                    let bitCrushIndex = Config.modulators.dictionary[\"bit crush\"].index;\n                    let freqCrushIndex = Config.modulators.dictionary[\"freq crush\"].index;\n                    let echoIndex = Config.modulators.dictionary[\"echo\"].index;\n                    let echoDelayIndex = Config.modulators.dictionary[\"echo delay\"].index;\n                    let pitchShiftIndex = Config.modulators.dictionary[\"pitch shift\"].index;\n                    let ringModIndex = Config.modulators.dictionary[\"ring modulation\"].index;\n                    let ringModHertzIndex = Config.modulators.dictionary[\"ring mod hertz\"].index;\n                    let granularIndex = Config.modulators.dictionary[\"granular\"].index;\n                    let grainAmountIndex = Config.modulators.dictionary[\"grain freq\"].index;\n                    let grainSizeIndex = Config.modulators.dictionary[\"grain size\"].index;\n                    let grainRangeIndex = Config.modulators.dictionary[\"grain range\"].index;\n                    let envSpeedIndex = Config.modulators.dictionary[\"envelope speed\"].index;\n                    let perEnvSpeedIndex = Config.modulators.dictionary[\"individual envelope speed\"].index;\n                    let perEnvLowerIndex = Config.modulators.dictionary[\"individual envelope lower bound\"].index;\n                    let perEnvUpperIndex = Config.modulators.dictionary[\"individual envelope upper bound\"].index;\n                    let instrumentIndex = instrument.modInstruments[modCount];\n                    switch (currentIndex) {\n                        case chorusIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].chorus - Config.modulators[chorusIndex].convertRealFactor;\n                            break;\n                        case reverbIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].reverb - Config.modulators[reverbIndex].convertRealFactor;\n                            break;\n                        case panningIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].pan - Config.modulators[panningIndex].convertRealFactor;\n                            break;\n                        case panDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].panDelay - Config.modulators[panDelayIndex].convertRealFactor;\n                            break;\n                        case distortionIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].distortion - Config.modulators[distortionIndex].convertRealFactor;\n                            break;\n                        case detuneIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].detune;\n                            break;\n                        case vibratoDepthIndex:\n                            vol = Math.round(this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].vibratoDepth * 25 - Config.modulators[vibratoDepthIndex].convertRealFactor);\n                            break;\n                        case vibratoSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].vibratoSpeed - Config.modulators[vibratoSpeedIndex].convertRealFactor;\n                            break;\n                        case vibratoDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].vibratoDelay - Config.modulators[vibratoDelayIndex].convertRealFactor;\n                            break;\n                        case arpSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].arpeggioSpeed - Config.modulators[arpSpeedIndex].convertRealFactor;\n                            break;\n                        case bitCrushIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].bitcrusherQuantization - Config.modulators[bitCrushIndex].convertRealFactor;\n                            break;\n                        case freqCrushIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].bitcrusherFreq - Config.modulators[freqCrushIndex].convertRealFactor;\n                            break;\n                        case echoIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].echoSustain - Config.modulators[echoIndex].convertRealFactor;\n                            break;\n                        case echoDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].echoDelay - Config.modulators[echoDelayIndex].convertRealFactor;\n                            break;\n                        case pitchShiftIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].pitchShift;\n                            break;\n                        case ringModIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].ringModulation - Config.modulators[ringModIndex].convertRealFactor;\n                            break;\n                        case ringModHertzIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].ringModulationHz - Config.modulators[ringModHertzIndex].convertRealFactor;\n                            break;\n                        case granularIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].granular - Config.modulators[granularIndex].convertRealFactor;\n                            break;\n                        case grainAmountIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].grainAmounts - Config.modulators[grainAmountIndex].convertRealFactor;\n                            break;\n                        case grainSizeIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].grainSize - Config.modulators[grainSizeIndex].convertRealFactor;\n                            break;\n                        case grainRangeIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].grainRange - Config.modulators[grainRangeIndex].convertRealFactor;\n                            break;\n                        case envSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].envelopeSpeed - Config.modulators[envSpeedIndex].convertRealFactor;\n                            break;\n                        case perEnvSpeedIndex:\n                            vol = Config.perEnvelopeSpeedToIndices[this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeSpeed] - Config.modulators[perEnvSpeedIndex].convertRealFactor;\n                            break;\n                        case perEnvLowerIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeLowerBound - Config.modulators[perEnvLowerIndex].convertRealFactor;\n                            break;\n                        case perEnvUpperIndex:\n                            vol = this.channels[instrument.modChannels[modCount]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeUpperBound - Config.modulators[perEnvUpperIndex].convertRealFactor;\n                            break;\n                    }\n                }\n                if (vol != undefined)\n                    return vol;\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        this.getVolumeCap = (isMod, modChannel, modInstrument, modCount) => {\n            if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n                return Config.noteSizeMax;\n            else {\n                modCount = Config.modCount - modCount - 1;\n                let instrument = this.channels[modChannel].instruments[modInstrument];\n                let modulator = Config.modulators[instrument.modulators[modCount]];\n                let cap = modulator.maxRawVol;\n                if (cap != undefined) {\n                    if (modulator.name == \"eq filter\" || modulator.name == \"note filter\" || modulator.name == \"song eq\") {\n                        cap = Config.filterMorphCount - 1;\n                        if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\n                            cap = Config.filterFreqRange;\n                        }\n                        else if (instrument.modFilterTypes[modCount] > 0) {\n                            cap = Config.filterGainRange;\n                        }\n                    }\n                    return cap;\n                }\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        this.getVolumeCapForSetting = (isMod, modSetting, filterType) => {\n            if (!isMod)\n                return Config.noteSizeMax;\n            else {\n                let cap = Config.modulators[modSetting].maxRawVol;\n                if (cap != undefined) {\n                    if (filterType != undefined && (Config.modulators[modSetting].name == \"eq filter\" || Config.modulators[modSetting].name == \"note filter\" || Config.modulators[modSetting].name == \"song eq\")) {\n                        cap = Config.filterMorphCount - 1;\n                        if (filterType > 0 && filterType % 2) {\n                            cap = Config.filterFreqRange;\n                        }\n                        else if (filterType > 0) {\n                            cap = Config.filterGainRange;\n                        }\n                    }\n                    return cap;\n                }\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        if (string != undefined) {\n            this.fromBase64String(string);\n        }\n        else {\n            this.initToDefault(true);\n        }\n    }\n    getChannelCount() {\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\n    }\n    getMaxInstrumentsPerChannel() {\n        return Math.max(this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin, this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n    }\n    getMaxInstrumentsPerPattern(channelIndex) {\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n    }\n    getMaxInstrumentsPerPatternForChannel(channel) {\n        return this.layeredInstruments\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n            : 1;\n    }\n    getChannelIsNoise(channelIndex) {\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\n    }\n    getChannelIsMod(channelIndex) {\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\n    }\n    initToDefault(andResetChannels = true) {\n        this.scale = 0;\n        this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\n        this.key = 0;\n        this.octave = 0;\n        this.loopStart = 0;\n        this.loopLength = 4;\n        this.tempo = 150;\n        this.reverb = 0;\n        this.beatsPerBar = 8;\n        this.barCount = 16;\n        this.patternsPerChannel = 8;\n        this.rhythm = 1;\n        this.layeredInstruments = false;\n        this.patternInstruments = false;\n        this.eqFilter.reset();\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            this.eqSubFilters[i] = null;\n        }\n        this.title = \"Untitled\";\n        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n        if (andResetChannels) {\n            this.pitchChannelCount = 3;\n            this.noiseChannelCount = 1;\n            this.modChannelCount = 1;\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                if (this.channels.length <= channelIndex) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                const channel = this.channels[channelIndex];\n                channel.octave = Math.max(3 - channelIndex, 0);\n                for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\n                    if (channel.patterns.length <= pattern) {\n                        channel.patterns[pattern] = new Pattern();\n                    }\n                    else {\n                        channel.patterns[pattern].reset();\n                    }\n                }\n                channel.patterns.length = this.patternsPerChannel;\n                for (let instrument = 0; instrument < Config.instrumentCountMin; instrument++) {\n                    if (channel.instruments.length <= instrument) {\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\n                    }\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? 10 : (isNoiseChannel ? 2 : 0), isNoiseChannel, isModChannel);\n                }\n                channel.instruments.length = Config.instrumentCountMin;\n                for (let bar = 0; bar < this.barCount; bar++) {\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n            this.channels.length = this.getChannelCount();\n        }\n    }\n    toBase64String() {\n        let bits;\n        let buffer = [];\n        buffer.push(Song._variant);\n        buffer.push(base64IntToCharCode[Song._latestSlarmoosBoxVersion]);\n        buffer.push(78);\n        var encodedSongTitle = encodeURIComponent(this.title);\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\n        for (let i = 0; i < encodedSongTitle.length; i++) {\n            buffer.push(encodedSongTitle.charCodeAt(i));\n        }\n        buffer.push(110, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\n        buffer.push(115, base64IntToCharCode[this.scale]);\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                buffer.push(base64IntToCharCode[this.scaleCustom[i] ? 1 : 0]);\n            }\n        }\n        buffer.push(107, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\n        buffer.push(108, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n        buffer.push(101, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n        buffer.push(116, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\n        buffer.push(97, base64IntToCharCode[this.beatsPerBar - 1]);\n        buffer.push(103, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n        buffer.push(106, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n        buffer.push(114, base64IntToCharCode[this.rhythm]);\n        buffer.push(79);\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]);\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]);\n            buffer.push(base64IntToCharCode[this.limitDecay]);\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]);\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]);\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]);\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]);\n        }\n        else {\n            buffer.push(base64IntToCharCode[0x3f]);\n        }\n        buffer.push(99);\n        if (this.eqFilter == null) {\n            buffer.push(base64IntToCharCode[0]);\n            console.log(\"Null EQ filter settings detected in toBase64String for song\");\n        }\n        else {\n            buffer.push(base64IntToCharCode[this.eqFilter.controlPointCount]);\n            for (let j = 0; j < this.eqFilter.controlPointCount; j++) {\n                const point = this.eqFilter.controlPoints[j];\n                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n            }\n        }\n        let usingSubFilterBitfield = 0;\n        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n            usingSubFilterBitfield |= (+(this.eqSubFilters[j + 1] != null) << j);\n        }\n        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n            if (usingSubFilterBitfield & (1 << j)) {\n                buffer.push(base64IntToCharCode[this.eqSubFilters[j + 1].controlPointCount]);\n                for (let k = 0; k < this.eqSubFilters[j + 1].controlPointCount; k++) {\n                    const point = this.eqSubFilters[j + 1].controlPoints[k];\n                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                }\n            }\n        }\n        buffer.push(85);\n        for (let channel = 0; channel < this.getChannelCount(); channel++) {\n            var encodedChannelName = encodeURIComponent(this.channels[channel].name);\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\n            for (let i = 0; i < encodedChannelName.length; i++) {\n                buffer.push(encodedChannelName.charCodeAt(i));\n            }\n        }\n        buffer.push(105, base64IntToCharCode[(this.layeredInstruments << 1) | this.patternInstruments]);\n        if (this.layeredInstruments || this.patternInstruments) {\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n            }\n        }\n        buffer.push(111);\n        for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n        }\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                const instrument = this.channels[channelIndex].instruments[i];\n                buffer.push(84, base64IntToCharCode[instrument.type]);\n                buffer.push(118, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\n                buffer.push(117, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n                buffer.push(102);\n                buffer.push(base64IntToCharCode[+instrument.eqFilterType]);\n                if (instrument.eqFilterType) {\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);\n                }\n                else {\n                    if (instrument.eqFilter == null) {\n                        buffer.push(base64IntToCharCode[0]);\n                        console.log(\"Null EQ filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                    }\n                    else {\n                        buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);\n                        for (let j = 0; j < instrument.eqFilter.controlPointCount; j++) {\n                            const point = instrument.eqFilter.controlPoints[j];\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                        }\n                    }\n                    let usingSubFilterBitfield = 0;\n                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                        usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);\n                    }\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                        if (usingSubFilterBitfield & (1 << j)) {\n                            buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1].controlPointCount]);\n                            for (let k = 0; k < instrument.eqSubFilters[j + 1].controlPointCount; k++) {\n                                const point = instrument.eqSubFilters[j + 1].controlPoints[k];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                    }\n                }\n                buffer.push(113, base64IntToCharCode[(instrument.effects >> 12) & 63], base64IntToCharCode[(instrument.effects >> 6) & 63], base64IntToCharCode[instrument.effects & 63]);\n                if (effectsIncludeNoteFilter(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\n                    if (instrument.noteFilterType) {\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\n                    }\n                    else {\n                        if (instrument.noteFilter == null) {\n                            buffer.push(base64IntToCharCode[0]);\n                            console.log(\"Null note filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                        }\n                        else {\n                            buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n                            for (let j = 0; j < instrument.noteFilter.controlPointCount; j++) {\n                                const point = instrument.noteFilter.controlPoints[j];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                        let usingSubFilterBitfield = 0;\n                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                            usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\n                        }\n                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                            if (usingSubFilterBitfield & (1 << j)) {\n                                buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1].controlPointCount]);\n                                for (let k = 0; k < instrument.noteSubFilters[j + 1].controlPointCount; k++) {\n                                    const point = instrument.noteSubFilters[j + 1].controlPoints[k];\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (effectsIncludeTransition(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.transition]);\n                }\n                if (effectsIncludeChord(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chord]);\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]);\n                    }\n                    if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.monoChordTone]);\n                    }\n                }\n                if (effectsIncludePitchShift(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\n                }\n                if (effectsIncludeDetune(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\n                }\n                if (effectsIncludeVibrato(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\n                    if (instrument.vibrato == Config.vibratos.length) {\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\n                    }\n                }\n                if (effectsIncludeDistortion(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.distortion]);\n                    buffer.push(base64IntToCharCode[+instrument.aliases]);\n                }\n                if (effectsIncludeBitcrusher(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\n                }\n                if (effectsIncludePanning(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\n                    buffer.push(base64IntToCharCode[instrument.panDelay]);\n                }\n                if (effectsIncludeChorus(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chorus]);\n                }\n                if (effectsIncludeEcho(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\n                }\n                if (effectsIncludeReverb(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.reverb]);\n                }\n                if (effectsIncludeGranular(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.granular]);\n                    buffer.push(base64IntToCharCode[instrument.grainSize]);\n                    buffer.push(base64IntToCharCode[instrument.grainAmounts]);\n                    buffer.push(base64IntToCharCode[instrument.grainRange]);\n                }\n                if (effectsIncludeRingModulation(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.ringModulation]);\n                    buffer.push(base64IntToCharCode[instrument.ringModulationHz]);\n                    buffer.push(base64IntToCharCode[instrument.ringModWaveformIndex]);\n                    buffer.push(base64IntToCharCode[(instrument.ringModPulseWidth)]);\n                    buffer.push(base64IntToCharCode[(instrument.ringModHzOffset - Config.rmHzOffsetMin) >> 6], base64IntToCharCode[(instrument.ringModHzOffset - Config.rmHzOffsetMin) & 0x3F]);\n                }\n                if (instrument.type != 4) {\n                    buffer.push(100, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\n                }\n                if (instrument.type == 5 || instrument.type == 7) {\n                    buffer.push(72);\n                    const harmonicsBits = new BitFieldWriter();\n                    for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n                    }\n                    harmonicsBits.encodeBase64(buffer);\n                }\n                if (instrument.type == 0) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(121);\n                    const encodedLoopMode = ((clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\n                        | (instrument.isUsingAdvancedLoopControls ? 1 : 0));\n                    buffer.push(base64IntToCharCode[encodedLoopMode]);\n                    const encodedReleaseMode = ((clamp(0, 31 + 1, 0) << 1)\n                        | (instrument.chipWavePlayBackwards ? 1 : 0));\n                    buffer.push(base64IntToCharCode[encodedReleaseMode]);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopStart);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopEnd);\n                    encode32BitNumber(buffer, instrument.chipWaveStartOffset);\n                }\n                else if (instrument.type == 1 || instrument.type == 11) {\n                    if (instrument.type == 1) {\n                        buffer.push(65, base64IntToCharCode[instrument.algorithm]);\n                        buffer.push(70, base64IntToCharCode[instrument.feedbackType]);\n                    }\n                    else {\n                        buffer.push(65, base64IntToCharCode[instrument.algorithm6Op]);\n                        if (instrument.algorithm6Op == 0) {\n                            buffer.push(67, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\n                            buffer.push(113);\n                            for (let o = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\n                                for (let j = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\n                                }\n                                buffer.push(82);\n                            }\n                            buffer.push(113);\n                        }\n                        buffer.push(70, base64IntToCharCode[instrument.feedbackType6Op]);\n                        if (instrument.feedbackType6Op == 0) {\n                            buffer.push(113);\n                            for (let o = 0; o < instrument.customFeedbackType.indices.length; o++) {\n                                for (let j = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\n                                }\n                                buffer.push(82);\n                            }\n                            buffer.push(113);\n                        }\n                    }\n                    buffer.push(66, base64IntToCharCode[instrument.feedbackAmplitude]);\n                    buffer.push(81);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n                    }\n                    buffer.push(80);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n                    }\n                    buffer.push(82);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\n                        if (instrument.operators[o].waveform == 2) {\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\n                        }\n                    }\n                }\n                else if (instrument.type == 9) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(77);\n                    for (let j = 0; j < 64; j++) {\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24)]);\n                    }\n                }\n                else if (instrument.type == 2) {\n                    buffer.push(119, base64IntToCharCode[instrument.chipNoise]);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 3) {\n                    buffer.push(83);\n                    const spectrumBits = new BitFieldWriter();\n                    for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 4) {\n                    buffer.push(122);\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n                    }\n                    buffer.push(83);\n                    const spectrumBits = new BitFieldWriter();\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n                        }\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 5) {\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 6) {\n                    buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 8) {\n                    buffer.push(120, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\n                    buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                }\n                else if (instrument.type == 7) {\n                    if (Config.stringSustainRange > 0x20 || 2 > 2) {\n                        throw new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(73, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\n                }\n                else if (instrument.type == 10) {\n                }\n                else {\n                    throw new Error(\"Unknown instrument type.\");\n                }\n                buffer.push(69, base64IntToCharCode[instrument.envelopeCount]);\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\n                for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"pitch\") {\n                        if (!instrument.isNoiseInstrument) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart & 0x3f]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd & 0x3f]);\n                        }\n                        else {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd]);\n                        }\n                    }\n                    else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"random\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].seed]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                    }\n                    else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"lfo\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                        if (instrument.envelopes[envelopeIndex].waveform == 5 || instrument.envelopes[envelopeIndex].waveform == 6) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        }\n                    }\n                    let checkboxValues = +instrument.envelopes[envelopeIndex].discrete;\n                    checkboxValues = checkboxValues << 1;\n                    checkboxValues += +instrument.envelopes[envelopeIndex].inverse;\n                    buffer.push(base64IntToCharCode[checkboxValues] ? base64IntToCharCode[checkboxValues] : base64IntToCharCode[0]);\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"pitch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"note size\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"punch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"none\") {\n                        buffer.push(base64IntToCharCode[Config.perEnvelopeSpeedToIndices[instrument.envelopes[envelopeIndex].perEnvelopeSpeed]]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeLowerBound * 10]);\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeUpperBound * 10]);\n                }\n            }\n        }\n        buffer.push(98);\n        bits = new BitFieldWriter();\n        let neededBits = 0;\n        while ((1 << neededBits) < this.patternsPerChannel + 1)\n            neededBits++;\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++)\n            for (let i = 0; i < this.barCount; i++) {\n                bits.write(neededBits, this.channels[channelIndex].bars[i]);\n            }\n        bits.encodeBase64(buffer);\n        buffer.push(112);\n        bits = new BitFieldWriter();\n        const shapeBits = new BitFieldWriter();\n        const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel = this.channels[channelIndex];\n            const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);\n            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n            const isModChannel = this.getChannelIsMod(channelIndex);\n            const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n            const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);\n            if (isModChannel) {\n                const neededModInstrumentIndexBits = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    let instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                    for (let mod = 0; mod < Config.modCount; mod++) {\n                        const modChannel = instrument.modChannels[mod];\n                        const modInstrument = instrument.modInstruments[mod];\n                        const modSetting = instrument.modulators[mod];\n                        const modFilter = instrument.modFilterTypes[mod];\n                        const modEnvelope = instrument.modEnvelopeNumbers[mod];\n                        let status = Config.modulators[modSetting].forSong ? 2 : 0;\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\n                            status = 3;\n                        bits.write(2, status);\n                        if (status == 0 || status == 1) {\n                            bits.write(8, modChannel);\n                            bits.write(neededModInstrumentIndexBits, modInstrument);\n                        }\n                        if (status != 3) {\n                            bits.write(6, modSetting);\n                        }\n                        if (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\") {\n                            bits.write(6, modFilter);\n                        }\n                        if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\") {\n                            bits.write(6, modEnvelope);\n                        }\n                    }\n                }\n            }\n            const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\n            let lastPitch = (isNoiseChannel ? 4 : octaveOffset);\n            const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n            const recentShapes = [];\n            for (let i = 0; i < recentPitches.length; i++) {\n                recentPitches[i] += octaveOffset;\n            }\n            for (const pattern of channel.patterns) {\n                if (this.patternInstruments) {\n                    const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n                    for (let i = 0; i < instrumentCount; i++) {\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n                    }\n                }\n                if (pattern.notes.length > 0) {\n                    bits.write(1, 1);\n                    let curPart = 0;\n                    for (const note of pattern.notes) {\n                        if (note.start < curPart && isModChannel) {\n                            bits.write(2, 0);\n                            bits.write(1, 1);\n                            bits.writePartDuration(curPart - note.start);\n                        }\n                        if (note.start > curPart) {\n                            bits.write(2, 0);\n                            if (isModChannel)\n                                bits.write(1, 0);\n                            bits.writePartDuration(note.start - curPart);\n                        }\n                        shapeBits.clear();\n                        if (note.pitches.length == 1) {\n                            shapeBits.write(1, 0);\n                        }\n                        else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(3, note.pitches.length - 2);\n                        }\n                        shapeBits.writePinCount(note.pins.length - 1);\n                        if (!isModChannel) {\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size);\n                        }\n                        else {\n                            shapeBits.write(9, note.pins[0].size);\n                        }\n                        let shapePart = 0;\n                        let startPitch = note.pitches[0];\n                        let currentPitch = startPitch;\n                        const pitchBends = [];\n                        for (let i = 1; i < note.pins.length; i++) {\n                            const pin = note.pins[i];\n                            const nextPitch = startPitch + pin.interval;\n                            if (currentPitch != nextPitch) {\n                                shapeBits.write(1, 1);\n                                pitchBends.push(nextPitch);\n                                currentPitch = nextPitch;\n                            }\n                            else {\n                                shapeBits.write(1, 0);\n                            }\n                            shapeBits.writePartDuration(pin.time - shapePart);\n                            shapePart = pin.time;\n                            if (!isModChannel) {\n                                shapeBits.write(bitsPerNoteSize, pin.size);\n                            }\n                            else {\n                                shapeBits.write(9, pin.size);\n                            }\n                        }\n                        const shapeString = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n                        const shapeIndex = recentShapes.indexOf(shapeString);\n                        if (shapeIndex == -1) {\n                            bits.write(2, 1);\n                            bits.concat(shapeBits);\n                        }\n                        else {\n                            bits.write(1, 1);\n                            bits.writeLongTail(0, 0, shapeIndex);\n                            recentShapes.splice(shapeIndex, 1);\n                        }\n                        recentShapes.unshift(shapeString);\n                        if (recentShapes.length > 10)\n                            recentShapes.pop();\n                        const allPitches = note.pitches.concat(pitchBends);\n                        for (let i = 0; i < allPitches.length; i++) {\n                            const pitch = allPitches[i];\n                            const pitchIndex = recentPitches.indexOf(pitch);\n                            if (pitchIndex == -1) {\n                                let interval = 0;\n                                let pitchIter = lastPitch;\n                                if (pitchIter < pitch) {\n                                    while (pitchIter != pitch) {\n                                        pitchIter++;\n                                        if (recentPitches.indexOf(pitchIter) == -1)\n                                            interval++;\n                                    }\n                                }\n                                else {\n                                    while (pitchIter != pitch) {\n                                        pitchIter--;\n                                        if (recentPitches.indexOf(pitchIter) == -1)\n                                            interval--;\n                                    }\n                                }\n                                bits.write(1, 0);\n                                bits.writePitchInterval(interval);\n                            }\n                            else {\n                                bits.write(1, 1);\n                                bits.write(4, pitchIndex);\n                                recentPitches.splice(pitchIndex, 1);\n                            }\n                            recentPitches.unshift(pitch);\n                            if (recentPitches.length > 16)\n                                recentPitches.pop();\n                            if (i == note.pitches.length - 1) {\n                                lastPitch = note.pitches[0];\n                            }\n                            else {\n                                lastPitch = pitch;\n                            }\n                        }\n                        if (note.start == 0) {\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\n                        }\n                        curPart = note.end;\n                    }\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                        bits.write(2, 0);\n                        if (isModChannel)\n                            bits.write(1, 0);\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\n                    }\n                }\n                else {\n                    bits.write(1, 0);\n                }\n            }\n        }\n        let stringLength = bits.lengthBase64();\n        let digits = [];\n        while (stringLength > 0) {\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n            stringLength = stringLength >> 6;\n        }\n        buffer.push(base64IntToCharCode[digits.length]);\n        Array.prototype.push.apply(buffer, digits);\n        bits.encodeBase64(buffer);\n        const maxApplyArgs = 64000;\n        let customSamplesStr = \"\";\n        if (EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0) {\n            customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\");\n        }\n        if (buffer.length < maxApplyArgs) {\n            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\n        }\n        else {\n            let result = \"\";\n            for (let i = 0; i < buffer.length; i += maxApplyArgs) {\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n            }\n            return result + customSamplesStr;\n        }\n    }\n    static _envelopeFromLegacyIndex(legacyIndex) {\n        if (legacyIndex == 0)\n            legacyIndex = 1;\n        else if (legacyIndex == 1)\n            legacyIndex = 0;\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n    }\n    fromBase64String(compressed, jsonFormat = \"auto\") {\n        if (compressed == null || compressed == \"\") {\n            Song._clearSamples();\n            this.initToDefault(true);\n            return;\n        }\n        let charIndex = 0;\n        while (compressed.charCodeAt(charIndex) <= 32)\n            charIndex++;\n        if (compressed.charCodeAt(charIndex) == 35)\n            charIndex++;\n        if (compressed.charCodeAt(charIndex) == 123) {\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)), jsonFormat);\n            return;\n        }\n        const variantTest = compressed.charCodeAt(charIndex);\n        let fromBeepBox = false;\n        let fromJummBox = false;\n        let fromGoldBox = false;\n        let fromUltraBox = false;\n        let fromSlarmoosBox = false;\n        if (variantTest == 0x6A) {\n            fromJummBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x67) {\n            fromGoldBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x75) {\n            fromUltraBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x64) {\n            fromJummBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x61) {\n            fromUltraBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x73) {\n            fromSlarmoosBox = true;\n            charIndex++;\n        }\n        else {\n            fromBeepBox = true;\n        }\n        const version = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion))\n            return;\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion))\n            return;\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion))\n            return;\n        if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion))\n            return;\n        if (fromSlarmoosBox && (version == -1 || version > Song._latestSlarmoosBoxVersion || version < Song._oldestSlarmoosBoxVersion))\n            return;\n        const beforeTwo = version < 2;\n        const beforeThree = version < 3;\n        const beforeFour = version < 4;\n        const beforeFive = version < 5;\n        const beforeSix = version < 6;\n        const beforeSeven = version < 7;\n        const beforeEight = version < 8;\n        const beforeNine = version < 9;\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\n        const forceSimpleFilter = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\n        let willLoadLegacySamplesForOldSongs = false;\n        if (fromSlarmoosBox || fromUltraBox || fromGoldBox) {\n            compressed = compressed.replaceAll(\"%7C\", \"|\");\n            var compressed_array = compressed.split(\"|\");\n            compressed = compressed_array.shift();\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\n                Song._restoreChipWaveListToDefault();\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls = [];\n                const customSamplePresets = [];\n                sampleLoadingState.statusTable = {};\n                sampleLoadingState.urlTable = {};\n                sampleLoadingState.totalSamples = 0;\n                sampleLoadingState.samplesLoaded = 0;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                for (const url of compressed_array) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n                    else {\n                        const parseOldSyntax = beforeThree;\n                        const ok = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                        if (!ok) {\n                            continue;\n                        }\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        }\n        if (beforeThree && fromBeepBox) {\n            for (const channel of this.channels) {\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n                channel.instruments[0].effects |= 1 << 10;\n            }\n            this.channels[3].instruments[0].chipNoise = 0;\n        }\n        let legacySettingsCache = null;\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n            legacySettingsCache = [];\n            for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                legacySettingsCache[i] = [];\n                for (let j = 0; j < Config.instrumentCountMin; j++)\n                    legacySettingsCache[i][j] = {};\n            }\n        }\n        let legacyGlobalReverb = 0;\n        let instrumentChannelIterator = 0;\n        let instrumentIndexIterator = -1;\n        let command;\n        let useSlowerArpSpeed = false;\n        let useFastTwoNoteArp = false;\n        while (charIndex < compressed.length)\n            switch (command = compressed.charCodeAt(charIndex++)) {\n                case 78:\n                    {\n                        var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\n                        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n                        charIndex += songNameLength;\n                    }\n                    break;\n                case 110:\n                    {\n                        this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (fromBeepBox || (fromJummBox && beforeTwo)) {\n                            this.modChannelCount = 0;\n                        }\n                        else {\n                            this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n                        this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n                        this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\n                        for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n                            this.channels[channelIndex] = new Channel();\n                        }\n                        this.channels.length = this.getChannelCount();\n                        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                                legacySettingsCache[i] = [];\n                                for (let j = 0; j < Config.instrumentCountMin; j++)\n                                    legacySettingsCache[i][j] = {};\n                            }\n                        }\n                    }\n                    break;\n                case 115:\n                    {\n                        this.scale = clamp(0, Config.scales.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                                this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1;\n                            }\n                        }\n                        if (fromBeepBox)\n                            this.scale = 0;\n                    }\n                    break;\n                case 107:\n                    {\n                        if (beforeSeven && fromBeepBox) {\n                            this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = 0;\n                        }\n                        else if (fromBeepBox || fromJummBox) {\n                            this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = 0;\n                        }\n                        else if (fromGoldBox || (beforeThree && fromUltraBox)) {\n                            const rawKeyIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const [key, octave] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\n                            this.key = key;\n                            this.octave = octave;\n                        }\n                        else {\n                            this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\n                        }\n                    }\n                    break;\n                case 108:\n                    {\n                        if (beforeFive && fromBeepBox) {\n                            this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                    }\n                    break;\n                case 101:\n                    {\n                        if (beforeFive && fromBeepBox) {\n                            this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                    }\n                    break;\n                case 116:\n                    {\n                        if (beforeFour && fromBeepBox) {\n                            this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else {\n                            this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n                    }\n                    break;\n                case 109:\n                    {\n                        if (beforeNine && fromBeepBox) {\n                            legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\n                            legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                        }\n                        else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 97:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else {\n                            this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n                    }\n                    break;\n                case 103:\n                    {\n                        const barCount = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n                        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                            for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n                                this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\n                            }\n                            this.channels[channelIndex].bars.length = this.barCount;\n                        }\n                    }\n                    break;\n                case 106:\n                    {\n                        let patternsPerChannel;\n                        if (beforeEight && fromBeepBox) {\n                            patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        else {\n                            patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n                        const channelCount = this.getChannelCount();\n                        for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\n                            const patterns = this.channels[channelIndex].patterns;\n                            for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n                                patterns[pattern] = new Pattern();\n                            }\n                            patterns.length = this.patternsPerChannel;\n                        }\n                    }\n                    break;\n                case 105:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const instrumentsPerChannel = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                            this.layeredInstruments = false;\n                            this.patternInstruments = (instrumentsPerChannel > 1);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                                const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                                for (let instrumentIndex = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                    this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\n                                }\n                                this.channels[channelIndex].instruments.length = instrumentsPerChannel;\n                                if (beforeSix && fromBeepBox) {\n                                    for (let instrumentIndex = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                        this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? 2 : 0, isNoiseChannel, isModChannel);\n                                    }\n                                }\n                                for (let j = legacySettingsCache[channelIndex].length; j < instrumentsPerChannel; j++) {\n                                    legacySettingsCache[channelIndex][j] = {};\n                                }\n                            }\n                        }\n                        else {\n                            const instrumentsFlagBits = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n                            this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                let instrumentCount = 1;\n                                if (this.layeredInstruments || this.patternInstruments) {\n                                    instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                                }\n                                const channel = this.channels[channelIndex];\n                                const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n                                const isModChannel = this.getChannelIsMod(channelIndex);\n                                for (let i = channel.instruments.length; i < instrumentCount; i++) {\n                                    channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\n                                }\n                                channel.instruments.length = instrumentCount;\n                            }\n                        }\n                    }\n                    break;\n                case 114:\n                    {\n                        if (!fromUltraBox && !fromSlarmoosBox) {\n                            let newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.rhythm = clamp(0, Config.rhythms.length, newRhythm);\n                            if (fromJummBox && beforeThree || fromBeepBox) {\n                                if (this.rhythm == Config.rhythms.dictionary[\"÷3 (triplets)\"].index || this.rhythm == Config.rhythms.dictionary[\"÷6\"].index) {\n                                    useSlowerArpSpeed = true;\n                                }\n                                if (this.rhythm >= Config.rhythms.dictionary[\"÷6\"].index) {\n                                    useFastTwoNoteArp = true;\n                                }\n                            }\n                        }\n                        else if ((fromSlarmoosBox && beforeFour) || (fromUltraBox && beforeFive)) {\n                            const rhythmMap = [1, 1, 0, 1, 2, 3, 4, 5];\n                            this.rhythm = clamp(0, Config.rhythms.length, rhythmMap[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]]);\n                        }\n                        else {\n                            this.rhythm = clamp(0, Config.rhythms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 111:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                            if (channelIndex >= this.pitchChannelCount)\n                                this.channels[channelIndex].octave = 0;\n                        }\n                        else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                if (channelIndex >= this.pitchChannelCount)\n                                    this.channels[channelIndex].octave = 0;\n                            }\n                        }\n                        else {\n                            for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n                                this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let channelIndex = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\n                                this.channels[channelIndex].octave = 0;\n                            }\n                        }\n                    }\n                    break;\n                case 84:\n                    {\n                        instrumentIndexIterator++;\n                        if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n                            instrumentChannelIterator++;\n                            instrumentIndexIterator = 0;\n                        }\n                        validateRange(0, this.channels.length - 1, instrumentChannelIterator);\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        let instrumentType = validateRange(0, 12 - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            if (instrumentType == 7 || instrumentType == 8) {\n                                instrumentType += 2;\n                            }\n                        }\n                        else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive)) {\n                            if (instrumentType == 8 || instrumentType == 9 || instrumentType == 10) {\n                                instrumentType += 1;\n                            }\n                        }\n                        instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\n                        if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == 0 || instrumentType == 9 || instrumentType == 6)) {\n                            instrument.aliases = true;\n                            instrument.distortion = 0;\n                            instrument.effects |= 1 << 3;\n                        }\n                        if (useSlowerArpSpeed) {\n                            instrument.arpeggioSpeed = 9;\n                        }\n                        if (useFastTwoNoteArp) {\n                            instrument.fastTwoNoteArp = true;\n                        }\n                        if (beforeSeven && fromBeepBox) {\n                            if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                                instrument.effects |= 1 << 11;\n                            }\n                        }\n                    }\n                    break;\n                case 117:\n                    {\n                        const presetValue = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 7) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 9;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 9;\n                            }\n                        }\n                        else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 8) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 9;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 9;\n                            }\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 10) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 11;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 11;\n                            }\n                        }\n                        if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\")) {\n                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue(\"grand piano 3\");\n                        }\n                    }\n                    break;\n                case 119:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            instrument.convertLegacySettings(legacySettingsCache[channelIndex][0], forceSimpleFilter);\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    if (channelIndex >= this.pitchChannelCount) {\n                                        instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    else {\n                                        instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                                    }\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            if (instrumentChannelIterator >= this.pitchChannelCount) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            else {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            }\n                        }\n                        else {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == 2) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            else {\n                                if (fromSlarmoosBox || fromUltraBox) {\n                                    const chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (chipWaveCounter == 3) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\n                                    }\n                                    else if (chipWaveCounter == 2) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\n                                    }\n                                    else if (chipWaveCounter == 1) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\n                                    }\n                                    else {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\n                                    }\n                                }\n                                else {\n                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 102:\n                    {\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            if (beforeSeven && fromBeepBox) {\n                                const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];\n                                const legacyToEnvelope = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                                if (beforeThree && fromBeepBox) {\n                                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const instrument = this.channels[channelIndex].instruments[0];\n                                    const legacySettings = legacySettingsCache[channelIndex][0];\n                                    const legacyFilter = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                    legacySettings.filterResonance = 0;\n                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                                else if (beforeSix && fromBeepBox) {\n                                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                        for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                            const instrument = this.channels[channelIndex].instruments[i];\n                                            const legacySettings = legacySettingsCache[channelIndex][i];\n                                            const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                            if (channelIndex < this.pitchChannelCount) {\n                                                legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                                legacySettings.filterResonance = 0;\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                            }\n                                            else {\n                                                legacySettings.filterCutoff = 10;\n                                                legacySettings.filterResonance = 0;\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n                                            }\n                                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                        }\n                                    }\n                                }\n                                else {\n                                    const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                    legacySettings.filterResonance = 0;\n                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                            }\n                            else {\n                                const filterCutoffRange = 11;\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if (fromBeepBox || typeCheck == 0) {\n                                instrument.eqFilterType = false;\n                                if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                    typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const originalControlPointCount = typeCheck;\n                                instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                                for (let i = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\n                                    instrument.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                }\n                                for (let i = 0; i < instrument.eqFilter.controlPointCount; i++) {\n                                    const point = instrument.eqFilter.controlPoints[i];\n                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                for (let i = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                    charIndex += 3;\n                                }\n                                instrument.eqSubFilters[0] = instrument.eqFilter;\n                                if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox || fromSlarmoosBox) {\n                                    let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                        if (usingSubFilterBitfield & (1 << j)) {\n                                            const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            if (instrument.eqSubFilters[j + 1] == null)\n                                                instrument.eqSubFilters[j + 1] = new FilterSettings();\n                                            instrument.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                            for (let i = instrument.eqSubFilters[j + 1].controlPoints.length; i < instrument.eqSubFilters[j + 1].controlPointCount; i++) {\n                                                instrument.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                            }\n                                            for (let i = 0; i < instrument.eqSubFilters[j + 1].controlPointCount; i++) {\n                                                const point = instrument.eqSubFilters[j + 1].controlPoints[i];\n                                                point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            }\n                                            for (let i = instrument.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                charIndex += 3;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                instrument.eqFilterType = true;\n                                instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                    }\n                    break;\n                case 121:\n                    {\n                        if (fromSlarmoosBox || fromUltraBox) {\n                            if (beforeThree && fromUltraBox) {\n                                const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\n                                charIndex += sampleLoopInfoEncodedLength;\n                                const sampleLoopInfo = JSON.parse(atob(sampleLoopInfoEncoded));\n                                for (const entry of sampleLoopInfo) {\n                                    const channelIndex = entry[\"channel\"];\n                                    const instrumentIndex = entry[\"instrument\"];\n                                    const info = entry[\"info\"];\n                                    const instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                                    instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\n                                    instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\n                                    instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\n                                    instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\n                                    instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\n                                    instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\n                                }\n                            }\n                            else {\n                                const encodedLoopMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const isUsingAdvancedLoopControls = Boolean(encodedLoopMode & 1);\n                                const chipWaveLoopMode = encodedLoopMode >> 1;\n                                const encodedReleaseMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const chipWavePlayBackwards = Boolean(encodedReleaseMode & 1);\n                                const chipWaveLoopStart = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const chipWaveLoopEnd = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const chipWaveStartOffset = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\n                                instrument.chipWaveLoopStart = chipWaveLoopStart;\n                                instrument.chipWaveLoopEnd = chipWaveLoopEnd;\n                                instrument.chipWaveLoopMode = chipWaveLoopMode;\n                                instrument.chipWavePlayBackwards = chipWavePlayBackwards;\n                                instrument.chipWaveStartOffset = chipWaveStartOffset;\n                            }\n                        }\n                        else if (fromGoldBox && !beforeFour && beforeSix) {\n                            if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                                if (!willLoadLegacySamplesForOldSongs) {\n                                    willLoadLegacySamplesForOldSongs = true;\n                                    Config.willReloadForCustomSamples = true;\n                                    EditorConfig.customSamples = [\"legacySamples\"];\n                                    loadBuiltInSamples(0);\n                                }\n                            }\n                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\n                        }\n                        else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const filterResonanceRange = 8;\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    }\n                    break;\n                case 122:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) {\n                            }\n                            if (instrument.type == 4) {\n                                for (let i = 0; i < Config.drumCount; i++) {\n                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                        aa = pregoldToEnvelope[aa];\n                                    instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\n                                }\n                            }\n                            else {\n                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                    aa = pregoldToEnvelope[aa];\n                                legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                        }\n                        else {\n                            for (let i = 0; i < Config.drumCount; i++) {\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (!fromSlarmoosBox && aa >= 2)\n                                    aa++;\n                                instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\n                            }\n                        }\n                    }\n                    break;\n                case 87:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (fromBeepBox) {\n                            instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\n                        }\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                aa = pregoldToEnvelope[aa];\n                            legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        if ((fromUltraBox && !beforeFour) || fromSlarmoosBox) {\n                            instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 73:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const sustainValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\n                        instrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, 2, sustainValue >> 5) : 0;\n                    }\n                    break;\n                case 100:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const legacySettings = [\n                                { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                                { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                                { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                                { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                                { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                                { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                                { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                                { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                                { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                            ];\n                            if (beforeThree && fromBeepBox) {\n                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[channelIndex].instruments[0];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    instrument.effects |= 1 << 10;\n                                }\n                            }\n                            else if (beforeSix && fromBeepBox) {\n                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                    for (const instrument of this.channels[channelIndex].instruments) {\n                                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                            instrument.effects |= 1 << 10;\n                                        }\n                                    }\n                                }\n                            }\n                            else if ((beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    instrument.effects |= 1 << 10;\n                                }\n                            }\n                            else {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\n                                    instrument.legacyTieOver = true;\n                                }\n                                instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\n                                    instrument.effects |= 1 << 10;\n                                }\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                        }\n                    }\n                    break;\n                case 99:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            if (beforeSeven && fromBeepBox) {\n                                if (beforeThree && fromBeepBox) {\n                                    const legacyEffects = [0, 3, 2, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"tremolo2\"];\n                                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[channelIndex].instruments[0];\n                                    const legacySettings = legacySettingsCache[channelIndex][0];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        instrument.effects |= 1 << 9;\n                                    }\n                                }\n                                else if (beforeSix && fromBeepBox) {\n                                    const legacyEffects = [0, 1, 2, 3, 0, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                        for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                            const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            const instrument = this.channels[channelIndex].instruments[i];\n                                            const legacySettings = legacySettingsCache[channelIndex][i];\n                                            instrument.vibrato = legacyEffects[effect];\n                                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                            }\n                                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                                instrument.effects |= 1 << 9;\n                                            }\n                                            if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\n                                                instrument.effects |= 1 << 0;\n                                                instrument.reverb = legacyGlobalReverb;\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    const legacyEffects = [0, 1, 2, 3, 0, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                                    const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        instrument.effects |= 1 << 9;\n                                    }\n                                    if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                        instrument.effects |= 1 << 0;\n                                        instrument.reverb = legacyGlobalReverb;\n                                    }\n                                }\n                            }\n                            else {\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                const vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.vibrato = vibrato;\n                                if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                    instrument.effects |= 1 << 9;\n                                }\n                                if (vibrato == Config.vibratos.length) {\n                                    instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\n                                    instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\n                                    instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.effects |= 1 << 9;\n                                }\n                                else {\n                                    instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                                    instrument.vibratoSpeed = 10;\n                                    instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                                    instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                                }\n                            }\n                        }\n                        else {\n                            if (fromSlarmoosBox && !beforeFour) {\n                                const originalControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                this.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                                for (let i = this.eqFilter.controlPoints.length; i < this.eqFilter.controlPointCount; i++) {\n                                    this.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                }\n                                for (let i = 0; i < this.eqFilter.controlPointCount; i++) {\n                                    const point = this.eqFilter.controlPoints[i];\n                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                for (let i = this.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                    charIndex += 3;\n                                }\n                                this.eqSubFilters[0] = this.eqFilter;\n                                let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                    if (usingSubFilterBitfield & (1 << j)) {\n                                        const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (this.eqSubFilters[j + 1] == null)\n                                            this.eqSubFilters[j + 1] = new FilterSettings();\n                                        this.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                        for (let i = this.eqSubFilters[j + 1].controlPoints.length; i < this.eqSubFilters[j + 1].controlPointCount; i++) {\n                                            this.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                        }\n                                        for (let i = 0; i < this.eqSubFilters[j + 1].controlPointCount; i++) {\n                                            const point = this.eqSubFilters[j + 1].controlPoints[i];\n                                            point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        for (let i = this.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                            charIndex += 3;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 71:\n                    {\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 104:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    let unison = clamp(0, Config.unisons.length, originalValue);\n                                    if (originalValue == 8) {\n                                        unison = 2;\n                                        instrument.chord = 3;\n                                    }\n                                    instrument.unison = unison;\n                                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            let unison = clamp(0, Config.unisons.length, originalValue);\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            if (originalValue == 8) {\n                                unison = 2;\n                                instrument.chord = 3;\n                            }\n                            instrument.unison = unison;\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const unisonLength = (beforeFive || !fromSlarmoosBox) ? 27 : Config.unisons.length;\n                            if (((fromUltraBox && !beforeFive) || fromSlarmoosBox) && (instrument.unison == unisonLength)) {\n                                instrument.unison = Config.unisons.length;\n                                instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSpread = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n                                const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonOffset = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n                                const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonExpression = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n                                const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSign = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n                                instrument.unisonSpread = unisonSpread / 1000;\n                                if (unisonSpreadNegative == 0)\n                                    instrument.unisonSpread *= -1;\n                                instrument.unisonOffset = unisonOffset / 1000;\n                                if (unisonOffsetNegative == 0)\n                                    instrument.unisonOffset *= -1;\n                                instrument.unisonExpression = unisonExpression / 1000;\n                                if (unisonExpressionNegative == 0)\n                                    instrument.unisonExpression *= -1;\n                                instrument.unisonSign = unisonSign / 1000;\n                                if (unisonSignNegative == 0)\n                                    instrument.unisonSign *= -1;\n                            }\n                            else {\n                                instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                                instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                                instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                                instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                                instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                            }\n                        }\n                    }\n                    break;\n                case 67:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                                instrument.effects |= 1 << 11;\n                            }\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 113:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << 15) - 1));\n                            if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                instrument.effects &= ~(1 << 0);\n                            }\n                            else if (effectsIncludeReverb(instrument.effects)) {\n                                instrument.reverb = legacyGlobalReverb;\n                            }\n                            instrument.effects |= 1 << 2;\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                instrument.effects |= 1 << 9;\n                            }\n                            if (instrument.detune != Config.detuneCenter) {\n                                instrument.effects |= 1 << 8;\n                            }\n                            if (instrument.aliases)\n                                instrument.effects |= 1 << 3;\n                            else\n                                instrument.effects &= ~(1 << 3);\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                            if (15 > 15)\n                                throw new Error();\n                            if (fromSlarmoosBox && !beforeFive) {\n                                instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 12) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            else {\n                                instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeNoteFilter(instrument.effects)) {\n                                let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if (fromBeepBox || typeCheck == 0) {\n                                    instrument.noteFilterType = false;\n                                    if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                        typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\n                                    for (let i = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n                                        instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i = 0; i < instrument.noteFilter.controlPointCount; i++) {\n                                        const point = instrument.noteFilter.controlPoints[i];\n                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {\n                                        charIndex += 3;\n                                    }\n                                    instrument.noteSubFilters[0] = instrument.noteFilter;\n                                    if ((fromJummBox && !beforeFive) || (fromGoldBox) || (fromUltraBox) || (fromSlarmoosBox)) {\n                                        let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                            if (usingSubFilterBitfield & (1 << j)) {\n                                                const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                                if (instrument.noteSubFilters[j + 1] == null)\n                                                    instrument.noteSubFilters[j + 1] = new FilterSettings();\n                                                instrument.noteSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                                for (let i = instrument.noteSubFilters[j + 1].controlPoints.length; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {\n                                                    instrument.noteSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                                }\n                                                for (let i = 0; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {\n                                                    const point = instrument.noteSubFilters[j + 1].controlPoints[i];\n                                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                }\n                                                for (let i = instrument.noteSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                    charIndex += 3;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    instrument.noteFilterType = true;\n                                    instrument.noteFilter.reset();\n                                    instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeTransition(instrument.effects)) {\n                                instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeChord(instrument.effects)) {\n                                instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)) {\n                                    instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                                }\n                                if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index && fromSlarmoosBox && !beforeFive) {\n                                    instrument.monoChordTone = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                }\n                            }\n                            if (effectsIncludePitchShift(instrument.effects)) {\n                                instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeDetune(instrument.effects)) {\n                                if (fromBeepBox) {\n                                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\n                                }\n                                else {\n                                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeVibrato(instrument.effects)) {\n                                instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)) {\n                                    instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\n                                    instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                else {\n                                    instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                                    instrument.vibratoSpeed = 10;\n                                    instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                                    instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                                }\n                            }\n                            if (effectsIncludeDistortion(instrument.effects)) {\n                                instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                    instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                            }\n                            if (effectsIncludeBitcrusher(instrument.effects)) {\n                                instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludePanning(instrument.effects)) {\n                                if (fromBeepBox) {\n                                    instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\n                                }\n                                else {\n                                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                    instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            if (effectsIncludeChorus(instrument.effects)) {\n                                if (fromBeepBox) {\n                                    instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                                }\n                                else {\n                                    instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeEcho(instrument.effects)) {\n                                instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeReverb(instrument.effects)) {\n                                if (fromBeepBox) {\n                                    instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\n                                }\n                                else {\n                                    instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeGranular(instrument.effects)) {\n                                instrument.granular = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrument.grainSize = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrument.grainAmounts = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrument.grainRange = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            if (effectsIncludeRingModulation(instrument.effects)) {\n                                instrument.ringModulation = clamp(0, Config.ringModRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.ringModulationHz = clamp(0, Config.ringModHzRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.ringModWaveformIndex = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.ringModPulseWidth = clamp(0, Config.pulseWidthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.ringModHzOffset = clamp(Config.rmHzOffsetMin, Config.rmHzOffsetMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                        instrument.effects &= (1 << 15) - 1;\n                    }\n                    break;\n                case 118:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                        else if (fromBeepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\n                        }\n                    }\n                    break;\n                case 76:\n                    {\n                        if (beforeNine && fromBeepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\n                        }\n                        else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox || fromSlarmoosBox) {\n                                instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 68:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\n                            instrument.effects |= 1 << 8;\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 77:\n                    {\n                        let instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        for (let j = 0; j < 64; j++) {\n                            instrument.customChipWave[j]\n                                = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\n                        }\n                        let sum = 0.0;\n                        for (let i = 0; i < instrument.customChipWave.length; i++) {\n                            sum += instrument.customChipWave[i];\n                        }\n                        const average = sum / instrument.customChipWave.length;\n                        let cumulative = 0;\n                        let wavePrev = 0;\n                        for (let i = 0; i < instrument.customChipWave.length; i++) {\n                            cumulative += wavePrev;\n                            wavePrev = instrument.customChipWave[i] - average;\n                            instrument.customChipWaveIntegral[i] = cumulative;\n                        }\n                        instrument.customChipWaveIntegral[64] = 0.0;\n                    }\n                    break;\n                case 79:\n                    {\n                        let nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (nextValue == 0x3f) {\n                            this.restoreLimiterDefaults();\n                        }\n                        else {\n                            this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\n                            nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\n                            this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\n                            this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                            this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                            this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\n                        }\n                    }\n                    break;\n                case 85:\n                    {\n                        for (let channel = 0; channel < this.getChannelCount(); channel++) {\n                            var channelNameLength;\n                            if (beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox)\n                                channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            else\n                                channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\n                            charIndex += channelNameLength;\n                        }\n                    }\n                    break;\n                case 65:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 1) {\n                            instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        else {\n                            instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\n                            if (compressed.charCodeAt(charIndex) == 67) {\n                                let carrierCountTemp = clamp(1, Config.operatorCount + 2 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\n                                charIndex++;\n                                let tempModArray = [];\n                                if (compressed.charCodeAt(charIndex + 1) == 113) {\n                                    charIndex++;\n                                    let j = 0;\n                                    charIndex++;\n                                    while (compressed.charCodeAt(charIndex) != 113) {\n                                        tempModArray[j] = [];\n                                        let o = 0;\n                                        while (compressed.charCodeAt(charIndex) != 82) {\n                                            tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                            o++;\n                                            charIndex++;\n                                        }\n                                        j++;\n                                        charIndex++;\n                                    }\n                                    instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\n                                    charIndex++;\n                                }\n                            }\n                        }\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    }\n                    break;\n                case 120:\n                    {\n                        if (fromGoldBox && !beforeFour && beforeSix) {\n                            const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((chipWaveForCompat + 62) > 85) {\n                                if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                                    if (!willLoadLegacySamplesForOldSongs) {\n                                        willLoadLegacySamplesForOldSongs = true;\n                                        Config.willReloadForCustomSamples = true;\n                                        EditorConfig.customSamples = [\"legacySamples\"];\n                                        loadBuiltInSamples(0);\n                                    }\n                                }\n                            }\n                            if ((chipWaveForCompat + 62) > 78) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\n                            }\n                            else if ((chipWaveForCompat + 62) > 67) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\n                            }\n                            else if ((chipWaveForCompat + 62) == 67) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\n                            }\n                            else {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 70:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 1) {\n                            instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        else {\n                            instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\n                            let tempModArray = [];\n                            if (compressed.charCodeAt(charIndex) == 113) {\n                                let j = 0;\n                                charIndex++;\n                                while (compressed.charCodeAt(charIndex) != 113) {\n                                    tempModArray[j] = [];\n                                    let o = 0;\n                                    while (compressed.charCodeAt(charIndex) != 82) {\n                                        tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                        o++;\n                                        charIndex++;\n                                    }\n                                    j++;\n                                    charIndex++;\n                                }\n                                instrument.customFeedbackType.set(tempModArray);\n                                charIndex++;\n                            }\n                        }\n                    }\n                    break;\n                case 66:\n                    {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    break;\n                case 86:\n                    {\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                aa = pregoldToEnvelope[aa];\n                            legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 81:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (beforeThree && fromGoldBox) {\n                            const freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            }\n                        }\n                        else if (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox) {\n                            const freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            }\n                        }\n                        else {\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                    }\n                    break;\n                case 80:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                            instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 69:\n                    {\n                        const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        const jummToUltraEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];\n                        const slarURL3toURL4Envelope = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14];\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.operatorEnvelopes = [];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (fromBeepBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (fromJummBox)\n                                    aa = jummToUltraEnvelope[aa];\n                                legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\n                            }\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                            const envelopeCount = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            let envelopeDiscrete = false;\n                            if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive) || (fromSlarmoosBox)) {\n                                instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (!fromSlarmoosBox || beforeFive) {\n                                    envelopeDiscrete = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                                }\n                            }\n                            for (let i = 0; i < envelopeCount; i++) {\n                                const target = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                let index = 0;\n                                const maxCount = Config.instrumentAutomationTargets[target].maxCount;\n                                if (maxCount > 1) {\n                                    index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (fromBeepBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (fromJummBox)\n                                    aa = jummToUltraEnvelope[aa];\n                                if (!fromSlarmoosBox && aa >= 2)\n                                    aa++;\n                                let updatedEnvelopes = false;\n                                let perEnvelopeSpeed = 1;\n                                if (!fromSlarmoosBox || beforeThree) {\n                                    updatedEnvelopes = true;\n                                    perEnvelopeSpeed = Config.envelopes[aa].speed;\n                                    aa = Config.envelopes[aa].type;\n                                }\n                                else if (beforeFour && aa >= 3)\n                                    aa++;\n                                let isTremolo2 = false;\n                                if ((fromSlarmoosBox && !beforeThree && beforeFour) || updatedEnvelopes) {\n                                    if (aa == 9)\n                                        isTremolo2 = true;\n                                    aa = slarURL3toURL4Envelope[aa];\n                                }\n                                const envelope = clamp(0, ((fromSlarmoosBox && !beforeThree || updatedEnvelopes) ? Config.newEnvelopes.length : Config.envelopes.length), aa);\n                                let pitchEnvelopeStart = 0;\n                                let pitchEnvelopeEnd = Config.maxPitch;\n                                let envelopeInverse = false;\n                                perEnvelopeSpeed = (fromSlarmoosBox && !beforeThree) ? Config.newEnvelopes[envelope].speed : perEnvelopeSpeed;\n                                let perEnvelopeLowerBound = 0;\n                                let perEnvelopeUpperBound = 1;\n                                let steps = 2;\n                                let seed = 2;\n                                let waveform = 0;\n                                if (fromSlarmoosBox && !beforeFour) {\n                                    if (Config.newEnvelopes[envelope].name == \"lfo\") {\n                                        waveform = clamp(0, 7, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        if (waveform == 5 || waveform == 6) {\n                                            steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                    }\n                                    else if (Config.newEnvelopes[envelope].name == \"random\") {\n                                        steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        seed = clamp(1, Config.randomEnvelopeSeedMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        waveform = clamp(0, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                }\n                                if (fromSlarmoosBox && !beforeThree) {\n                                    if (Config.newEnvelopes[envelope].name == \"pitch\") {\n                                        if (!instrument.isNoiseInstrument) {\n                                            let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            pitchEnvelopeStart = clamp(0, Config.maxPitch + 1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            pitchEnvelopeEnd = clamp(0, Config.maxPitch + 1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        else {\n                                            pitchEnvelopeStart = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            pitchEnvelopeEnd = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                    }\n                                    let checkboxValues = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (fromSlarmoosBox && !beforeFive) {\n                                        envelopeDiscrete = (checkboxValues >> 1) == 1 ? true : false;\n                                    }\n                                    envelopeInverse = (checkboxValues & 1) == 1 ? true : false;\n                                    if (Config.newEnvelopes[envelope].name != \"pitch\" && Config.newEnvelopes[envelope].name != \"note size\" && Config.newEnvelopes[envelope].name != \"punch\" && Config.newEnvelopes[envelope].name != \"none\") {\n                                        perEnvelopeSpeed = Config.perEnvelopeSpeedIndices[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                                    }\n                                    perEnvelopeLowerBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                                    perEnvelopeUpperBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                                }\n                                if (!fromSlarmoosBox || beforeFour) {\n                                    if (isTremolo2) {\n                                        waveform = 0;\n                                        if (envelopeInverse) {\n                                            perEnvelopeUpperBound = Math.floor((perEnvelopeUpperBound / 2) * 10) / 10;\n                                            perEnvelopeLowerBound = Math.floor((perEnvelopeLowerBound / 2) * 10) / 10;\n                                        }\n                                        else {\n                                            perEnvelopeUpperBound = Math.floor((0.5 + (perEnvelopeUpperBound - perEnvelopeLowerBound) / 2) * 10) / 10;\n                                            perEnvelopeLowerBound = 0.5;\n                                        }\n                                    }\n                                }\n                                instrument.addEnvelope(target, index, envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, perEnvelopeSpeed, perEnvelopeLowerBound, perEnvelopeUpperBound, steps, seed, waveform, envelopeDiscrete);\n                                if (fromSlarmoosBox && beforeThree && !beforeTwo) {\n                                    let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].pitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].pitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].inverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1 ? true : false;\n                                }\n                            }\n                            let instrumentPitchEnvelopeStart = 0;\n                            let instrumentPitchEnvelopeEnd = Config.maxPitch;\n                            let instrumentEnvelopeInverse = false;\n                            if (fromSlarmoosBox && beforeTwo) {\n                                let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentPitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentPitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentEnvelopeInverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] === 1 ? true : false;\n                                for (let i = 0; i < envelopeCount; i++) {\n                                    instrument.envelopes[i].pitchEnvelopeStart = instrumentPitchEnvelopeStart;\n                                    instrument.envelopes[i].pitchEnvelopeEnd = instrumentPitchEnvelopeEnd;\n                                    instrument.envelopes[i].inverse = Config.envelopes[instrument.envelopes[i].envelope].name == \"pitch\" ? instrumentEnvelopeInverse : false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 82:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (beforeThree && fromGoldBox) {\n                            for (let o = 0; o < Config.operatorCount; o++) {\n                                const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\n                                const old = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (old == 3) {\n                                    instrument.operators[o].pulseWidth = 5;\n                                }\n                                else if (old == 4) {\n                                    instrument.operators[o].pulseWidth = 4;\n                                }\n                                else if (old == 5) {\n                                    instrument.operators[o].pulseWidth = 6;\n                                }\n                                instrument.operators[o].waveform = pre3To3g[old];\n                            }\n                        }\n                        else {\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                if (fromJummBox) {\n                                    const jummToG = [0, 1, 3, 2, 4, 5];\n                                    instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                }\n                                else {\n                                    instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                if (instrument.operators[o].waveform == 2) {\n                                    instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 83:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 3) {\n                            const byteCount = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                                instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                            }\n                            instrument.spectrumWave.markCustomWaveDirty();\n                            charIndex += byteCount;\n                        }\n                        else if (instrument.type == 4) {\n                            const byteCount = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                            for (let j = 0; j < Config.drumCount; j++) {\n                                for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                                    instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                                }\n                                instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                            }\n                            charIndex += byteCount;\n                        }\n                        else {\n                            throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\n                        }\n                    }\n                    break;\n                case 72:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const byteCount = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6);\n                        const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                        for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                            instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n                        }\n                        instrument.harmonicsWave.markCustomWaveDirty();\n                        charIndex += byteCount;\n                    }\n                    break;\n                case 88:\n                    {\n                        if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                            if (instrument.aliases) {\n                                instrument.distortion = 0;\n                                instrument.effects |= 1 << 3;\n                            }\n                        }\n                        else {\n                            if (fromUltraBox || fromSlarmoosBox) {\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                    }\n                    break;\n                case 98:\n                    {\n                        let subStringLength;\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const barCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            subStringLength = Math.ceil(barCount * 0.5);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let i = 0; i < barCount; i++) {\n                                this.channels[channelIndex].bars[i] = bits.read(3) + 1;\n                            }\n                        }\n                        else if (beforeFive && fromBeepBox) {\n                            let neededBits = 0;\n                            while ((1 << neededBits) < this.patternsPerChannel)\n                                neededBits++;\n                            subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i = 0; i < this.barCount; i++) {\n                                    this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n                                }\n                            }\n                        }\n                        else {\n                            let neededBits = 0;\n                            while ((1 << neededBits) < this.patternsPerChannel + 1)\n                                neededBits++;\n                            subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i = 0; i < this.barCount; i++) {\n                                    this.channels[channelIndex].bars[i] = bits.read(neededBits);\n                                }\n                            }\n                        }\n                        charIndex += subStringLength;\n                    }\n                    break;\n                case 112:\n                    {\n                        let bitStringLength = 0;\n                        let channelIndex;\n                        let largerChords = !((beforeFour && fromJummBox) || fromBeepBox);\n                        let recentPitchBitLength = (largerChords ? 4 : 3);\n                        let recentPitchLength = (largerChords ? 16 : 8);\n                        if (beforeThree && fromBeepBox) {\n                            channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            charIndex++;\n                            bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            bitStringLength = bitStringLength << 6;\n                            bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            channelIndex = 0;\n                            let bitStringLengthLength = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            while (bitStringLengthLength > 0) {\n                                bitStringLength = bitStringLength << 6;\n                                bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                bitStringLengthLength--;\n                            }\n                        }\n                        const bits = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n                        charIndex += bitStringLength;\n                        const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);\n                        let songReverbChannel = -1;\n                        let songReverbInstrument = -1;\n                        let songReverbIndex = -1;\n                        const shouldCorrectTempoMods = fromJummBox;\n                        const jummboxTempoMin = 30;\n                        while (true) {\n                            const channel = this.channels[channelIndex];\n                            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n                            const isModChannel = this.getChannelIsMod(channelIndex);\n                            const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);\n                            const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n                            const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);\n                            if (isModChannel) {\n                                let jumfive = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox);\n                                const neededModInstrumentIndexBits = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                                    let instrument = channel.instruments[instrumentIndex];\n                                    for (let mod = 0; mod < Config.modCount; mod++) {\n                                        let status = bits.read(2);\n                                        switch (status) {\n                                            case 0:\n                                                instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\n                                                instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\n                                                break;\n                                            case 1:\n                                                instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\n                                                instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\n                                                break;\n                                            case 2:\n                                                instrument.modChannels[mod] = -1;\n                                                break;\n                                            case 3:\n                                                instrument.modChannels[mod] = -2;\n                                                break;\n                                        }\n                                        if (status != 3) {\n                                            instrument.modulators[mod] = bits.read(6);\n                                        }\n                                        if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\")) {\n                                            instrument.modFilterTypes[mod] = bits.read(6);\n                                        }\n                                        if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\") {\n                                            instrument.modEnvelopeNumbers[mod] = bits.read(6);\n                                        }\n                                        if (jumfive && instrument.modChannels[mod] >= 0) {\n                                            let forNoteFilter = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);\n                                            if (instrument.modulators[mod] == 7) {\n                                                if (forNoteFilter) {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\n                                                }\n                                                else {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\n                                                }\n                                                instrument.modFilterTypes[mod] = 1;\n                                            }\n                                            else if (instrument.modulators[mod] == 8) {\n                                                if (forNoteFilter) {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\n                                                }\n                                                else {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\n                                                }\n                                                instrument.modFilterTypes[mod] = 2;\n                                            }\n                                        }\n                                        else if (jumfive) {\n                                            if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\n                                                songReverbChannel = channelIndex;\n                                                songReverbInstrument = instrumentIndex;\n                                                songReverbIndex = mod;\n                                            }\n                                        }\n                                        if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != 15) {\n                                            this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;\n                                        }\n                                    }\n                                }\n                            }\n                            const detuneScaleNotes = [];\n                            for (let j = 0; j < channel.instruments.length; j++) {\n                                detuneScaleNotes[j] = [];\n                                for (let i = 0; i < Config.modCount; i++) {\n                                    detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\n                                }\n                            }\n                            const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\n                            let lastPitch = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\n                            const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n                            const recentShapes = [];\n                            for (let i = 0; i < recentPitches.length; i++) {\n                                recentPitches[i] += octaveOffset;\n                            }\n                            for (let i = 0; i < this.patternsPerChannel; i++) {\n                                const newPattern = channel.patterns[i];\n                                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                                    newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n                                    newPattern.instruments.length = 1;\n                                }\n                                else {\n                                    if (this.patternInstruments) {\n                                        const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n                                        for (let j = 0; j < instrumentCount; j++) {\n                                            newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\n                                        }\n                                        newPattern.instruments.length = instrumentCount;\n                                    }\n                                    else {\n                                        newPattern.instruments[0] = 0;\n                                        newPattern.instruments.length = Config.instrumentCountMin;\n                                    }\n                                }\n                                if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\n                                    newPattern.notes.length = 0;\n                                    continue;\n                                }\n                                let curPart = 0;\n                                const newNotes = newPattern.notes;\n                                let noteCount = 0;\n                                while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                                    const useOldShape = bits.read(1) == 1;\n                                    let newNote = false;\n                                    let shapeIndex = 0;\n                                    if (useOldShape) {\n                                        shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n                                    }\n                                    else {\n                                        newNote = bits.read(1) == 1;\n                                    }\n                                    if (!useOldShape && !newNote) {\n                                        if (isModChannel) {\n                                            const isBackwards = bits.read(1) == 1;\n                                            const restLength = bits.readPartDuration();\n                                            if (isBackwards) {\n                                                curPart -= restLength;\n                                            }\n                                            else {\n                                                curPart += restLength;\n                                            }\n                                        }\n                                        else {\n                                            const restLength = (beforeSeven && fromBeepBox)\n                                                ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                                : bits.readPartDuration();\n                                            curPart += restLength;\n                                        }\n                                    }\n                                    else {\n                                        let shape;\n                                        if (useOldShape) {\n                                            shape = recentShapes[shapeIndex];\n                                            recentShapes.splice(shapeIndex, 1);\n                                        }\n                                        else {\n                                            shape = {};\n                                            if (!largerChords) {\n                                                shape.pitchCount = 1;\n                                                while (shape.pitchCount < 4 && bits.read(1) == 1)\n                                                    shape.pitchCount++;\n                                            }\n                                            else {\n                                                if (bits.read(1) == 1) {\n                                                    shape.pitchCount = bits.read(3) + 2;\n                                                }\n                                                else {\n                                                    shape.pitchCount = 1;\n                                                }\n                                            }\n                                            shape.pinCount = bits.readPinCount();\n                                            if (fromBeepBox) {\n                                                shape.initialSize = bits.read(2) * 2;\n                                            }\n                                            else if (!isModChannel) {\n                                                shape.initialSize = bits.read(bitsPerNoteSize);\n                                            }\n                                            else {\n                                                shape.initialSize = bits.read(9);\n                                            }\n                                            shape.pins = [];\n                                            shape.length = 0;\n                                            shape.bendCount = 0;\n                                            for (let j = 0; j < shape.pinCount; j++) {\n                                                let pinObj = {};\n                                                pinObj.pitchBend = bits.read(1) == 1;\n                                                if (pinObj.pitchBend)\n                                                    shape.bendCount++;\n                                                shape.length += (beforeSeven && fromBeepBox)\n                                                    ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                                    : bits.readPartDuration();\n                                                pinObj.time = shape.length;\n                                                if (fromBeepBox) {\n                                                    pinObj.size = bits.read(2) * 2;\n                                                }\n                                                else if (!isModChannel) {\n                                                    pinObj.size = bits.read(bitsPerNoteSize);\n                                                }\n                                                else {\n                                                    pinObj.size = bits.read(9);\n                                                }\n                                                shape.pins.push(pinObj);\n                                            }\n                                        }\n                                        recentShapes.unshift(shape);\n                                        if (recentShapes.length > 10)\n                                            recentShapes.pop();\n                                        let note;\n                                        if (newNotes.length <= noteCount) {\n                                            note = new Note(0, curPart, curPart + shape.length, shape.initialSize);\n                                            newNotes[noteCount++] = note;\n                                        }\n                                        else {\n                                            note = newNotes[noteCount++];\n                                            note.start = curPart;\n                                            note.end = curPart + shape.length;\n                                            note.pins[0].size = shape.initialSize;\n                                        }\n                                        let pitch;\n                                        let pitchCount = 0;\n                                        const pitchBends = [];\n                                        for (let j = 0; j < shape.pitchCount + shape.bendCount; j++) {\n                                            const useOldPitch = bits.read(1) == 1;\n                                            if (!useOldPitch) {\n                                                const interval = bits.readPitchInterval();\n                                                pitch = lastPitch;\n                                                let intervalIter = interval;\n                                                while (intervalIter > 0) {\n                                                    pitch++;\n                                                    while (recentPitches.indexOf(pitch) != -1)\n                                                        pitch++;\n                                                    intervalIter--;\n                                                }\n                                                while (intervalIter < 0) {\n                                                    pitch--;\n                                                    while (recentPitches.indexOf(pitch) != -1)\n                                                        pitch--;\n                                                    intervalIter++;\n                                                }\n                                            }\n                                            else {\n                                                const pitchIndex = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\n                                                pitch = recentPitches[pitchIndex];\n                                                recentPitches.splice(pitchIndex, 1);\n                                            }\n                                            recentPitches.unshift(pitch);\n                                            if (recentPitches.length > recentPitchLength)\n                                                recentPitches.pop();\n                                            if (j < shape.pitchCount) {\n                                                note.pitches[pitchCount++] = pitch;\n                                            }\n                                            else {\n                                                pitchBends.push(pitch);\n                                            }\n                                            if (j == shape.pitchCount - 1) {\n                                                lastPitch = note.pitches[0];\n                                            }\n                                            else {\n                                                lastPitch = pitch;\n                                            }\n                                        }\n                                        note.pitches.length = pitchCount;\n                                        pitchBends.unshift(note.pitches[0]);\n                                        const noteIsForTempoMod = isModChannel && channel.instruments[newPattern.instruments[0]].modulators[Config.modCount - 1 - note.pitches[0]] === Config.modulators.dictionary[\"tempo\"].index;\n                                        let tempoOffset = 0;\n                                        if (shouldCorrectTempoMods && noteIsForTempoMod) {\n                                            tempoOffset = jummboxTempoMin - Config.tempoMin;\n                                        }\n                                        if (isModChannel) {\n                                            note.pins[0].size += tempoOffset;\n                                            note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                        }\n                                        let pinCount = 1;\n                                        for (const pinObj of shape.pins) {\n                                            if (pinObj.pitchBend)\n                                                pitchBends.shift();\n                                            const interval = pitchBends[0] - note.pitches[0];\n                                            if (note.pins.length <= pinCount) {\n                                                if (isModChannel) {\n                                                    note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset);\n                                                }\n                                                else {\n                                                    note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n                                                }\n                                            }\n                                            else {\n                                                const pin = note.pins[pinCount++];\n                                                pin.interval = interval;\n                                                pin.time = pinObj.time;\n                                                if (isModChannel) {\n                                                    pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset;\n                                                }\n                                                else {\n                                                    pin.size = pinObj.size;\n                                                }\n                                            }\n                                        }\n                                        note.pins.length = pinCount;\n                                        if (note.start == 0) {\n                                            if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox))) {\n                                                note.continuesLastPattern = (bits.read(1) == 1);\n                                            }\n                                            else {\n                                                if ((beforeFour && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                                                    note.continuesLastPattern = false;\n                                                }\n                                                else {\n                                                    note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\n                                                }\n                                            }\n                                        }\n                                        curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n                                    }\n                                }\n                                newNotes.length = noteCount;\n                            }\n                            if (beforeThree && fromBeepBox) {\n                                break;\n                            }\n                            else {\n                                channelIndex++;\n                                if (channelIndex >= this.getChannelCount())\n                                    break;\n                            }\n                        }\n                        if (((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\n                            for (let channelIndex = 0; channelIndex < this.channels.length; channelIndex++) {\n                                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                                    const instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                                    if (effectsIncludeReverb(instrument.effects)) {\n                                        instrument.reverb = Config.reverbRange - 1;\n                                    }\n                                    if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\n                                        const patternIndex = this.channels[channelIndex].bars[0];\n                                        if (patternIndex > 0) {\n                                            const pattern = this.channels[channelIndex].patterns[patternIndex - 1];\n                                            let lowestPart = 6;\n                                            for (const note of pattern.notes) {\n                                                if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\n                                                    lowestPart = Math.min(lowestPart, note.start);\n                                                }\n                                            }\n                                            if (lowestPart > 0) {\n                                                pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\n                                            }\n                                        }\n                                        else {\n                                            if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\n                                                const pattern = new Pattern();\n                                                this.channels[channelIndex].patterns.push(pattern);\n                                                this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\n                                                if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\n                                                    for (let chn = 0; chn < this.channels.length; chn++) {\n                                                        if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\n                                                            this.channels[chn].patterns.push(new Pattern());\n                                                        }\n                                                    }\n                                                    this.patternsPerChannel++;\n                                                }\n                                                pattern.instruments.length = 1;\n                                                pattern.instruments[0] = songReverbInstrument;\n                                                pattern.notes.length = 0;\n                                                pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    {\n                        throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(0, charIndex));\n                    }\n                    break;\n            }\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n    static _isProperUrl(string) {\n        try {\n            if (OFFLINE) {\n                return Boolean(string);\n            }\n            else {\n                return Boolean(new URL(string));\n            }\n        }\n        catch (x) {\n            return false;\n        }\n    }\n    static _parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax) {\n        const defaultIndex = 0;\n        const defaultIntegratedSamples = Config.chipWaves[defaultIndex].samples;\n        const defaultSamples = Config.rawRawChipWaves[defaultIndex].samples;\n        const customSampleUrlIndex = customSampleUrls.length;\n        customSampleUrls.push(url);\n        const chipWaveIndex = Config.chipWaves.length;\n        let urlSliced = url;\n        let customSampleRate = 44100;\n        let isCustomPercussive = false;\n        let customRootKey = 60;\n        let presetIsUsingAdvancedLoopControls = false;\n        let presetChipWaveLoopStart = null;\n        let presetChipWaveLoopEnd = null;\n        let presetChipWaveStartOffset = null;\n        let presetChipWaveLoopMode = null;\n        let presetChipWavePlayBackwards = false;\n        let parsedSampleOptions = false;\n        let optionsStartIndex = url.indexOf(\"!\");\n        let optionsEndIndex = -1;\n        if (optionsStartIndex === 0) {\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\n            if (optionsEndIndex !== -1) {\n                const rawOptions = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\n                for (const rawOption of rawOptions) {\n                    const optionCode = rawOption.charAt(0);\n                    const optionData = rawOption.slice(1, rawOption.length);\n                    if (optionCode === \"s\") {\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\n                    }\n                    else if (optionCode === \"r\") {\n                        customRootKey = parseFloatWithDefault(optionData, 60);\n                    }\n                    else if (optionCode === \"p\") {\n                        isCustomPercussive = true;\n                    }\n                    else if (optionCode === \"a\") {\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopStart != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"b\") {\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopEnd != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"c\") {\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveStartOffset != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"d\") {\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopMode != null) {\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"e\") {\n                        presetChipWavePlayBackwards = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    }\n                }\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\n                parsedSampleOptions = true;\n            }\n        }\n        let parsedUrl = null;\n        if (Song._isProperUrl(urlSliced)) {\n            if (OFFLINE) {\n                parsedUrl = urlSliced;\n            }\n            else {\n                parsedUrl = new URL(urlSliced);\n            }\n        }\n        else {\n            alert(url + \" is not a valid url\");\n            return false;\n        }\n        if (parseOldSyntax) {\n            if (!parsedSampleOptions && parsedUrl != null) {\n                if (url.indexOf(\"@\") != -1) {\n                    urlSliced = url.replaceAll(\"@\", \"\");\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    isCustomPercussive = true;\n                }\n                function sliceForSampleRate() {\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\n                }\n                function sliceForRootKey() {\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\n                }\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\n                        sliceForRootKey();\n                        sliceForSampleRate();\n                    }\n                    else {\n                        sliceForSampleRate();\n                        sliceForRootKey();\n                    }\n                }\n                else {\n                    if (url.indexOf(\",\") != -1) {\n                        sliceForSampleRate();\n                    }\n                    if (url.indexOf(\"!\") != -1) {\n                        sliceForRootKey();\n                    }\n                }\n            }\n        }\n        if (parsedUrl != null) {\n            let urlWithNamedOptions = urlSliced;\n            const namedOptions = [];\n            if (customSampleRate !== 44100)\n                namedOptions.push(\"s\" + customSampleRate);\n            if (customRootKey !== 60)\n                namedOptions.push(\"r\" + customRootKey);\n            if (isCustomPercussive)\n                namedOptions.push(\"p\");\n            if (presetIsUsingAdvancedLoopControls) {\n                if (presetChipWaveLoopStart != null)\n                    namedOptions.push(\"a\" + presetChipWaveLoopStart);\n                if (presetChipWaveLoopEnd != null)\n                    namedOptions.push(\"b\" + presetChipWaveLoopEnd);\n                if (presetChipWaveStartOffset != null)\n                    namedOptions.push(\"c\" + presetChipWaveStartOffset);\n                if (presetChipWaveLoopMode != null)\n                    namedOptions.push(\"d\" + presetChipWaveLoopMode);\n                if (presetChipWavePlayBackwards)\n                    namedOptions.push(\"e\");\n            }\n            if (namedOptions.length > 0) {\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\n            }\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\n            let name;\n            if (OFFLINE) {\n                name = decodeURIComponent(parsedUrl.replace(/^([^\\/]*\\/)+/, \"\"));\n            }\n            else {\n                name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\n            }\n            const expression = 1.0;\n            Config.chipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultIntegratedSamples,\n                index: chipWaveIndex,\n            };\n            Config.rawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamples,\n                index: chipWaveIndex,\n            };\n            Config.rawRawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamples,\n                index: chipWaveIndex,\n            };\n            const customSamplePresetSettings = {\n                \"type\": \"chip\",\n                \"eqFilter\": [],\n                \"effects\": [],\n                \"transition\": \"normal\",\n                \"fadeInSeconds\": 0,\n                \"fadeOutTicks\": -3,\n                \"chord\": \"harmony\",\n                \"wave\": name,\n                \"unison\": \"none\",\n                \"envelopes\": [],\n            };\n            if (presetIsUsingAdvancedLoopControls) {\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\n            }\n            const customSamplePreset = {\n                index: 0,\n                name: name,\n                midiProgram: 80,\n                settings: customSamplePresetSettings,\n            };\n            customSamplePresets.push(customSamplePreset);\n            if (!Config.willReloadForCustomSamples) {\n                const rawLoopOptions = {\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\n                };\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\n            }\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\n            sampleLoadingState.totalSamples++;\n        }\n        return true;\n    }\n    static _restoreChipWaveListToDefault() {\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n    }\n    static _clearSamples() {\n        EditorConfig.customSamples = null;\n        Song._restoreChipWaveListToDefault();\n        sampleLoadingState.statusTable = {};\n        sampleLoadingState.urlTable = {};\n        sampleLoadingState.totalSamples = 0;\n        sampleLoadingState.samplesLoaded = 0;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n    }\n    toJsonObject(enableIntro = true, loopCount = 1, enableOutro = true) {\n        const channelArray = [];\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel = this.channels[channelIndex];\n            const instrumentArray = [];\n            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n            const isModChannel = this.getChannelIsMod(channelIndex);\n            for (const instrument of channel.instruments) {\n                instrumentArray.push(instrument.toJsonObject());\n            }\n            const patternArray = [];\n            for (const pattern of channel.patterns) {\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\n            }\n            const sequenceArray = [];\n            if (enableIntro)\n                for (let i = 0; i < this.loopStart; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            for (let l = 0; l < loopCount; l++)\n                for (let i = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            if (enableOutro)\n                for (let i = this.loopStart + this.loopLength; i < this.barCount; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            const channelObject = {\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\n                \"name\": channel.name,\n                \"instruments\": instrumentArray,\n                \"patterns\": patternArray,\n                \"sequence\": sequenceArray,\n            };\n            if (!isNoiseChannel) {\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\n            }\n            channelArray.push(channelObject);\n        }\n        const result = {\n            \"name\": this.title,\n            \"format\": Song._format,\n            \"version\": Song._latestSlarmoosBoxVersion,\n            \"scale\": Config.scales[this.scale].name,\n            \"customScale\": this.scaleCustom,\n            \"key\": Config.keys[this.key].name,\n            \"keyOctave\": this.octave,\n            \"introBars\": this.loopStart,\n            \"loopBars\": this.loopLength,\n            \"beatsPerBar\": this.beatsPerBar,\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n            \"beatsPerMinute\": this.tempo,\n            \"reverb\": this.reverb,\n            \"masterGain\": this.masterGain,\n            \"compressionThreshold\": this.compressionThreshold,\n            \"limitThreshold\": this.limitThreshold,\n            \"limitDecay\": this.limitDecay,\n            \"limitRise\": this.limitRise,\n            \"limitRatio\": this.limitRatio,\n            \"compressionRatio\": this.compressionRatio,\n            \"songEq\": this.eqFilter.toJsonObject(),\n            \"layeredInstruments\": this.layeredInstruments,\n            \"patternInstruments\": this.patternInstruments,\n            \"channels\": channelArray,\n        };\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            result[\"songEq\" + i] = this.eqSubFilters[i];\n        }\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n            result[\"customSamples\"] = EditorConfig.customSamples;\n        }\n        return result;\n    }\n    fromJsonObject(jsonObject, jsonFormat = \"auto\") {\n        this.initToDefault(true);\n        if (!jsonObject)\n            return;\n        if (jsonFormat == \"auto\") {\n            if (jsonObject[\"format\"] == \"BeepBox\") {\n                if (jsonObject[\"riff\"] != undefined) {\n                    jsonFormat = \"modbox\";\n                }\n                if (jsonObject[\"masterGain\"] != undefined) {\n                    jsonFormat = \"jummbox\";\n                }\n            }\n        }\n        const format = (jsonFormat == \"auto\" ? jsonObject[\"format\"] : jsonFormat).toLowerCase();\n        if (jsonObject[\"name\"] != undefined) {\n            this.title = jsonObject[\"name\"];\n        }\n        if (jsonObject[\"customSamples\"] != undefined) {\n            const customSamples = jsonObject[\"customSamples\"];\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\n                Config.willReloadForCustomSamples = true;\n                Song._restoreChipWaveListToDefault();\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls = [];\n                const customSamplePresets = [];\n                for (const url of customSamples) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n                    else {\n                        const parseOldSyntax = false;\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        }\n        else {\n            let shouldLoadLegacySamples = false;\n            if (jsonObject[\"channels\"] != undefined) {\n                for (let channelIndex = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                    const channelObject = jsonObject[\"channels\"][channelIndex];\n                    if (channelObject[\"type\"] !== \"pitch\") {\n                        continue;\n                    }\n                    if (Array.isArray(channelObject[\"instruments\"])) {\n                        const instrumentObjects = channelObject[\"instruments\"];\n                        for (let i = 0; i < instrumentObjects.length; i++) {\n                            const instrumentObject = instrumentObjects[i];\n                            if (instrumentObject[\"type\"] !== \"chip\") {\n                                continue;\n                            }\n                            if (instrumentObject[\"wave\"] == null) {\n                                continue;\n                            }\n                            const waveName = instrumentObject[\"wave\"];\n                            const names = [\n                                \"paandorasbox kick\",\n                                \"paandorasbox snare\",\n                                \"paandorasbox piano1\",\n                                \"paandorasbox WOW\",\n                                \"paandorasbox overdrive\",\n                                \"paandorasbox trumpet\",\n                                \"paandorasbox saxophone\",\n                                \"paandorasbox orchestrahit\",\n                                \"paandorasbox detatched violin\",\n                                \"paandorasbox synth\",\n                                \"paandorasbox sonic3snare\",\n                                \"paandorasbox come on\",\n                                \"paandorasbox choir\",\n                                \"paandorasbox overdriveguitar\",\n                                \"paandorasbox flute\",\n                                \"paandorasbox legato violin\",\n                                \"paandorasbox tremolo violin\",\n                                \"paandorasbox amen break\",\n                                \"paandorasbox pizzicato violin\",\n                                \"paandorasbox tim allen grunt\",\n                                \"paandorasbox tuba\",\n                                \"paandorasbox loopingcymbal\",\n                                \"paandorasbox standardkick\",\n                                \"paandorasbox standardsnare\",\n                                \"paandorasbox closedhihat\",\n                                \"paandorasbox foothihat\",\n                                \"paandorasbox openhihat\",\n                                \"paandorasbox crashcymbal\",\n                                \"paandorasbox pianoC4\",\n                                \"paandorasbox liver pad\",\n                                \"paandorasbox marimba\",\n                                \"paandorasbox susdotwav\",\n                                \"paandorasbox wackyboxtts\",\n                                \"paandorasbox peppersteak_1\",\n                                \"paandorasbox peppersteak_2\",\n                                \"paandorasbox vinyl_noise\",\n                                \"paandorasbeta slap bass\",\n                                \"paandorasbeta HD EB overdrive guitar\",\n                                \"paandorasbeta sunsoft bass\",\n                                \"paandorasbeta masculine choir\",\n                                \"paandorasbeta feminine choir\",\n                                \"paandorasbeta tololoche\",\n                                \"paandorasbeta harp\",\n                                \"paandorasbeta pan flute\",\n                                \"paandorasbeta krumhorn\",\n                                \"paandorasbeta timpani\",\n                                \"paandorasbeta crowd hey\",\n                                \"paandorasbeta wario land 4 brass\",\n                                \"paandorasbeta wario land 4 rock organ\",\n                                \"paandorasbeta wario land 4 DAOW\",\n                                \"paandorasbeta wario land 4 hour chime\",\n                                \"paandorasbeta wario land 4 tick\",\n                                \"paandorasbeta kirby kick\",\n                                \"paandorasbeta kirby snare\",\n                                \"paandorasbeta kirby bongo\",\n                                \"paandorasbeta kirby click\",\n                                \"paandorasbeta sonor kick\",\n                                \"paandorasbeta sonor snare\",\n                                \"paandorasbeta sonor snare (left hand)\",\n                                \"paandorasbeta sonor snare (right hand)\",\n                                \"paandorasbeta sonor high tom\",\n                                \"paandorasbeta sonor low tom\",\n                                \"paandorasbeta sonor hihat (closed)\",\n                                \"paandorasbeta sonor hihat (half opened)\",\n                                \"paandorasbeta sonor hihat (open)\",\n                                \"paandorasbeta sonor hihat (open tip)\",\n                                \"paandorasbeta sonor hihat (pedal)\",\n                                \"paandorasbeta sonor crash\",\n                                \"paandorasbeta sonor crash (tip)\",\n                                \"paandorasbeta sonor ride\"\n                            ];\n                            const oldNames = [\n                                \"pandoraasbox kick\",\n                                \"pandoraasbox snare\",\n                                \"pandoraasbox piano1\",\n                                \"pandoraasbox WOW\",\n                                \"pandoraasbox overdrive\",\n                                \"pandoraasbox trumpet\",\n                                \"pandoraasbox saxophone\",\n                                \"pandoraasbox orchestrahit\",\n                                \"pandoraasbox detatched violin\",\n                                \"pandoraasbox synth\",\n                                \"pandoraasbox sonic3snare\",\n                                \"pandoraasbox come on\",\n                                \"pandoraasbox choir\",\n                                \"pandoraasbox overdriveguitar\",\n                                \"pandoraasbox flute\",\n                                \"pandoraasbox legato violin\",\n                                \"pandoraasbox tremolo violin\",\n                                \"pandoraasbox amen break\",\n                                \"pandoraasbox pizzicato violin\",\n                                \"pandoraasbox tim allen grunt\",\n                                \"pandoraasbox tuba\",\n                                \"pandoraasbox loopingcymbal\",\n                                \"pandoraasbox standardkick\",\n                                \"pandoraasbox standardsnare\",\n                                \"pandoraasbox closedhihat\",\n                                \"pandoraasbox foothihat\",\n                                \"pandoraasbox openhihat\",\n                                \"pandoraasbox crashcymbal\",\n                                \"pandoraasbox pianoC4\",\n                                \"pandoraasbox liver pad\",\n                                \"pandoraasbox marimba\",\n                                \"pandoraasbox susdotwav\",\n                                \"pandoraasbox wackyboxtts\",\n                                \"pandoraasbox peppersteak_1\",\n                                \"pandoraasbox peppersteak_2\",\n                                \"pandoraasbox vinyl_noise\",\n                                \"pandoraasbeta slap bass\",\n                                \"pandoraasbeta HD EB overdrive guitar\",\n                                \"pandoraasbeta sunsoft bass\",\n                                \"pandoraasbeta masculine choir\",\n                                \"pandoraasbeta feminine choir\",\n                                \"pandoraasbeta tololoche\",\n                                \"pandoraasbeta harp\",\n                                \"pandoraasbeta pan flute\",\n                                \"pandoraasbeta krumhorn\",\n                                \"pandoraasbeta timpani\",\n                                \"pandoraasbeta crowd hey\",\n                                \"pandoraasbeta wario land 4 brass\",\n                                \"pandoraasbeta wario land 4 rock organ\",\n                                \"pandoraasbeta wario land 4 DAOW\",\n                                \"pandoraasbeta wario land 4 hour chime\",\n                                \"pandoraasbeta wario land 4 tick\",\n                                \"pandoraasbeta kirby kick\",\n                                \"pandoraasbeta kirby snare\",\n                                \"pandoraasbeta kirby bongo\",\n                                \"pandoraasbeta kirby click\",\n                                \"pandoraasbeta sonor kick\",\n                                \"pandoraasbeta sonor snare\",\n                                \"pandoraasbeta sonor snare (left hand)\",\n                                \"pandoraasbeta sonor snare (right hand)\",\n                                \"pandoraasbeta sonor high tom\",\n                                \"pandoraasbeta sonor low tom\",\n                                \"pandoraasbeta sonor hihat (closed)\",\n                                \"pandoraasbeta sonor hihat (half opened)\",\n                                \"pandoraasbeta sonor hihat (open)\",\n                                \"pandoraasbeta sonor hihat (open tip)\",\n                                \"pandoraasbeta sonor hihat (pedal)\",\n                                \"pandoraasbeta sonor crash\",\n                                \"pandoraasbeta sonor crash (tip)\",\n                                \"pandoraasbeta sonor ride\"\n                            ];\n                            const veryOldNames = [\n                                \"kick\",\n                                \"snare\",\n                                \"piano1\",\n                                \"WOW\",\n                                \"overdrive\",\n                                \"trumpet\",\n                                \"saxophone\",\n                                \"orchestrahit\",\n                                \"detatched violin\",\n                                \"synth\",\n                                \"sonic3snare\",\n                                \"come on\",\n                                \"choir\",\n                                \"overdriveguitar\",\n                                \"flute\",\n                                \"legato violin\",\n                                \"tremolo violin\",\n                                \"amen break\",\n                                \"pizzicato violin\",\n                                \"tim allen grunt\",\n                                \"tuba\",\n                                \"loopingcymbal\",\n                                \"standardkick\",\n                                \"standardsnare\",\n                                \"closedhihat\",\n                                \"foothihat\",\n                                \"openhihat\",\n                                \"crashcymbal\",\n                                \"pianoC4\",\n                                \"liver pad\",\n                                \"marimba\",\n                                \"susdotwav\",\n                                \"wackyboxtts\"\n                            ];\n                            if (names.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                            }\n                            else if (oldNames.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\n                            }\n                            else if (veryOldNames.includes(waveName)) {\n                                if ((waveName === \"trumpet\" || waveName === \"flute\") && (format != \"paandorasbox\")) {\n                                }\n                                else {\n                                    shouldLoadLegacySamples = true;\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (shouldLoadLegacySamples) {\n                Config.willReloadForCustomSamples = true;\n                Song._restoreChipWaveListToDefault();\n                loadBuiltInSamples(0);\n                EditorConfig.customSamples = [\"legacySamples\"];\n            }\n            else {\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n                    Config.willReloadForCustomSamples = true;\n                    Song._clearSamples();\n                }\n            }\n        }\n        this.scale = 0;\n        if (jsonObject[\"scale\"] != undefined) {\n            const oldScaleNames = {\n                \"romani :)\": \"double harmonic :)\",\n                \"romani :(\": \"double harmonic :(\",\n                \"dbl harmonic :)\": \"double harmonic :)\",\n                \"dbl harmonic :(\": \"double harmonic :(\",\n                \"enigma\": \"strange\",\n            };\n            const scaleName = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n            const scale = Config.scales.findIndex(scale => scale.name == scaleName);\n            if (scale != -1)\n                this.scale = scale;\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                if (jsonObject[\"customScale\"] != undefined) {\n                    for (var i of jsonObject[\"customScale\"].keys()) {\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\n                    }\n                }\n            }\n        }\n        if (jsonObject[\"key\"] != undefined) {\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\n            }\n            else if (typeof (jsonObject[\"key\"]) == \"string\") {\n                const key = jsonObject[\"key\"];\n                if (key === \"C+\") {\n                    this.key = 0;\n                    this.octave = 1;\n                }\n                else if (key === \"G- (actually F#-)\") {\n                    this.key = 6;\n                    this.octave = -1;\n                }\n                else if (key === \"C-\") {\n                    this.key = 0;\n                    this.octave = -1;\n                }\n                else if (key === \"oh no (F-)\") {\n                    this.key = 5;\n                    this.octave = -1;\n                }\n                else {\n                    const letter = key.charAt(0).toUpperCase();\n                    const symbol = key.charAt(1).toLowerCase();\n                    const letterMap = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\n                    const accidentalMap = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\n                    let index = letterMap[letter];\n                    const offset = accidentalMap[symbol];\n                    if (index != undefined) {\n                        if (offset != undefined)\n                            index += offset;\n                        if (index < 0)\n                            index += 12;\n                        index = index % 12;\n                        this.key = index;\n                    }\n                }\n            }\n        }\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n        }\n        if (jsonObject[\"keyOctave\"] != undefined) {\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\n        }\n        let legacyGlobalReverb = 0;\n        if (jsonObject[\"reverb\"] != undefined) {\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\n        }\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n        }\n        let importedPartsPerBeat = 4;\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\n            if (this.rhythm == -1) {\n                this.rhythm = 1;\n            }\n        }\n        if (jsonObject[\"masterGain\"] != undefined) {\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\n        }\n        else {\n            this.masterGain = 1.0;\n        }\n        if (jsonObject[\"limitThreshold\"] != undefined) {\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\n        }\n        else {\n            this.limitThreshold = 1.0;\n        }\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\n        }\n        else {\n            this.compressionThreshold = 1.0;\n        }\n        if (jsonObject[\"limitRise\"] != undefined) {\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\n        }\n        else {\n            this.limitRise = 4000.0;\n        }\n        if (jsonObject[\"limitDecay\"] != undefined) {\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\n        }\n        else {\n            this.limitDecay = 4.0;\n        }\n        if (jsonObject[\"limitRatio\"] != undefined) {\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\n        }\n        else {\n            this.limitRatio = 1.0;\n        }\n        if (jsonObject[\"compressionRatio\"] != undefined) {\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\n        }\n        else {\n            this.compressionRatio = 1.0;\n        }\n        if (jsonObject[\"songEq\"] != undefined) {\n            this.eqFilter.fromJsonObject(jsonObject[\"songEq\"]);\n        }\n        else {\n            this.eqFilter.reset();\n        }\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            if (jsonObject[\"songEq\" + i]) {\n                this.eqSubFilters[i] = jsonObject[\"songEq\" + i];\n            }\n            else {\n                this.eqSubFilters[i] = null;\n            }\n        }\n        let maxInstruments = 1;\n        let maxPatterns = 1;\n        let maxBars = 1;\n        if (jsonObject[\"channels\"] != undefined) {\n            for (const channelObject of jsonObject[\"channels\"]) {\n                if (channelObject[\"instruments\"])\n                    maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n                if (channelObject[\"patterns\"])\n                    maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n                if (channelObject[\"sequence\"])\n                    maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n            }\n        }\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n        }\n        else {\n            this.layeredInstruments = false;\n        }\n        if (jsonObject[\"patternInstruments\"] != undefined) {\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\n        }\n        else {\n            this.patternInstruments = (maxInstruments > 1);\n        }\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n        this.barCount = Math.min(maxBars, Config.barCountMax);\n        if (jsonObject[\"introBars\"] != undefined) {\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n        }\n        if (jsonObject[\"loopBars\"] != undefined) {\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n        }\n        const newPitchChannels = [];\n        const newNoiseChannels = [];\n        const newModChannels = [];\n        if (jsonObject[\"channels\"] != undefined) {\n            for (let channelIndex = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                let channelObject = jsonObject[\"channels\"][channelIndex];\n                const channel = new Channel();\n                let isNoiseChannel = false;\n                let isModChannel = false;\n                if (channelObject[\"type\"] != undefined) {\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\n                }\n                else {\n                    isNoiseChannel = (channelIndex >= 3);\n                }\n                if (isNoiseChannel) {\n                    newNoiseChannels.push(channel);\n                }\n                else if (isModChannel) {\n                    newModChannels.push(channel);\n                }\n                else {\n                    newPitchChannels.push(channel);\n                }\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n                    if (isNoiseChannel)\n                        channel.octave = 0;\n                }\n                if (channelObject[\"name\"] != undefined) {\n                    channel.name = channelObject[\"name\"];\n                }\n                else {\n                    channel.name = \"\";\n                }\n                if (Array.isArray(channelObject[\"instruments\"])) {\n                    const instrumentObjects = channelObject[\"instruments\"];\n                    for (let i = 0; i < instrumentObjects.length; i++) {\n                        if (i >= this.getMaxInstrumentsPerChannel())\n                            break;\n                        const instrument = new Instrument(isNoiseChannel, isModChannel);\n                        channel.instruments[i] = instrument;\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb, format);\n                    }\n                }\n                for (let i = 0; i < this.patternsPerChannel; i++) {\n                    const pattern = new Pattern();\n                    channel.patterns[i] = pattern;\n                    let patternObject = undefined;\n                    if (channelObject[\"patterns\"])\n                        patternObject = channelObject[\"patterns\"][i];\n                    if (patternObject == undefined)\n                        continue;\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, format);\n                }\n                channel.patterns.length = this.patternsPerChannel;\n                for (let i = 0; i < this.barCount; i++) {\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n        }\n        if (newPitchChannels.length > Config.pitchChannelCountMax)\n            newPitchChannels.length = Config.pitchChannelCountMax;\n        if (newNoiseChannels.length > Config.noiseChannelCountMax)\n            newNoiseChannels.length = Config.noiseChannelCountMax;\n        if (newModChannels.length > Config.modChannelCountMax)\n            newModChannels.length = Config.modChannelCountMax;\n        this.pitchChannelCount = newPitchChannels.length;\n        this.noiseChannelCount = newNoiseChannels.length;\n        this.modChannelCount = newModChannels.length;\n        this.channels.length = 0;\n        Array.prototype.push.apply(this.channels, newPitchChannels);\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\n        Array.prototype.push.apply(this.channels, newModChannels);\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n    getPattern(channelIndex, bar) {\n        if (bar < 0 || bar >= this.barCount)\n            return null;\n        const patternIndex = this.channels[channelIndex].bars[bar];\n        if (patternIndex == 0)\n            return null;\n        return this.channels[channelIndex].patterns[patternIndex - 1];\n    }\n    getBeatsPerMinute() {\n        return this.tempo;\n    }\n    static getNeededBits(maxValue) {\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n    }\n    restoreLimiterDefaults() {\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.limitRise = 4000.0;\n        this.limitDecay = 4.0;\n        this.limitThreshold = 1.0;\n        this.compressionThreshold = 1.0;\n        this.masterGain = 1.0;\n    }\n}\nSong._format = Config.jsonFormat;\nSong._oldestBeepboxVersion = 2;\nSong._latestBeepboxVersion = 9;\nSong._oldestJummBoxVersion = 1;\nSong._latestJummBoxVersion = 6;\nSong._oldestGoldBoxVersion = 1;\nSong._latestGoldBoxVersion = 4;\nSong._oldestUltraBoxVersion = 1;\nSong._latestUltraBoxVersion = 5;\nSong._oldestSlarmoosBoxVersion = 1;\nSong._latestSlarmoosBoxVersion = 5;\nSong._variant = 0x73;\nclass PickedString {\n    constructor() {\n        this.delayLine = null;\n        this.allPassG = 0.0;\n        this.allPassGDelta = 0.0;\n        this.sustainFilterA1 = 0.0;\n        this.sustainFilterA1Delta = 0.0;\n        this.sustainFilterA2 = 0.0;\n        this.sustainFilterA2Delta = 0.0;\n        this.sustainFilterB0 = 0.0;\n        this.sustainFilterB0Delta = 0.0;\n        this.sustainFilterB1 = 0.0;\n        this.sustainFilterB1Delta = 0.0;\n        this.sustainFilterB2 = 0.0;\n        this.sustainFilterB2Delta = 0.0;\n        this.reset();\n    }\n    reset() {\n        this.delayIndex = -1;\n        this.allPassSample = 0.0;\n        this.allPassPrevInput = 0.0;\n        this.sustainFilterSample = 0.0;\n        this.sustainFilterPrevOutput2 = 0.0;\n        this.sustainFilterPrevInput1 = 0.0;\n        this.sustainFilterPrevInput2 = 0.0;\n        this.fractionalDelaySample = 0.0;\n        this.prevDelayLength = -1.0;\n        this.delayResetOffset = 0;\n    }\n    update(synth, instrumentState, tone, stringIndex, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, sustainType) {\n        const allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n        const prevDelayLength = this.prevDelayLength;\n        const phaseDeltaStart = tone.phaseDeltas[stringIndex];\n        const phaseDeltaScale = tone.phaseDeltaScales[stringIndex];\n        const phaseDeltaEnd = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\n        const radiansPerSampleStart = Math.PI * 2.0 * phaseDeltaStart;\n        const radiansPerSampleEnd = Math.PI * 2.0 * phaseDeltaEnd;\n        const centerHarmonicStart = radiansPerSampleStart * 2.0;\n        const centerHarmonicEnd = radiansPerSampleEnd * 2.0;\n        const allPassRadiansStart = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\n        const allPassRadiansEnd = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\n        const shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n        const decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n        const decayCurveEnd = (Math.pow(100.0, stringDecayEnd) - 1.0) / 99.0;\n        const register = sustainType == 1 ? 0.25 : 0.0;\n        const registerShelfCenter = 15.6;\n        const registerLowpassCenter = 3.0 * synth.samplesPerSecond / 48000;\n        const decayRateStart = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        const decayRateEnd = Math.pow(0.5, decayCurveEnd * Math.pow(shelfRadians / (radiansPerSampleEnd * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        const expressionDecayStart = Math.pow(decayRateStart, 0.002);\n        const expressionDecayEnd = Math.pow(decayRateEnd, 0.002);\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const allPassGStart = Synth.tempFilterStartCoefficients.b[0];\n        const allPassPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const allPassGEnd = Synth.tempFilterEndCoefficients.b[0];\n        const allPassPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n        const brightnessType = sustainType == 0 ? 0 : 1;\n        if (brightnessType == 0) {\n            const shelfGainStart = Math.pow(decayRateStart, Config.stringDecayRate);\n            const shelfGainEnd = Math.pow(decayRateEnd, Config.stringDecayRate);\n            Synth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\n            Synth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\n        }\n        else {\n            const cornerHardness = Math.pow(brightnessType == 1 ? 0.0 : 1.0, 0.25);\n            const lowpass1stOrderCutoffRadiansStart = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\n            const lowpass1stOrderCutoffRadiansEnd = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd, .5);\n            const lowpass2ndOrderCutoffRadiansStart = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderCutoffRadiansEnd = lowpass1stOrderCutoffRadiansEnd * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderGainStart = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            const lowpass2ndOrderGainEnd = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            Synth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\n            Synth.tempFilterEndCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd), lowpass2ndOrderGainEnd);\n        }\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const sustainFilterA1Start = Synth.tempFilterStartCoefficients.a[1];\n        const sustainFilterA2Start = Synth.tempFilterStartCoefficients.a[2];\n        const sustainFilterB0Start = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\n        const sustainFilterB1Start = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\n        const sustainFilterB2Start = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\n        const sustainFilterPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const sustainFilterA1End = Synth.tempFilterEndCoefficients.a[1];\n        const sustainFilterA2End = Synth.tempFilterEndCoefficients.a[2];\n        const sustainFilterB0End = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\n        const sustainFilterB1End = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\n        const sustainFilterB2End = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\n        const sustainFilterPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n        const periodLengthStart = 1.0 / phaseDeltaStart;\n        const periodLengthEnd = 1.0 / phaseDeltaEnd;\n        const minBufferLength = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\n        const delayLength = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\n        const delayLengthEnd = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\n        this.prevDelayLength = delayLength;\n        this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\n        this.allPassG = allPassGStart;\n        this.sustainFilterA1 = sustainFilterA1Start;\n        this.sustainFilterA2 = sustainFilterA2Start;\n        this.sustainFilterB0 = sustainFilterB0Start;\n        this.sustainFilterB1 = sustainFilterB1Start;\n        this.sustainFilterB2 = sustainFilterB2Start;\n        this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\n        this.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\n        this.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\n        this.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\n        this.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\n        this.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\n        const pitchChanged = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\n        const reinitializeImpulse = (this.delayIndex == -1 || pitchChanged);\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\n            const likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\n            const newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n            if (!reinitializeImpulse && this.delayLine != null) {\n                const oldDelayBufferMask = (this.delayLine.length - 1) >> 0;\n                const startCopyingFromIndex = this.delayIndex + this.delayResetOffset;\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\n                for (let i = 0; i < this.delayLine.length; i++) {\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                }\n            }\n            this.delayLine = newDelayLine;\n        }\n        const delayLine = this.delayLine;\n        const delayBufferMask = (delayLine.length - 1) >> 0;\n        if (reinitializeImpulse) {\n            this.delayIndex = 0;\n            this.allPassSample = 0.0;\n            this.allPassPrevInput = 0.0;\n            this.sustainFilterSample = 0.0;\n            this.sustainFilterPrevOutput2 = 0.0;\n            this.sustainFilterPrevInput1 = 0.0;\n            this.sustainFilterPrevInput2 = 0.0;\n            this.fractionalDelaySample = 0.0;\n            const startImpulseFrom = -delayLength;\n            const startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart / 2);\n            const stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart * 2);\n            this.delayResetOffset = stopZerosAt;\n            for (let i = startZerosFrom; i <= stopZerosAt; i++) {\n                delayLine[i & delayBufferMask] = 0.0;\n            }\n            const impulseWave = instrumentState.wave;\n            const impulseWaveLength = impulseWave.length - 1;\n            const impulsePhaseDelta = impulseWaveLength / periodLengthStart;\n            const fadeDuration = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\n            const startImpulseFromSample = Math.ceil(startImpulseFrom);\n            const stopImpulseAt = startImpulseFrom + periodLengthStart + fadeDuration;\n            const stopImpulseAtSample = stopImpulseAt;\n            let impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n            let prevWaveIntegral = 0.0;\n            for (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n                const impulsePhaseInt = impulsePhase | 0;\n                const index = impulsePhaseInt % impulseWaveLength;\n                let nextWaveIntegral = impulseWave[index];\n                const phaseRatio = impulsePhase - impulsePhaseInt;\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\n                const sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n                const fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n                const fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n                const combinedFade = fadeIn * fadeOut;\n                const curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade);\n                delayLine[i & delayBufferMask] += sample * curvedFade;\n                prevWaveIntegral = nextWaveIntegral;\n                impulsePhase += impulsePhaseDelta;\n            }\n        }\n    }\n}\nclass EnvelopeComputer {\n    constructor() {\n        this.noteSecondsStart = [];\n        this.noteSecondsStartUnscaled = 0.0;\n        this.noteSecondsEnd = [];\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksStart = 0.0;\n        this.noteTicksEnd = 0.0;\n        this.noteSizeStart = Config.noteSizeMax;\n        this.noteSizeEnd = Config.noteSizeMax;\n        this.prevNoteSize = Config.noteSizeMax;\n        this.nextNoteSize = Config.noteSizeMax;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsStart = [];\n        this.prevNoteSecondsStartUnscaled = 0.0;\n        this.prevNoteSecondsEnd = [];\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksStart = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this.tickTimeEnd = [];\n        this.drumsetFilterEnvelopeStart = 0.0;\n        this.drumsetFilterEnvelopeEnd = 0.0;\n        this.prevSlideStart = false;\n        this.prevSlideEnd = false;\n        this.nextSlideStart = false;\n        this.nextSlideEnd = false;\n        this.prevSlideRatioStart = 0.0;\n        this.prevSlideRatioEnd = 0.0;\n        this.nextSlideRatioStart = 0.0;\n        this.nextSlideRatioEnd = 0.0;\n        this.startPinTickAbsolute = null;\n        this.startPinTickDefaultPitch = null;\n        this.startPinTickPitch = null;\n        this.envelopeStarts = [];\n        this.envelopeEnds = [];\n        this._modifiedEnvelopeIndices = [];\n        this._modifiedEnvelopeCount = 0;\n        this.lowpassCutoffDecayVolumeCompensation = 1.0;\n        const length = 56;\n        for (let i = 0; i < length; i++) {\n            this.envelopeStarts[i] = 1.0;\n            this.envelopeEnds[i] = 1.0;\n        }\n        this.reset();\n    }\n    reset() {\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsEnd[envelopeIndex] = 0.0;\n            this.prevNoteSecondsEnd[envelopeIndex] = 0.0;\n        }\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksEnd = 0.0;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this._modifiedEnvelopeCount = 0;\n        this.drumsetFilterEnvelopeStart = 0.0;\n        this.drumsetFilterEnvelopeEnd = 0.0;\n        this.startPinTickAbsolute = null;\n        this.startPinTickDefaultPitch = null;\n        this.startPinTickPitch = null;\n    }\n    computeEnvelopes(instrument, currentPart, tickTimeStart, tickTimeStartReal, secondsPerTick, tone, timeScale, instrumentState, synth, channelIndex, instrumentIndex) {\n        const secondsPerTickUnscaled = secondsPerTick;\n        const transition = instrument.getTransition();\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n            this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled;\n            this.prevNoteTicksEnd = this.noteTicksEnd;\n            this._prevNoteSizeFinal = this._noteSizeFinal;\n            this.noteSecondsEndUnscaled = 0.0;\n            this.noteTicksEnd = 0.0;\n            for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n                this.prevNoteSecondsEnd[envelopeIndex] = this.noteSecondsEnd[envelopeIndex];\n                this.noteSecondsEnd[envelopeIndex] = 0.0;\n            }\n        }\n        if (tone != null) {\n            if (tone.note != null) {\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n            }\n            else {\n                this._noteSizeFinal = Config.noteSizeMax;\n            }\n        }\n        const tickTimeEnd = [];\n        const tickTimeEndReal = tickTimeStartReal + 1.0;\n        const noteSecondsStart = [];\n        const noteSecondsStartUnscaled = this.noteSecondsEndUnscaled;\n        const noteSecondsEnd = [];\n        const noteSecondsEndUnscaled = noteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const noteTicksStart = this.noteTicksEnd;\n        const noteTicksEnd = noteTicksStart + 1.0;\n        const prevNoteSecondsStart = [];\n        const prevNoteSecondsEnd = [];\n        const prevNoteSecondsStartUnscaled = this.prevNoteSecondsEndUnscaled;\n        const prevNoteSecondsEndUnscaled = prevNoteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const prevNoteTicksStart = this.prevNoteTicksEnd;\n        const prevNoteTicksEnd = prevNoteTicksStart + 1.0;\n        const beatsPerTick = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n        const beatTimeStart = [];\n        const beatTimeEnd = [];\n        let noteSizeStart = this._noteSizeFinal;\n        let noteSizeEnd = this._noteSizeFinal;\n        let prevNoteSize = this._prevNoteSizeFinal;\n        let nextNoteSize = 0;\n        let prevSlideStart = false;\n        let prevSlideEnd = false;\n        let nextSlideStart = false;\n        let nextSlideEnd = false;\n        let prevSlideRatioStart = 0.0;\n        let prevSlideRatioEnd = 0.0;\n        let nextSlideRatioStart = 0.0;\n        let nextSlideRatioEnd = 0.0;\n        if (tone == null) {\n            this.startPinTickAbsolute = null;\n            this.startPinTickDefaultPitch = null;\n        }\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\n            const endPinIndex = tone.note.getEndPinIndex(currentPart);\n            const startPin = tone.note.pins[endPinIndex - 1];\n            const endPin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            if (this.startPinTickAbsolute == null || (!(transition.continues || transition.slides)) && tone.passedEndOfNote)\n                this.startPinTickAbsolute = startPinTick + synth.computeTicksSinceStart(true);\n            if (this.startPinTickDefaultPitch == null || tone.passedEndOfNote)\n                this.startPinTickDefaultPitch = this.getPitchValue(instrument, tone, instrumentState, false);\n            if (!tone.passedEndOfNote)\n                this.startPinTickPitch = this.getPitchValue(instrument, tone, instrumentState, true);\n            const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n            if (transition.slides) {\n                const noteStartTick = tone.noteStartPart * Config.ticksPerPart;\n                const noteEndTick = tone.noteEndPart * Config.ticksPerPart;\n                const noteLengthTicks = noteEndTick - noteStartTick;\n                const maximumSlideTicks = noteLengthTicks * 0.5;\n                const slideTicks = Math.min(maximumSlideTicks, transition.slideTicks);\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\n                        prevSlideStart = true;\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\n                    }\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\n                        prevSlideEnd = true;\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\n                    }\n                }\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\n                    nextNoteSize = tone.nextNote.pins[0].size;\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\n                        nextSlideStart = true;\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\n                    }\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\n                        nextSlideEnd = true;\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\n                    }\n                }\n            }\n        }\n        let lowpassCutoffDecayVolumeCompensation = 1.0;\n        let usedNoteSize = false;\n        for (let envelopeIndex = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n            let automationTarget;\n            let targetIndex;\n            let envelope;\n            let inverse = false;\n            let isDiscrete = false;\n            let perEnvelopeSpeed = 1;\n            let globalEnvelopeSpeed = 1;\n            let envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n            let perEnvelopeLowerBound = 0;\n            let perEnvelopeUpperBound = 1;\n            let timeSinceStart = 0;\n            let steps = 2;\n            let seed = 2;\n            let waveform = 0;\n            let startPinTickAbsolute = this.startPinTickAbsolute || 0.0;\n            let defaultPitch = this.startPinTickDefaultPitch || 0.0;\n            if (envelopeIndex == instrument.envelopeCount) {\n                if (usedNoteSize)\n                    break;\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n                targetIndex = 0;\n                envelope = Config.newEnvelopes.dictionary[\"note size\"];\n            }\n            else {\n                let envelopeSettings = instrument.envelopes[envelopeIndex];\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n                targetIndex = envelopeSettings.index;\n                envelope = Config.newEnvelopes[envelopeSettings.envelope];\n                inverse = instrument.envelopes[envelopeIndex].inverse;\n                isDiscrete = instrument.envelopes[envelopeIndex].discrete;\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                globalEnvelopeSpeed = Math.pow(instrument.envelopeSpeed, 2) / 144;\n                envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n                perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].perEnvelopeLowerBound;\n                perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].perEnvelopeUpperBound;\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope lower bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound != null) {\n                    perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound;\n                }\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope upper bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound != null) {\n                    perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound;\n                }\n                if (!(perEnvelopeLowerBound <= perEnvelopeUpperBound)) {\n                    perEnvelopeLowerBound = 0;\n                    perEnvelopeUpperBound = 1;\n                }\n                timeSinceStart = synth.computeTicksSinceStart();\n                steps = instrument.envelopes[envelopeIndex].steps;\n                seed = instrument.envelopes[envelopeIndex].seed;\n                if (instrument.envelopes[envelopeIndex].waveform >= (envelope.name == \"lfo\" ? 7 : 4)) {\n                    instrument.envelopes[envelopeIndex].waveform = 0;\n                }\n                waveform = instrument.envelopes[envelopeIndex].waveform;\n                if (!timeScale[envelopeIndex])\n                    timeScale[envelopeIndex] = 0;\n                const secondsPerTickScaled = secondsPerTick * timeScale[envelopeIndex];\n                if (!tickTimeStart[envelopeIndex])\n                    tickTimeStart[envelopeIndex] = 0;\n                tickTimeEnd[envelopeIndex] = tickTimeStart[envelopeIndex] ? tickTimeStart[envelopeIndex] + timeScale[envelopeIndex] : timeScale[envelopeIndex];\n                noteSecondsStart[envelopeIndex] = this.noteSecondsEnd[envelopeIndex] ? this.noteSecondsEnd[envelopeIndex] : 0;\n                prevNoteSecondsStart[envelopeIndex] = this.prevNoteSecondsEnd[envelopeIndex] ? this.prevNoteSecondsEnd[envelopeIndex] : 0;\n                noteSecondsEnd[envelopeIndex] = noteSecondsStart[envelopeIndex] ? noteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsStart[envelopeIndex] ? prevNoteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                beatTimeStart[envelopeIndex] = tickTimeStart[envelopeIndex] ? beatsPerTick * tickTimeStart[envelopeIndex] : beatsPerTick;\n                beatTimeEnd[envelopeIndex] = tickTimeEnd[envelopeIndex] ? beatsPerTick * tickTimeEnd[envelopeIndex] : beatsPerTick;\n                if (envelope.type == 1)\n                    usedNoteSize = true;\n            }\n            const pitch = (envelope.type == 2) ? this.computePitchEnvelope(instrument, envelopeIndex, (this.startPinTickPitch || this.getPitchValue(instrument, tone, instrumentState, true))) : 0;\n            if (automationTarget.computeIndex != null) {\n                const computeIndex = automationTarget.computeIndex + targetIndex;\n                let envelopeStart = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsStartUnscaled, noteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, noteSizeStart, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                if (prevSlideStart) {\n                    const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsStartUnscaled, prevNoteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n                }\n                if (nextSlideStart) {\n                    const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeStart[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n                }\n                let envelopeEnd = envelopeStart;\n                if (isDiscrete == false) {\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsEndUnscaled, noteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, noteSizeEnd, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    if (prevSlideEnd) {\n                        const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsEndUnscaled, prevNoteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n                    }\n                    if (nextSlideEnd) {\n                        const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeEnd[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n                    }\n                }\n                this.envelopeStarts[computeIndex] *= envelopeStart;\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\n                if (automationTarget.isFilter) {\n                    const filterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == 0) {\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope, perEnvelopeSpeed));\n                    }\n                }\n            }\n        }\n        this.noteSecondsStartUnscaled = noteSecondsStartUnscaled;\n        this.noteSecondsEndUnscaled = noteSecondsEndUnscaled;\n        this.noteTicksStart = noteTicksStart;\n        this.noteTicksEnd = noteTicksEnd;\n        this.prevNoteSecondsStartUnscaled = prevNoteSecondsStartUnscaled;\n        this.prevNoteSecondsEndUnscaled = prevNoteSecondsEndUnscaled;\n        this.prevNoteTicksStart = prevNoteTicksStart;\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsStart[envelopeIndex] = noteSecondsStart[envelopeIndex];\n            this.noteSecondsEnd[envelopeIndex] = noteSecondsEnd[envelopeIndex];\n            this.prevNoteSecondsStart[envelopeIndex] = prevNoteSecondsStart[envelopeIndex];\n            this.prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsEnd[envelopeIndex];\n        }\n        this.prevNoteSize = prevNoteSize;\n        this.nextNoteSize = nextNoteSize;\n        this.noteSizeStart = noteSizeStart;\n        this.noteSizeEnd = noteSizeEnd;\n        this.prevSlideStart = prevSlideStart;\n        this.prevSlideEnd = prevSlideEnd;\n        this.nextSlideStart = nextSlideStart;\n        this.nextSlideEnd = nextSlideEnd;\n        this.prevSlideRatioStart = prevSlideRatioStart;\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\n        this.nextSlideRatioStart = nextSlideRatioStart;\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n    }\n    clearEnvelopes() {\n        for (let envelopeIndex = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\n            const computeIndex = this._modifiedEnvelopeIndices[envelopeIndex];\n            this.envelopeStarts[computeIndex] = 1.0;\n            this.envelopeEnds[computeIndex] = 1.0;\n        }\n        this._modifiedEnvelopeCount = 0;\n    }\n    static computeEnvelope(envelope, perEnvelopeSpeed, globalEnvelopeSpeed, unspedTime, time, beats, timeSinceStart, noteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, isDrumset = false, steps, seed, waveform, defaultPitch, notePinStart) {\n        const envelopeSpeed = isDrumset ? envelope.speed : 1;\n        const boundAdjust = (perEnvelopeUpperBound - perEnvelopeLowerBound);\n        switch (envelope.type) {\n            case 0: return perEnvelopeUpperBound;\n            case 1:\n                if (!inverse) {\n                    return Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust) + perEnvelopeLowerBound;\n                }\n                else {\n                    return perEnvelopeUpperBound - Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust);\n                }\n            case 2:\n                return pitch;\n            case 3:\n                const hashMax = 0xffffffff;\n                const step = steps;\n                switch (waveform) {\n                    case 0:\n                        if (step <= 1)\n                            return 1;\n                        const timeHash = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(timeHash * step / (hashMax + 1)) / step;\n                        }\n                        else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(timeHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case 1:\n                        const pitchHash = xxHash32(defaultPitch + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * pitchHash / (hashMax + 1);\n                        }\n                        else {\n                            return boundAdjust * pitchHash / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    case 2:\n                        if (step <= 1)\n                            return 1;\n                        const noteHash = xxHash32(notePinStart + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(noteHash * step / (hashMax + 1)) / step;\n                        }\n                        else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(noteHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case 3:\n                        const timeHashA = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        const timeHashB = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed + 256) / (256))) + \"\", seed);\n                        const weightedAverage = timeHashA * (1 - ((timeSinceStart * perEnvelopeSpeed) / (256)) % 1) + timeHashB * (((timeSinceStart * perEnvelopeSpeed) / (256)) % 1);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * weightedAverage / (hashMax + 1);\n                        }\n                        else {\n                            return boundAdjust * weightedAverage / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case 6:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (1.0 / (1.0 + time * envelopeSpeed));\n                }\n                else {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound;\n                }\n            case 7:\n                if (inverse) {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound;\n                }\n                else {\n                    return perEnvelopeUpperBound - boundAdjust / (1.0 + time * envelopeSpeed);\n                }\n            case 8:\n                switch (waveform) {\n                    case 0:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            return (perEnvelopeUpperBound / 2) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        }\n                    case 1:\n                        if (inverse) {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeUpperBound : perEnvelopeLowerBound;\n                        }\n                        else {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeLowerBound : perEnvelopeUpperBound;\n                        }\n                    case 2:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) - (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            return (perEnvelopeUpperBound / 2) + (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                    case 3:\n                        if (inverse) {\n                            return perEnvelopeUpperBound - (beats * envelopeSpeed) % 1 * boundAdjust;\n                        }\n                        else {\n                            return (beats * envelopeSpeed) % 1 * boundAdjust + perEnvelopeLowerBound;\n                        }\n                    case 4:\n                        let trap = 0;\n                        if (inverse) {\n                            trap = (perEnvelopeUpperBound / 2) - (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            trap = (perEnvelopeUpperBound / 2) + (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        return Math.max(perEnvelopeLowerBound, Math.min(perEnvelopeUpperBound, trap));\n                    case 5:\n                        if (steps <= 1)\n                            return 1;\n                        let saw = (beats * envelopeSpeed) % 1;\n                        if (inverse) {\n                            return perEnvelopeUpperBound - Math.floor(saw * steps) * boundAdjust / (steps - 1);\n                        }\n                        else {\n                            return Math.floor(saw * steps) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                        }\n                    case 6:\n                        if (steps <= 1)\n                            return 1;\n                        let tri = 0.5 + (inverse ? -1 : 1) * (1 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed));\n                        return Math.round(tri * (steps - 1)) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case 9:\n                if (inverse) {\n                    return (perEnvelopeUpperBound / 4) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 + (perEnvelopeLowerBound / 4);\n                }\n                else {\n                    return 0.5 + (perEnvelopeUpperBound / 4) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 - (perEnvelopeLowerBound / 4);\n                }\n            case 4:\n                if (inverse) {\n                    return Math.max(0, perEnvelopeUpperBound + 1.0 - Math.max(1.0 - perEnvelopeLowerBound, 1.0 - perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0));\n                }\n                else {\n                    return Math.max(1.0 + perEnvelopeLowerBound, 1.0 + perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0);\n                }\n            case 5:\n                const attack = 0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed);\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed));\n                }\n                else {\n                    return boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed)) + perEnvelopeLowerBound;\n                }\n            case 10:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * Math.pow(2, -envelopeSpeed * time);\n                }\n                else {\n                    return boundAdjust * Math.pow(2, -envelopeSpeed * time) + perEnvelopeLowerBound;\n                }\n            case 14:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed)));\n                }\n                else {\n                    return boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed))) + perEnvelopeLowerBound;\n                }\n            case 11:\n                let temp = 0.5 - Math.cos(beats * envelopeSpeed) * 0.5;\n                temp = 1.0 / (1.0 + time * (envelopeSpeed - (temp / (1.5 / envelopeSpeed))));\n                temp = temp > 0.0 ? temp : 0.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * temp;\n                }\n                else {\n                    return boundAdjust * temp + perEnvelopeLowerBound;\n                }\n            case 12: {\n                let lin = (1.0 - (time / (16 / envelopeSpeed)));\n                lin = lin > 0.0 ? lin : 0.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                }\n                else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case 13: {\n                let lin = (time / (16 / envelopeSpeed));\n                lin = lin < 1.0 ? lin : 1.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                }\n                else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case 15: {\n                if (inverse) {\n                    return Math.min(Math.max(perEnvelopeLowerBound, perEnvelopeUpperBound - boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0))), perEnvelopeUpperBound);\n                }\n                else {\n                    return Math.max(perEnvelopeLowerBound, boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0)) + perEnvelopeLowerBound);\n                }\n            }\n            default: throw new Error(\"Unrecognized operator envelope type.\");\n        }\n    }\n    getPitchValue(instrument, tone, instrumentState, calculateBends = true) {\n        if (tone && tone.pitchCount >= 1) {\n            const chord = instrument.getChord();\n            const arpeggiates = chord.arpeggiates;\n            const monophonic = chord.name == \"monophonic\";\n            const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n            const tonePitch = tone.pitches[arpeggiates ? getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio) : monophonic ? instrument.monoChordTone : 0];\n            if (calculateBends) {\n                return tone.lastInterval != tonePitch ? tonePitch + tone.lastInterval : tonePitch;\n            }\n            else {\n                return tonePitch;\n            }\n        }\n        return 0;\n    }\n    computePitchEnvelope(instrument, index, pitch = 0) {\n        let startNote = 0;\n        let endNote = Config.maxPitch;\n        let inverse = false;\n        let envelopeLowerBound = 0;\n        let envelopeUpperBound = 1;\n        if (instrument.isNoiseInstrument) {\n            endNote = Config.drumCount - 1;\n        }\n        if (index < instrument.envelopeCount && index !== -2) {\n            startNote = instrument.envelopes[index].pitchEnvelopeStart;\n            endNote = instrument.envelopes[index].pitchEnvelopeEnd;\n            inverse = instrument.envelopes[index].inverse;\n            envelopeLowerBound = instrument.envelopes[index].perEnvelopeLowerBound;\n            envelopeUpperBound = instrument.envelopes[index].perEnvelopeUpperBound;\n        }\n        if (startNote > endNote) {\n            startNote = 0;\n            endNote = instrument.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch;\n        }\n        const range = endNote - startNote + 1;\n        if (!inverse) {\n            if (pitch <= startNote) {\n                return envelopeLowerBound;\n            }\n            else if (pitch >= endNote) {\n                return envelopeUpperBound;\n            }\n            else {\n                return (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range + envelopeLowerBound;\n            }\n        }\n        else {\n            if (pitch <= startNote) {\n                return envelopeUpperBound;\n            }\n            else if (pitch >= endNote) {\n                return envelopeLowerBound;\n            }\n            else {\n                return envelopeUpperBound - (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range;\n            }\n        }\n    }\n    static getLowpassCutoffDecayVolumeCompensation(envelope, perEnvelopeSpeed = 1) {\n        if (envelope.type == 10)\n            return 1.25 + 0.025 * perEnvelopeSpeed;\n        if (envelope.type == 6)\n            return 1.0 + 0.02 * perEnvelopeSpeed;\n        return 1.0;\n    }\n    computeDrumsetEnvelopes(instrument, drumsetFilterEnvelope, beatsPerPart, partTimeStart, partTimeEnd) {\n        const pitch = 1;\n        function computeDrumsetEnvelope(unspedTime, time, beats, noteSize) {\n            return EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 1, 1, unspedTime, time, beats, 0, noteSize, pitch, false, 0, 1, true, 2, 2, 0, pitch, 0);\n        }\n        let drumsetFilterEnvelopeStart = computeDrumsetEnvelope(this.noteSecondsStartUnscaled, this.noteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.noteSizeStart);\n        if (this.prevSlideStart) {\n            const other = computeDrumsetEnvelope(this.prevNoteSecondsStartUnscaled, this.prevNoteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.prevNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.prevSlideRatioStart;\n        }\n        if (this.nextSlideStart) {\n            const other = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeStart, this.nextNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.nextSlideRatioStart;\n        }\n        let drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeStart;\n        drumsetFilterEnvelopeEnd = computeDrumsetEnvelope(this.noteSecondsEndUnscaled, this.noteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.noteSizeEnd);\n        if (this.prevSlideEnd) {\n            const other = computeDrumsetEnvelope(this.prevNoteSecondsEndUnscaled, this.prevNoteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.prevNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.prevSlideRatioEnd;\n        }\n        if (this.nextSlideEnd) {\n            const other = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeEnd, this.nextNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.nextSlideRatioEnd;\n        }\n        this.drumsetFilterEnvelopeStart = drumsetFilterEnvelopeStart;\n        this.drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeEnd;\n    }\n}\nclass Tone {\n    constructor() {\n        this.pitches = Array(Config.maxChordSize + 2).fill(0);\n        this.pitchCount = 0;\n        this.chordSize = 0;\n        this.drumsetPitch = null;\n        this.note = null;\n        this.prevNote = null;\n        this.nextNote = null;\n        this.prevNotePitchIndex = 0;\n        this.nextNotePitchIndex = 0;\n        this.freshlyAllocated = true;\n        this.atNoteStart = false;\n        this.isOnLastTick = false;\n        this.passedEndOfNote = false;\n        this.forceContinueAtStart = false;\n        this.forceContinueAtEnd = false;\n        this.noteStartPart = 0;\n        this.noteEndPart = 0;\n        this.ticksSinceReleased = 0;\n        this.liveInputSamplesHeld = 0;\n        this.lastInterval = 0;\n        this.stringSustainStart = 0;\n        this.stringSustainEnd = 0;\n        this.noiseSamples = [];\n        this.phases = [];\n        this.operatorWaves = [];\n        this.phaseDeltas = [];\n        this.directions = [];\n        this.chipWaveCompletions = [];\n        this.chipWavePrevWaves = [];\n        this.chipWaveCompletionsLastWave = [];\n        this.phaseDeltaScales = [];\n        this.expression = 0.0;\n        this.expressionDelta = 0.0;\n        this.operatorExpressions = [];\n        this.operatorExpressionDeltas = [];\n        this.prevPitchExpressions = Array(Config.maxPitchOrOperatorCount).fill(null);\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.pulseWidth = 0.0;\n        this.pulseWidthDelta = 0.0;\n        this.decimalOffset = 0.0;\n        this.supersawDynamism = 0.0;\n        this.supersawDynamismDelta = 0.0;\n        this.supersawUnisonDetunes = [];\n        this.supersawShape = 0.0;\n        this.supersawShapeDelta = 0.0;\n        this.supersawDelayLength = 0.0;\n        this.supersawDelayLengthDelta = 0.0;\n        this.supersawDelayLine = null;\n        this.supersawDelayIndex = -1;\n        this.supersawPrevPhaseDelta = null;\n        this.pickedStrings = [];\n        this.noteFilters = [];\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInput1 = 0.0;\n        this.initialNoteFilterInput2 = 0.0;\n        this.specialIntervalExpressionMult = 1.0;\n        this.feedbackOutputs = [];\n        this.feedbackMult = 0.0;\n        this.feedbackDelta = 0.0;\n        this.stereoVolumeLStart = 0.0;\n        this.stereoVolumeRStart = 0.0;\n        this.stereoVolumeLDelta = 0.0;\n        this.stereoVolumeRDelta = 0.0;\n        this.stereoDelayStart = 0.0;\n        this.stereoDelayEnd = 0.0;\n        this.stereoDelayDelta = 0.0;\n        this.customVolumeStart = 0.0;\n        this.customVolumeEnd = 0.0;\n        this.filterResonanceStart = 0.0;\n        this.filterResonanceDelta = 0.0;\n        this.isFirstOrder = false;\n        this.envelopeComputer = new EnvelopeComputer();\n        this.reset();\n    }\n    reset() {\n        for (let i = 0; i < Config.unisonVoicesMax; i++) {\n            this.noiseSamples[i] = 0.0;\n        }\n        for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            this.phases[i] = 0.0;\n            this.directions[i] = 1;\n            this.chipWaveCompletions[i] = 0;\n            this.chipWavePrevWaves[i] = 0;\n            this.chipWaveCompletionsLastWave[i] = 0;\n            this.operatorWaves[i] = Config.operatorWaves[0];\n            this.feedbackOutputs[i] = 0.0;\n            this.prevPitchExpressions[i] = null;\n        }\n        for (let i = 0; i < this.noteFilterCount; i++) {\n            this.noteFilters[i].resetOutput();\n        }\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInput1 = 0.0;\n        this.initialNoteFilterInput2 = 0.0;\n        this.liveInputSamplesHeld = 0;\n        this.supersawDelayIndex = -1;\n        for (const pickedString of this.pickedStrings) {\n            pickedString.reset();\n        }\n        this.envelopeComputer.reset();\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.supersawPrevPhaseDelta = null;\n        this.drumsetPitch = null;\n    }\n}\nclass InstrumentState {\n    constructor() {\n        this.awake = false;\n        this.computed = false;\n        this.tonesAddedInThisTick = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n        this.activeTones = new Deque();\n        this.activeModTones = new Deque();\n        this.releasedTones = new Deque();\n        this.liveInputTones = new Deque();\n        this.type = 0;\n        this.synthesizer = null;\n        this.wave = null;\n        this.isUsingAdvancedLoopControls = false;\n        this.chipWaveLoopStart = 0;\n        this.chipWaveLoopEnd = 0;\n        this.chipWaveLoopMode = 0;\n        this.chipWavePlayBackwards = false;\n        this.chipWaveStartOffset = 0;\n        this.noisePitchFilterMult = 1.0;\n        this.unison = null;\n        this.unisonVoices = 1;\n        this.unisonSpread = 0.0;\n        this.unisonOffset = 0.0;\n        this.unisonExpression = 1.4;\n        this.unisonSign = 1.0;\n        this.chord = null;\n        this.effects = 0;\n        this.volumeScale = 0;\n        this.aliases = false;\n        this.arpTime = 0;\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.envelopeTime = [];\n        this.eqFilterVolume = 1.0;\n        this.eqFilterVolumeDelta = 0.0;\n        this.mixVolume = 1.0;\n        this.mixVolumeDelta = 0.0;\n        this.delayInputMult = 0.0;\n        this.delayInputMultDelta = 0.0;\n        this.granularMix = 1.0;\n        this.granularMixDelta = 0.0;\n        this.granularDelayLine = null;\n        this.granularDelayLineIndex = 0;\n        this.granularMaximumDelayTimeInSeconds = 1;\n        this.usesRandomGrainLocation = true;\n        this.granularDelayLineDirty = false;\n        this.computeGrains = true;\n        this.ringModMix = 0;\n        this.ringModMixDelta = 0;\n        this.ringModPhase = 0;\n        this.ringModPhaseDelta = 0;\n        this.ringModPhaseDeltaScale = 1.0;\n        this.ringModWaveformIndex = 0.0;\n        this.ringModPulseWidth = 0.0;\n        this.ringModHzOffset = 0.0;\n        this.ringModMixFade = 1.0;\n        this.ringModMixFadeDelta = 0;\n        this.distortion = 0.0;\n        this.distortionDelta = 0.0;\n        this.distortionDrive = 0.0;\n        this.distortionDriveDelta = 0.0;\n        this.distortionFractionalInput1 = 0.0;\n        this.distortionFractionalInput2 = 0.0;\n        this.distortionFractionalInput3 = 0.0;\n        this.distortionPrevInput = 0.0;\n        this.distortionNextOutput = 0.0;\n        this.bitcrusherPrevInput = 0.0;\n        this.bitcrusherCurrentOutput = 0.0;\n        this.bitcrusherPhase = 1.0;\n        this.bitcrusherPhaseDelta = 0.0;\n        this.bitcrusherPhaseDeltaScale = 1.0;\n        this.bitcrusherScale = 1.0;\n        this.bitcrusherScaleScale = 1.0;\n        this.bitcrusherFoldLevel = 1.0;\n        this.bitcrusherFoldLevelScale = 1.0;\n        this.eqFilters = [];\n        this.eqFilterCount = 0;\n        this.initialEqFilterInput1 = 0.0;\n        this.initialEqFilterInput2 = 0.0;\n        this.panningDelayLine = null;\n        this.panningDelayPos = 0;\n        this.panningVolumeL = 0.0;\n        this.panningVolumeR = 0.0;\n        this.panningVolumeDeltaL = 0.0;\n        this.panningVolumeDeltaR = 0.0;\n        this.panningOffsetL = 0.0;\n        this.panningOffsetR = 0.0;\n        this.panningOffsetDeltaL = 0.0;\n        this.panningOffsetDeltaR = 0.0;\n        this.chorusDelayLineL = null;\n        this.chorusDelayLineR = null;\n        this.chorusDelayLineDirty = false;\n        this.chorusDelayPos = 0;\n        this.chorusPhase = 0;\n        this.chorusVoiceMult = 0;\n        this.chorusVoiceMultDelta = 0;\n        this.chorusCombinedMult = 0;\n        this.chorusCombinedMultDelta = 0;\n        this.echoDelayLineL = null;\n        this.echoDelayLineR = null;\n        this.echoDelayLineDirty = false;\n        this.echoDelayPos = 0;\n        this.echoDelayOffsetStart = 0;\n        this.echoDelayOffsetEnd = null;\n        this.echoDelayOffsetRatio = 0.0;\n        this.echoDelayOffsetRatioDelta = 0.0;\n        this.echoMult = 0.0;\n        this.echoMultDelta = 0.0;\n        this.echoShelfA1 = 0.0;\n        this.echoShelfB0 = 0.0;\n        this.echoShelfB1 = 0.0;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbDelayLine = null;\n        this.reverbDelayLineDirty = false;\n        this.reverbDelayPos = 0;\n        this.reverbMult = 0.0;\n        this.reverbMultDelta = 0.0;\n        this.reverbShelfA1 = 0.0;\n        this.reverbShelfB0 = 0.0;\n        this.reverbShelfB1 = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n        this.spectrumWave = new SpectrumWaveState();\n        this.harmonicsWave = new HarmonicsWaveState();\n        this.drumsetSpectrumWaves = [];\n        this.envelopeComputer = new EnvelopeComputer();\n        for (let i = 0; i < Config.drumCount; i++) {\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\n        }\n        this.granularGrains = [];\n        this.granularMaximumGrains = 256;\n        for (let i = 0; i < this.granularMaximumGrains; i++) {\n            this.granularGrains.push(new Grain());\n        }\n        this.granularGrainsLength = 0;\n    }\n    allocateNecessaryBuffers(synth, instrument, samplesPerTick) {\n        if (effectsIncludePanning(instrument.effects)) {\n            if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\n                this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\n            }\n        }\n        if (effectsIncludeChorus(instrument.effects)) {\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n            }\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n            }\n        }\n        if (effectsIncludeEcho(instrument.effects)) {\n            this.allocateEchoBuffers(samplesPerTick, instrument.echoDelay);\n        }\n        if (effectsIncludeReverb(instrument.effects)) {\n            if (this.reverbDelayLine == null) {\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n            }\n        }\n        if (effectsIncludeGranular(instrument.effects)) {\n            const granularDelayLineSizeInMilliseconds = 2500;\n            const granularDelayLineSizeInSeconds = granularDelayLineSizeInMilliseconds / 1000;\n            this.granularMaximumDelayTimeInSeconds = granularDelayLineSizeInSeconds;\n            const granularDelayLineSizeInSamples = Synth.fittingPowerOfTwo(Math.floor(granularDelayLineSizeInSeconds * synth.samplesPerSecond));\n            if (this.granularDelayLine == null || this.granularDelayLine.length != granularDelayLineSizeInSamples) {\n                this.granularDelayLine = new Float32Array(granularDelayLineSizeInSamples);\n                this.granularDelayLineIndex = 0;\n            }\n            const oldGrainsLength = this.granularGrains.length;\n            if (this.granularMaximumGrains > oldGrainsLength) {\n                for (let i = oldGrainsLength; i < this.granularMaximumGrains + 1; i++) {\n                    this.granularGrains.push(new Grain());\n                }\n            }\n            if (this.granularMaximumGrains < this.granularGrainsLength) {\n                this.granularGrainsLength = Math.round(this.granularMaximumGrains);\n            }\n        }\n    }\n    allocateEchoBuffers(samplesPerTick, echoDelay) {\n        const safeEchoDelaySteps = Math.max(Config.echoDelayRange >> 1, (echoDelay + 1));\n        const baseEchoDelayBufferSize = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n        const safeEchoDelayBufferSize = baseEchoDelayBufferSize * 2;\n        if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n            this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n            this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n        }\n        else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n            const newDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n            const newDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n            const oldMask = this.echoDelayLineL.length - 1;\n            for (let i = 0; i < this.echoDelayLineL.length; i++) {\n                newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n                newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n            }\n            this.echoDelayPos = this.echoDelayLineL.length;\n            this.echoDelayLineL = newDelayLineL;\n            this.echoDelayLineR = newDelayLineR;\n        }\n    }\n    deactivate() {\n        this.bitcrusherPrevInput = 0.0;\n        this.bitcrusherCurrentOutput = 0.0;\n        this.bitcrusherPhase = 1.0;\n        for (let i = 0; i < this.eqFilterCount; i++) {\n            this.eqFilters[i].resetOutput();\n        }\n        this.eqFilterCount = 0;\n        this.initialEqFilterInput1 = 0.0;\n        this.initialEqFilterInput2 = 0.0;\n        this.distortionFractionalInput1 = 0.0;\n        this.distortionFractionalInput2 = 0.0;\n        this.distortionFractionalInput3 = 0.0;\n        this.distortionPrevInput = 0.0;\n        this.distortionNextOutput = 0.0;\n        this.panningDelayPos = 0;\n        if (this.panningDelayLine != null)\n            for (let i = 0; i < this.panningDelayLine.length; i++)\n                this.panningDelayLine[i] = 0.0;\n        this.echoDelayOffsetEnd = null;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n        this.volumeScale = 1.0;\n        this.aliases = false;\n        this.awake = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n    }\n    resetAllEffects() {\n        this.deactivate();\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.arpTime = 0;\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++)\n            this.envelopeTime[envelopeIndex] = 0;\n        this.envelopeComputer.reset();\n        if (this.chorusDelayLineDirty) {\n            for (let i = 0; i < this.chorusDelayLineL.length; i++)\n                this.chorusDelayLineL[i] = 0.0;\n            for (let i = 0; i < this.chorusDelayLineR.length; i++)\n                this.chorusDelayLineR[i] = 0.0;\n        }\n        if (this.echoDelayLineDirty) {\n            for (let i = 0; i < this.echoDelayLineL.length; i++)\n                this.echoDelayLineL[i] = 0.0;\n            for (let i = 0; i < this.echoDelayLineR.length; i++)\n                this.echoDelayLineR[i] = 0.0;\n        }\n        if (this.reverbDelayLineDirty) {\n            for (let i = 0; i < this.reverbDelayLine.length; i++)\n                this.reverbDelayLine[i] = 0.0;\n        }\n        if (this.granularDelayLineDirty) {\n            for (let i = 0; i < this.granularDelayLine.length; i++)\n                this.granularDelayLine[i] = 0.0;\n        }\n        this.chorusPhase = 0.0;\n        this.ringModPhase = 0.0;\n        this.ringModMixFade = 1.0;\n    }\n    compute(synth, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex) {\n        this.computed = true;\n        this.type = instrument.type;\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\n        this.unison = Config.unisons[instrument.unison];\n        this.chord = instrument.getChord();\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\n        this.effects = instrument.effects;\n        this.aliases = instrument.aliases;\n        this.volumeScale = 1.0;\n        const samplesPerSecond = synth.samplesPerSecond;\n        this.updateWaves(instrument, samplesPerSecond);\n        const ticksIntoBar = synth.getTicksIntoBar();\n        const tickTimeStart = ticksIntoBar;\n        const secondsPerTick = samplesPerTick / synth.samplesPerSecond;\n        const currentPart = synth.getCurrentPart();\n        const envelopeSpeeds = [];\n        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed];\n        if (synth.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex)) {\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, synth.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex, false)));\n            if (Number.isInteger(useEnvelopeSpeed)) {\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\n            }\n            else {\n                useEnvelopeSpeed = ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]);\n            }\n        }\n        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (synth.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed * perEnvelopeSpeed;\n        }\n        this.envelopeComputer.computeEnvelopes(instrument, currentPart, this.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, this, synth, channelIndex, instrumentIndex);\n        const envelopeStarts = this.envelopeComputer.envelopeStarts;\n        const envelopeEnds = this.envelopeComputer.envelopeEnds;\n        const usesGranular = effectsIncludeGranular(this.effects);\n        const usesRingModulation = effectsIncludeRingModulation(this.effects);\n        const usesDistortion = effectsIncludeDistortion(this.effects);\n        const usesBitcrusher = effectsIncludeBitcrusher(this.effects);\n        const usesPanning = effectsIncludePanning(this.effects);\n        const usesChorus = effectsIncludeChorus(this.effects);\n        const usesEcho = effectsIncludeEcho(this.effects);\n        const usesReverb = effectsIncludeReverb(this.effects);\n        let granularChance = 0;\n        if (usesGranular) {\n            granularChance = (instrument.grainAmounts + 1);\n            this.granularMaximumGrains = instrument.grainAmounts;\n            if (synth.isModActive(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex)) {\n                this.granularMaximumGrains = synth.getModValue(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex, false);\n                granularChance = (synth.getModValue(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex, false) + 1);\n            }\n            this.granularMaximumGrains = Math.floor(Math.pow(2, this.granularMaximumGrains * envelopeStarts[52]));\n            granularChance = granularChance * envelopeStarts[52];\n        }\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n        if (usesGranular) {\n            this.granularMix = instrument.granular / Config.granularRange;\n            this.computeGrains = true;\n            let granularMixEnd = this.granularMix;\n            if (synth.isModActive(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex)) {\n                this.granularMix = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, false) / Config.granularRange;\n                granularMixEnd = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, true) / Config.granularRange;\n            }\n            this.granularMix *= envelopeStarts[51];\n            granularMixEnd *= envelopeEnds[51];\n            this.granularMixDelta = (granularMixEnd - this.granularMix) / roundedSamplesPerTick;\n            for (let iterations = 0; iterations < Math.ceil(Math.random() * Math.random() * 10); iterations++) {\n                if (this.granularGrainsLength < this.granularMaximumGrains && Math.random() <= granularChance) {\n                    let granularMinGrainSizeInMilliseconds = instrument.grainSize;\n                    if (synth.isModActive(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex)) {\n                        granularMinGrainSizeInMilliseconds = synth.getModValue(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex, false);\n                    }\n                    granularMinGrainSizeInMilliseconds *= envelopeStarts[53];\n                    let grainRange = instrument.grainRange;\n                    if (synth.isModActive(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex)) {\n                        grainRange = synth.getModValue(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex, false);\n                    }\n                    grainRange *= envelopeStarts[54];\n                    const granularMaxGrainSizeInMilliseconds = granularMinGrainSizeInMilliseconds + grainRange;\n                    const granularGrainSizeInMilliseconds = granularMinGrainSizeInMilliseconds + (granularMaxGrainSizeInMilliseconds - granularMinGrainSizeInMilliseconds) * Math.random();\n                    const granularGrainSizeInSeconds = granularGrainSizeInMilliseconds / 1000.0;\n                    const granularGrainSizeInSamples = Math.floor(granularGrainSizeInSeconds * samplesPerSecond);\n                    const granularDelayLineLength = this.granularDelayLine.length;\n                    const grainIndex = this.granularGrainsLength;\n                    this.granularGrainsLength++;\n                    const grain = this.granularGrains[grainIndex];\n                    grain.ageInSamples = 0;\n                    grain.maxAgeInSamples = granularGrainSizeInSamples;\n                    const minDelayTimeInSeconds = 0.02;\n                    const maxDelayTimeInSeconds = 2.4;\n                    grain.delayLinePosition = this.usesRandomGrainLocation ? (minDelayTimeInSeconds + (maxDelayTimeInSeconds - minDelayTimeInSeconds) * Math.random() * Math.random() * samplesPerSecond) % (granularDelayLineLength - 1) : minDelayTimeInSeconds;\n                    if (Config.granularEnvelopeType == 0) {\n                        grain.initializeParabolicEnvelope(grain.maxAgeInSamples, 1.0);\n                    }\n                    else if (Config.granularEnvelopeType == 1) {\n                        grain.initializeRCBEnvelope(grain.maxAgeInSamples, 1.0);\n                    }\n                    grain.addDelay(Math.random() * samplesPerTick * 4);\n                }\n            }\n        }\n        if (usesDistortion) {\n            let useDistortionStart = instrument.distortion;\n            let useDistortionEnd = instrument.distortion;\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\n            }\n            const distortionSliderStart = Math.min(1.0, envelopeStarts[42] * useDistortionStart / (Config.distortionRange - 1));\n            const distortionSliderEnd = Math.min(1.0, envelopeEnds[42] * useDistortionEnd / (Config.distortionRange - 1));\n            const distortionStart = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\n            const distortionEnd = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\n            const distortionDriveStart = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\n            const distortionDriveEnd = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\n            this.distortion = distortionStart;\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\n            this.distortionDrive = distortionDriveStart;\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\n        }\n        if (usesBitcrusher) {\n            let freqSettingStart = instrument.bitcrusherFreq * Math.sqrt(envelopeStarts[44]);\n            let freqSettingEnd = instrument.bitcrusherFreq * Math.sqrt(envelopeEnds[44]);\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[44]);\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[44]);\n            }\n            let quantizationSettingStart = instrument.bitcrusherQuantization * Math.sqrt(envelopeStarts[43]);\n            let quantizationSettingEnd = instrument.bitcrusherQuantization * Math.sqrt(envelopeEnds[43]);\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[43]);\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[43]);\n            }\n            const basePitch = Config.keys[synth.song.key].basePitch + (Config.pitchesPerOctave * synth.song.octave);\n            const freqStart = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n            const freqEnd = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\n            const phaseDeltaStart = Math.min(1.0, freqStart / samplesPerSecond);\n            const phaseDeltaEnd = Math.min(1.0, freqEnd / samplesPerSecond);\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\n            const scaleStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n            const scaleEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\n            this.bitcrusherScale = scaleStart;\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\n            const foldLevelStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n            const foldLevelEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n            this.bitcrusherFoldLevel = foldLevelStart;\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\n        }\n        let eqFilterVolume = 1.0;\n        if (instrument.eqFilterType) {\n            const eqFilterSettingsStart = instrument.eqFilter;\n            if (instrument.eqSubFilters[1] == null)\n                instrument.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd = instrument.eqSubFilters[1];\n            let startSimpleFreq = instrument.eqFilterSimpleCut;\n            let startSimpleGain = instrument.eqFilterSimplePeak;\n            let endSimpleFreq = instrument.eqFilterSimpleCut;\n            let endSimpleGain = instrument.eqFilterSimplePeak;\n            let filterChanges = false;\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n                startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n                endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n                startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n                endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            }\n            let startPoint;\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint = eqFilterSettingsEnd.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.eqFilters.length < 1)\n                    this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.eqFilters.length < 1)\n                    this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            this.eqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        else {\n            const eqFilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;\n            for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {\n                let startPoint = eqFilterSettings.controlPoints[i];\n                let endPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.eqFilters.length <= i)\n                    this.eqFilters[i] = new DynamicBiquadFilter();\n                this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            }\n            this.eqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        const mainInstrumentVolume = Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        this.mixVolume = mainInstrumentVolume;\n        let mixVolumeEnd = mainInstrumentVolume;\n        if (synth.isModActive(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex)) {\n            const startVal = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, false);\n            const endVal = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, true);\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n        }\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\n        }\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\n        let eqFilterVolumeStart = eqFilterVolume;\n        let eqFilterVolumeEnd = eqFilterVolume;\n        let delayInputMultStart = 1.0;\n        let delayInputMultEnd = 1.0;\n        if (usesPanning) {\n            const panEnvelopeStart = envelopeStarts[41] * 2.0 - 1.0;\n            const panEnvelopeEnd = envelopeEnds[41] * 2.0 - 1.0;\n            let usePanStart = instrument.pan;\n            let usePanEnd = instrument.pan;\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\n            }\n            let panStart = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter * panEnvelopeStart));\n            let panEnd = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter * panEnvelopeEnd));\n            const volumeStartL = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n            const volumeStartR = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n            const volumeEndL = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\n            const volumeEndR = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\n            const maxDelaySamples = samplesPerSecond * Config.panDelaySecondsMax;\n            let usePanDelayStart = instrument.panDelay;\n            let usePanDelayEnd = instrument.panDelay;\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\n            }\n            const delayStart = panStart * usePanDelayStart * maxDelaySamples / 10;\n            const delayEnd = panEnd * usePanDelayEnd * maxDelaySamples / 10;\n            const delayStartL = Math.max(0.0, delayStart);\n            const delayStartR = Math.max(0.0, -delayStart);\n            const delayEndL = Math.max(0.0, delayEnd);\n            const delayEndR = Math.max(0.0, -delayEnd);\n            this.panningVolumeL = volumeStartL;\n            this.panningVolumeR = volumeStartR;\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\n        }\n        if (usesChorus) {\n            const chorusEnvelopeStart = envelopeStarts[45];\n            const chorusEnvelopeEnd = envelopeEnds[45];\n            let useChorusStart = instrument.chorus;\n            let useChorusEnd = instrument.chorus;\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\n            }\n            let chorusStart = Math.min(1.0, chorusEnvelopeStart * useChorusStart / (Config.chorusRange - 1));\n            let chorusEnd = Math.min(1.0, chorusEnvelopeEnd * useChorusEnd / (Config.chorusRange - 1));\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n            this.chorusVoiceMult = chorusStart;\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\n            this.chorusCombinedMult = chorusCombinedMultStart;\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\n        }\n        if (usesRingModulation) {\n            let useRingModStart = instrument.ringModulation;\n            let useRingModEnd = instrument.ringModulation;\n            let useRingModEnvelopeStart = envelopeStarts[49];\n            let useRingModEnvelopeEnd = envelopeEnds[49];\n            let useRingModHzStart = Math.min(1.0, instrument.ringModulationHz / (Config.ringModHzRange - 1));\n            let useRingModHzEnd = Math.min(1.0, instrument.ringModulationHz / (Config.ringModHzRange - 1));\n            let useRingModHzEnvelopeStart = envelopeStarts[50];\n            let useRingModHzEnvelopeEnd = envelopeEnds[50];\n            if (synth.isModActive(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex)) {\n                useRingModStart = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, false));\n                useRingModEnd = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, true));\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex)) {\n                useRingModHzStart = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n                useRingModHzEnd = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n            }\n            useRingModHzStart *= useRingModHzEnvelopeStart;\n            useRingModHzEnd *= useRingModHzEnvelopeEnd;\n            let ringModStart = Math.min(1.0, (useRingModStart * useRingModEnvelopeStart) / (Config.ringModRange - 1));\n            let ringModEnd = Math.min(1.0, (useRingModEnd * useRingModEnvelopeEnd) / (Config.ringModRange - 1));\n            this.ringModMix = ringModStart;\n            this.ringModMixDelta = (ringModEnd - ringModStart) / roundedSamplesPerTick;\n            this.ringModHzOffset = instrument.ringModHzOffset;\n            let ringModPhaseDeltaStart = (Math.max(0, calculateRingModHertz(useRingModHzStart))) / synth.samplesPerSecond;\n            let ringModPhaseDeltaEnd = (Math.max(0, calculateRingModHertz(useRingModHzEnd))) / synth.samplesPerSecond;\n            if (useRingModHzStart < 1 / (Config.ringModHzRange - 1) || useRingModHzEnd < 1 / (Config.ringModHzRange - 1)) {\n                ringModPhaseDeltaStart *= useRingModHzStart * (Config.ringModHzRange - 1);\n                ringModPhaseDeltaEnd *= useRingModHzEnd * (Config.ringModHzRange - 1);\n            }\n            this.ringModMixFadeDelta = 0;\n            if (this.ringModMixFade < 0)\n                this.ringModMixFade = 0;\n            if (ringModPhaseDeltaStart <= 0 && ringModPhaseDeltaEnd <= 0 && this.ringModMixFade != 0) {\n                this.ringModMixFadeDelta = this.ringModMixFade / -40;\n            }\n            else if (ringModPhaseDeltaStart > 0 && ringModPhaseDeltaEnd > 0) {\n                this.ringModMixFade = 1.0;\n            }\n            this.ringModPhaseDelta = ringModPhaseDeltaStart;\n            this.ringModPhaseDeltaScale = ringModPhaseDeltaStart == 0 ? 1 : Math.pow(ringModPhaseDeltaEnd / ringModPhaseDeltaStart, 1.0 / roundedSamplesPerTick);\n            this.ringModWaveformIndex = instrument.ringModWaveformIndex;\n            this.ringModPulseWidth = instrument.ringModPulseWidth;\n        }\n        let maxEchoMult = 0.0;\n        let averageEchoDelaySeconds = 0.0;\n        if (usesEcho) {\n            const echoSustainEnvelopeStart = envelopeStarts[46];\n            const echoSustainEnvelopeEnd = envelopeEnds[46];\n            let useEchoSustainStart = instrument.echoSustain;\n            let useEchoSustainEnd = instrument.echoSustain;\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\n                useEchoSustainStart = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false));\n                useEchoSustainEnd = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true));\n            }\n            const echoMultStart = Math.min(1.0, Math.pow(echoSustainEnvelopeStart * useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\n            const echoMultEnd = Math.min(1.0, Math.pow(echoSustainEnvelopeEnd * useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\n            this.echoMult = echoMultStart;\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\n            const echoDelayEnvelopeStart = envelopeStarts[55];\n            const echoDelayEnvelopeEnd = envelopeEnds[55];\n            let useEchoDelayStart = instrument.echoDelay * echoDelayEnvelopeStart;\n            let useEchoDelayEnd = instrument.echoDelay * echoDelayEnvelopeEnd;\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false) * echoDelayEnvelopeStart;\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true) * echoDelayEnvelopeEnd;\n            }\n            const tmpEchoDelayOffsetStart = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            const tmpEchoDelayOffsetEnd = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            if (this.echoDelayOffsetEnd != null) {\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\n            }\n            else {\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\n            }\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n            this.echoDelayOffsetRatio = 0.0;\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\n            const shelfRadians = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n        let maxReverbMult = 0.0;\n        if (usesReverb) {\n            const reverbEnvelopeStart = envelopeStarts[47];\n            const reverbEnvelopeEnd = envelopeEnds[47];\n            let useReverbStart = instrument.reverb;\n            let useReverbEnd = instrument.reverb;\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n            }\n            const reverbStart = Math.min(1.0, Math.pow(reverbEnvelopeStart * useReverbStart / Config.reverbRange, 0.667)) * 0.425;\n            const reverbEnd = Math.min(1.0, Math.pow(reverbEnvelopeEnd * useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\n            this.reverbMult = reverbStart;\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\n            const shelfRadians = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n        if (this.tonesAddedInThisTick) {\n            this.attentuationProgress = 0.0;\n            this.flushedSamples = 0;\n            this.flushingDelayLines = false;\n        }\n        else if (!this.flushingDelayLines) {\n            if (this.attentuationProgress == 0.0) {\n                eqFilterVolumeEnd = 0.0;\n            }\n            else {\n                eqFilterVolumeStart = 0.0;\n                eqFilterVolumeEnd = 0.0;\n            }\n            const attenuationThreshold = 1.0 / 256.0;\n            const halfLifeMult = -Math.log2(attenuationThreshold);\n            let delayDuration = 0.0;\n            if (usesChorus) {\n                delayDuration += Config.chorusMaxDelay;\n            }\n            if (usesEcho) {\n                const attenuationPerSecond = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\n                const halfLife = -1.0 / Math.log2(attenuationPerSecond);\n                const echoDuration = halfLife * halfLifeMult;\n                delayDuration += echoDuration;\n            }\n            if (usesReverb) {\n                const averageMult = maxReverbMult * 2.0;\n                const averageReverbDelaySeconds = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n                const attenuationPerSecond = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\n                const halfLife = -1.0 / Math.log2(attenuationPerSecond);\n                const reverbDuration = halfLife * halfLifeMult;\n                delayDuration += reverbDuration;\n            }\n            if (usesGranular) {\n                this.computeGrains = false;\n            }\n            const secondsInTick = samplesPerTick / samplesPerSecond;\n            const progressInTick = secondsInTick / delayDuration;\n            const progressAtEndOfTick = this.attentuationProgress + progressInTick;\n            if (progressAtEndOfTick >= 1.0) {\n                delayInputMultEnd = 0.0;\n            }\n            this.attentuationProgress = progressAtEndOfTick;\n            if (this.attentuationProgress >= 1.0) {\n                this.flushingDelayLines = true;\n            }\n        }\n        else {\n            eqFilterVolumeStart = 0.0;\n            eqFilterVolumeEnd = 0.0;\n            delayInputMultStart = 0.0;\n            delayInputMultEnd = 0.0;\n            let totalDelaySamples = 0;\n            if (usesChorus)\n                totalDelaySamples += synth.chorusDelayBufferSize;\n            if (usesEcho)\n                totalDelaySamples += this.echoDelayLineL.length;\n            if (usesReverb)\n                totalDelaySamples += Config.reverbDelayBufferSize;\n            if (usesGranular)\n                totalDelaySamples += this.granularMaximumDelayTimeInSeconds;\n            this.flushedSamples += roundedSamplesPerTick;\n            if (this.flushedSamples >= totalDelaySamples) {\n                this.deactivateAfterThisTick = true;\n            }\n        }\n        this.eqFilterVolume = eqFilterVolumeStart;\n        this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n        this.delayInputMult = delayInputMultStart;\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\n        this.envelopeComputer.clearEnvelopes();\n    }\n    updateWaves(instrument, samplesPerSecond) {\n        this.volumeScale = 1.0;\n        if (instrument.type == 0) {\n            this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\n            this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\n            this.chipWaveLoopStart = instrument.chipWaveLoopStart;\n            this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\n            this.chipWaveLoopMode = instrument.chipWaveLoopMode;\n            this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\n            this.chipWaveStartOffset = instrument.chipWaveStartOffset;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 6) {\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 9) {\n            this.wave = (this.aliases) ? instrument.customChipWave : instrument.customChipWaveIntegral;\n            this.volumeScale = 0.05;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 2) {\n            this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 5) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 7) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 3) {\n            this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 4) {\n            for (let i = 0; i < Config.drumCount; i++) {\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\n            }\n            this.wave = null;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else {\n            this.wave = null;\n        }\n    }\n    getDrumsetWave(pitch) {\n        if (this.type == 4) {\n            return this.drumsetSpectrumWaves[pitch].wave;\n        }\n        else {\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\n        }\n    }\n    static drumsetIndexReferenceDelta(index) {\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\n    }\n    static _drumsetIndexToSpectrumOctave(index) {\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\n    }\n}\nclass ChannelState {\n    constructor() {\n        this.instruments = [];\n        this.muted = false;\n        this.singleSeamlessInstrument = null;\n    }\n}\nexport class Synth {\n    syncSongState() {\n        const channelCount = this.song.getChannelCount();\n        for (let i = this.channels.length; i < channelCount; i++) {\n            this.channels[i] = new ChannelState();\n        }\n        this.channels.length = channelCount;\n        for (let i = 0; i < channelCount; i++) {\n            const channel = this.song.channels[i];\n            const channelState = this.channels[i];\n            for (let j = channelState.instruments.length; j < channel.instruments.length; j++) {\n                channelState.instruments[j] = new InstrumentState();\n            }\n            channelState.instruments.length = channel.instruments.length;\n            if (channelState.muted != channel.muted) {\n                channelState.muted = channel.muted;\n                if (channelState.muted) {\n                    for (const instrumentState of channelState.instruments) {\n                        instrumentState.resetAllEffects();\n                    }\n                }\n            }\n        }\n    }\n    initModFilters(song) {\n        if (song != null) {\n            song.tmpEqFilterStart = song.eqFilter;\n            song.tmpEqFilterEnd = null;\n            for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    instrument.tmpEqFilterStart = instrument.eqFilter;\n                    instrument.tmpEqFilterEnd = null;\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\n                    instrument.tmpNoteFilterEnd = null;\n                }\n            }\n        }\n    }\n    warmUpSynthesizer(song) {\n        if (song != null) {\n            this.syncSongState();\n            const samplesPerTick = this.getSamplesPerTick();\n            for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    Synth.getInstrumentSynthFunction(instrument);\n                    instrumentState.vibratoTime = 0;\n                    instrumentState.nextVibratoTime = 0;\n                    for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++)\n                        instrumentState.envelopeTime[envelopeIndex] = 0;\n                    instrumentState.arpTime = 0;\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n                }\n            }\n        }\n        var dummyArray = new Float32Array(1);\n        this.isPlayingSong = true;\n        this.synthesize(dummyArray, dummyArray, 1, true);\n        this.isPlayingSong = false;\n    }\n    computeLatestModValues() {\n        if (this.song != null && this.song.modChannelCount > 0) {\n            let latestModTimes = [];\n            let latestModInsTimes = [];\n            this.modValues = [];\n            this.nextModValues = [];\n            this.modInsValues = [];\n            this.nextModInsValues = [];\n            this.heldMods = [];\n            for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                latestModInsTimes[channel] = [];\n                this.modInsValues[channel] = [];\n                this.nextModInsValues[channel] = [];\n                for (let instrument = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\n                    this.modInsValues[channel][instrument] = [];\n                    this.nextModInsValues[channel][instrument] = [];\n                    latestModInsTimes[channel][instrument] = [];\n                }\n            }\n            let currentPart = this.beat * Config.partsPerBeat + this.part;\n            for (let channelIndex = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\n                if (!(this.song.channels[channelIndex].muted)) {\n                    let pattern;\n                    for (let currentBar = this.bar; currentBar >= 0; currentBar--) {\n                        pattern = this.song.getPattern(channelIndex, currentBar);\n                        if (pattern != null) {\n                            let instrumentIdx = pattern.instruments[0];\n                            let instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\n                            let latestPinParts = [];\n                            let latestPinValues = [];\n                            let partsInBar = (currentBar == this.bar)\n                                ? currentPart\n                                : this.findPartsInBar(currentBar);\n                            for (const note of pattern.notes) {\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\n                                    if (note.start == partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\n                                    }\n                                    if (note.end <= partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            for (let mod = 0; mod < Config.modCount; mod++) {\n                                if (latestPinParts[mod] != null) {\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\n                                        const songFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index;\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModTimes[instrument.modulators[mod]]) {\n                                            if (songFilterParam) {\n                                                let tgtSong = this.song;\n                                                if (instrument.modFilterTypes[mod] == 0) {\n                                                    tgtSong.tmpEqFilterStart = tgtSong.eqSubFilters[latestPinValues[mod]];\n                                                }\n                                                else {\n                                                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                        if (tgtSong.tmpEqFilterStart != null && tgtSong.tmpEqFilterStart == tgtSong.eqSubFilters[i]) {\n                                                            tgtSong.tmpEqFilterStart = new FilterSettings();\n                                                            tgtSong.tmpEqFilterStart.fromJsonObject(tgtSong.eqSubFilters[i].toJsonObject());\n                                                            i = Config.filterMorphCount;\n                                                        }\n                                                    }\n                                                    if (tgtSong.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtSong.tmpEqFilterStart.controlPointCount) {\n                                                        if (instrument.modFilterTypes[mod] % 2)\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                        else\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                    }\n                                                }\n                                                tgtSong.tmpEqFilterEnd = tgtSong.tmpEqFilterStart;\n                                            }\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                        }\n                                    }\n                                    else {\n                                        let usedInstruments = [];\n                                        if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            for (let i = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                                                usedInstruments.push(i);\n                                            }\n                                        }\n                                        else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            const tgtPattern = this.song.getPattern(instrument.modChannels[mod], currentBar);\n                                            if (tgtPattern != null)\n                                                usedInstruments = tgtPattern.instruments;\n                                        }\n                                        else {\n                                            usedInstruments.push(instrument.modInstruments[mod]);\n                                        }\n                                        for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n                                            const eqFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index;\n                                            const noteFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index;\n                                            let modulatorAdjust = instrument.modulators[mod];\n                                            if (eqFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\n                                            }\n                                            else if (noteFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\n                                            }\n                                            if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]) {\n                                                if (eqFilterParam) {\n                                                    let tgtInstrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];\n                                                    }\n                                                    else {\n                                                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpEqFilterStart != null && tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {\n                                                                tgtInstrument.tmpEqFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i].toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;\n                                                }\n                                                else if (noteFilterParam) {\n                                                    let tgtInstrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\n                                                    }\n                                                    else {\n                                                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\n                                                }\n                                                else\n                                                    this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);\n                                                latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    determineInvalidModulators(instrument) {\n        if (this.song == null)\n            return;\n        for (let mod = 0; mod < Config.modCount; mod++) {\n            instrument.invalidModulators[mod] = true;\n            if (instrument.modChannels[mod] == -1) {\n                if (instrument.modulators[mod] != 0)\n                    instrument.invalidModulators[mod] = false;\n                continue;\n            }\n            const channel = this.song.channels[instrument.modChannels[mod]];\n            if (channel == null)\n                continue;\n            let tgtInstrumentList = [];\n            if (instrument.modInstruments[mod] >= channel.instruments.length) {\n                tgtInstrumentList = channel.instruments;\n            }\n            else {\n                tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];\n            }\n            for (let i = 0; i < tgtInstrumentList.length; i++) {\n                const tgtInstrument = tgtInstrumentList[i];\n                if (tgtInstrument == null)\n                    continue;\n                const str = Config.modulators[instrument.modulators[mod]].name;\n                if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != 15 && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))\n                    || ((tgtInstrument.type != 1 && tgtInstrument.type != 11) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\n                    || tgtInstrument.type != 11 && (str == \"fm slider 5\" || str == \"fm slider 6\")\n                    || ((tgtInstrument.type != 6 && tgtInstrument.type != 8) && (str == \"pulse width\" || str == \"decimal offset\"))\n                    || ((tgtInstrument.type != 8) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\n                    || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\n                    || (tgtInstrument.eqFilterType && str == \"eq filter\")\n                    || (!tgtInstrument.eqFilterType && (str == \"eq filt cut\" || str == \"eq filt peak\"))\n                    || (str == \"eq filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\n                    || (tgtInstrument.noteFilterType && str == \"note filter\")\n                    || (!tgtInstrument.noteFilterType && (str == \"note filt cut\" || str == \"note filt peak\"))\n                    || (str == \"note filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true)))) {\n                    instrument.invalidModulators[mod] = false;\n                    i = tgtInstrumentList.length;\n                }\n            }\n        }\n    }\n    static operatorAmplitudeCurve(amplitude) {\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n    }\n    get playing() {\n        return this.isPlayingSong;\n    }\n    get recording() {\n        return this.isRecording;\n    }\n    get playhead() {\n        return this.playheadInternal;\n    }\n    set playhead(value) {\n        if (this.song != null) {\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n            let remainder = this.playheadInternal;\n            this.bar = Math.floor(remainder);\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\n            this.beat = Math.floor(remainder);\n            remainder = Config.partsPerBeat * (remainder - this.beat);\n            this.part = Math.floor(remainder);\n            remainder = Config.ticksPerPart * (remainder - this.part);\n            this.tick = Math.floor(remainder);\n            this.tickSampleCountdown = 0;\n            this.isAtStartOfTick = true;\n            this.prevBar = null;\n        }\n    }\n    getSamplesPerBar() {\n        if (this.song == null)\n            throw new Error();\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n    }\n    getTicksIntoBar() {\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n    }\n    getCurrentPart() {\n        return (this.beat * Config.partsPerBeat + this.part);\n    }\n    findPartsInBar(bar) {\n        if (this.song == null)\n            return 0;\n        let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;\n        for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            let pattern = this.song.getPattern(channel, bar);\n            if (pattern != null) {\n                let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                        for (const note of pattern.notes) {\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                if (partsInBar > note.start)\n                                    partsInBar = note.start;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return partsInBar;\n    }\n    getTotalSamples(enableIntro, enableOutro, loop) {\n        if (this.song == null)\n            return -1;\n        let startBar = enableIntro ? 0 : this.song.loopStart;\n        let endBar = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\n        let hasTempoMods = false;\n        let hasNextBarMods = false;\n        let prevTempo = this.song.tempo;\n        for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n            for (let bar = startBar; bar < endBar; bar++) {\n                let pattern = this.song.getPattern(channel, bar);\n                if (pattern != null) {\n                    let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                    for (let mod = 0; mod < Config.modCount; mod++) {\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                            hasTempoMods = true;\n                        }\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                            hasNextBarMods = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (startBar > 0) {\n            let latestTempoPin = null;\n            let latestTempoValue = 0;\n            for (let bar = startBar - 1; bar >= 0; bar--) {\n                for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                    let pattern = this.song.getPattern(channel, bar);\n                    if (pattern != null) {\n                        let instrumentIdx = pattern.instruments[0];\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let partsInBar = this.findPartsInBar(bar);\n                        for (const note of pattern.notes) {\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\n                                    if (note.end <= partsInBar) {\n                                        latestTempoPin = note.end;\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestTempoPin = partsInBar;\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (latestTempoPin != null) {\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                    bar = -1;\n                }\n            }\n        }\n        if (hasTempoMods || hasNextBarMods) {\n            let bar = startBar;\n            let ended = false;\n            let totalSamples = 0;\n            while (!ended) {\n                let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;\n                let currentPart = 0;\n                if (hasNextBarMods) {\n                    partsInBar = this.findPartsInBar(bar);\n                }\n                if (hasTempoMods) {\n                    let foundMod = false;\n                    for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                        if (foundMod == false) {\n                            let pattern = this.song.getPattern(channel, bar);\n                            if (pattern != null) {\n                                let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                                for (let mod = 0; mod < Config.modCount; mod++) {\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\n                                        foundMod = true;\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                                        for (const note of pattern.notes) {\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n                                                if (note.start < partsInBar) {\n                                                    for (let pinIdx = 1; pinIdx < note.pins.length; pinIdx++) {\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\n                                                            const tickLength = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\n                                                            const prevPinTempo = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            let currPinTempo = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            }\n                                                            let bpmScalar = Config.partsPerBeat * Config.ticksPerPart / 60;\n                                                            if (currPinTempo != prevPinTempo) {\n                                                                totalSamples += -this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\n                                                            }\n                                                            else {\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\n                                                            }\n                                                            prevTempo = currPinTempo;\n                                                        }\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n                bar++;\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\n                    bar = this.song.loopStart;\n                    if (loop > 0)\n                        loop--;\n                }\n                if (bar >= endBar) {\n                    ended = true;\n                }\n            }\n            return Math.ceil(totalSamples);\n        }\n        else {\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\n        }\n    }\n    getTotalBars(enableIntro, enableOutro, useLoopCount = this.loopRepeatCount) {\n        if (this.song == null)\n            throw new Error();\n        let bars = this.song.loopLength * (useLoopCount + 1);\n        if (enableIntro)\n            bars += this.song.loopStart;\n        if (enableOutro)\n            bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n        return bars;\n    }\n    constructor(song = null) {\n        this.samplesPerSecond = 44100;\n        this.song = null;\n        this.preferLowerLatency = false;\n        this.anticipatePoorPerformance = false;\n        this.liveInputDuration = 0;\n        this.liveBassInputDuration = 0;\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n        this.liveInputPitches = [];\n        this.liveBassInputPitches = [];\n        this.liveInputChannel = 0;\n        this.liveBassInputChannel = 0;\n        this.liveInputInstruments = [];\n        this.liveBassInputInstruments = [];\n        this.loopRepeatCount = -1;\n        this.volume = 1.0;\n        this.oscRefreshEventTimer = 0;\n        this.oscEnabled = true;\n        this.enableMetronome = false;\n        this.countInMetronome = false;\n        this.renderingSong = false;\n        this.heldMods = [];\n        this.wantToSkip = false;\n        this.playheadInternal = 0.0;\n        this.bar = 0;\n        this.prevBar = null;\n        this.nextBar = null;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.isAtStartOfTick = true;\n        this.isAtEndOfTick = true;\n        this.tickSampleCountdown = 0;\n        this.modValues = [];\n        this.modInsValues = [];\n        this.nextModValues = [];\n        this.nextModInsValues = [];\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.liveInputEndTime = 0.0;\n        this.browserAutomaticallyClearsAudioBuffer = true;\n        this.tempDrumSetControlPoint = new FilterControlPoint();\n        this.tempFrequencyResponse = new FrequencyResponse();\n        this.loopBarStart = -1;\n        this.loopBarEnd = -1;\n        this.channels = [];\n        this.tonePool = new Deque();\n        this.tempMatchedPitchTones = Array(Config.maxChordSize).fill(null);\n        this.startedMetronome = false;\n        this.metronomeSamplesRemaining = -1;\n        this.metronomeAmplitude = 0.0;\n        this.metronomePrevAmplitude = 0.0;\n        this.metronomeFilter = 0.0;\n        this.limit = 0.0;\n        this.songEqFilterVolume = 1.0;\n        this.songEqFilterVolumeDelta = 0.0;\n        this.songEqFiltersL = [];\n        this.songEqFiltersR = [];\n        this.songEqFilterCount = 0;\n        this.initialSongEqFilterInput1L = 0.0;\n        this.initialSongEqFilterInput2L = 0.0;\n        this.initialSongEqFilterInput1R = 0.0;\n        this.initialSongEqFilterInput2R = 0.0;\n        this.tempMonoInstrumentSampleBuffer = null;\n        this.audioCtx = null;\n        this.scriptNode = null;\n        this.audioProcessCallback = (audioProcessingEvent) => {\n            const outputBuffer = audioProcessingEvent.outputBuffer;\n            const outputDataL = outputBuffer.getChannelData(0);\n            const outputDataR = outputBuffer.getChannelData(1);\n            if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\n                this.browserAutomaticallyClearsAudioBuffer = false;\n            }\n            if (!this.browserAutomaticallyClearsAudioBuffer) {\n                const length = outputBuffer.length;\n                for (let i = 0; i < length; i++) {\n                    outputDataL[i] = 0.0;\n                    outputDataR[i] = 0.0;\n                }\n            }\n            if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\n                this.deactivateAudio();\n            }\n            else {\n                this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n                if (this.oscEnabled) {\n                    if (this.oscRefreshEventTimer <= 0) {\n                        events.raise(\"oscilloscopeUpdate\", outputDataL, outputDataR);\n                        this.oscRefreshEventTimer = 2;\n                    }\n                    else {\n                        this.oscRefreshEventTimer--;\n                    }\n                }\n            }\n        };\n        this.computeDelayBufferSizes();\n        if (song != null)\n            this.setSong(song);\n    }\n    setSong(song) {\n        if (typeof (song) == \"string\") {\n            this.song = new Song(song);\n        }\n        else if (song instanceof Song) {\n            this.song = song;\n        }\n        this.prevBar = null;\n    }\n    computeDelayBufferSizes() {\n        this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n        this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n    }\n    activateAudio() {\n        const bufferSize = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\n            if (this.scriptNode != null)\n                this.deactivateAudio();\n            const latencyHint = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\n            this.samplesPerSecond = this.audioCtx.sampleRate;\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2);\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\n            this.scriptNode.channelCountMode = 'explicit';\n            this.scriptNode.channelInterpretation = 'speakers';\n            this.scriptNode.connect(this.audioCtx.destination);\n            this.computeDelayBufferSizes();\n        }\n        this.audioCtx.resume();\n    }\n    deactivateAudio() {\n        if (this.audioCtx != null && this.scriptNode != null) {\n            this.scriptNode.disconnect(this.audioCtx.destination);\n            this.scriptNode = null;\n            if (this.audioCtx.close)\n                this.audioCtx.close();\n            this.audioCtx = null;\n        }\n    }\n    maintainLiveInput() {\n        this.activateAudio();\n        this.liveInputEndTime = performance.now() + 10000.0;\n    }\n    play() {\n        if (this.isPlayingSong)\n            return;\n        this.initModFilters(this.song);\n        this.computeLatestModValues();\n        this.activateAudio();\n        this.warmUpSynthesizer(this.song);\n        this.isPlayingSong = true;\n    }\n    pause() {\n        if (!this.isPlayingSong)\n            return;\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.preferLowerLatency = false;\n        this.modValues = [];\n        this.nextModValues = [];\n        this.heldMods = [];\n        if (this.song != null) {\n            this.song.inVolumeCap = 0.0;\n            this.song.outVolumeCap = 0.0;\n            this.song.tmpEqFilterStart = null;\n            this.song.tmpEqFilterEnd = null;\n            for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                this.modInsValues[channelIndex] = [];\n                this.nextModInsValues[channelIndex] = [];\n            }\n        }\n    }\n    startRecording() {\n        this.preferLowerLatency = true;\n        this.isRecording = true;\n        this.play();\n    }\n    resetEffects() {\n        this.limit = 0.0;\n        this.freeAllTones();\n        if (this.song != null) {\n            for (const channelState of this.channels) {\n                for (const instrumentState of channelState.instruments) {\n                    instrumentState.resetAllEffects();\n                }\n            }\n        }\n    }\n    setModValue(volumeStart, volumeEnd, channelIndex, instrumentIndex, setting) {\n        let val = volumeStart + Config.modulators[setting].convertRealFactor;\n        let nextVal = volumeEnd + Config.modulators[setting].convertRealFactor;\n        if (Config.modulators[setting].forSong) {\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\n                this.modValues[setting] = val;\n                this.nextModValues[setting] = nextVal;\n            }\n        }\n        else {\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\n            }\n        }\n        return val;\n    }\n    getModValue(setting, channel, instrument, nextVal) {\n        const forSong = Config.modulators[setting].forSong;\n        if (forSong) {\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\n                return nextVal ? this.nextModValues[setting] : this.modValues[setting];\n            }\n        }\n        else if (channel != undefined && instrument != undefined) {\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                return nextVal ? this.nextModInsValues[channel][instrument][setting] : this.modInsValues[channel][instrument][setting];\n            }\n        }\n        return -1;\n    }\n    isAnyModActive(channel, instrument) {\n        for (let setting = 0; setting < Config.modulators.length; setting++) {\n            if ((this.modValues != undefined && this.modValues[setting] != null)\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    unsetMod(setting, channel, instrument) {\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\n            this.modValues[setting] = null;\n            this.nextModValues[setting] = null;\n            for (let i = 0; i < this.heldMods.length; i++) {\n                if (channel != undefined && instrument != undefined) {\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n                else {\n                    if (this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n            }\n            if (channel != undefined && instrument != undefined) {\n                this.modInsValues[channel][instrument][setting] = null;\n                this.nextModInsValues[channel][instrument][setting] = null;\n            }\n        }\n    }\n    isFilterModActive(forNoteFilter, channelIdx, instrumentIdx, forSong) {\n        var _a;\n        const instrument = this.song.channels[channelIdx].instruments[instrumentIdx];\n        if (forNoteFilter) {\n            if (instrument.noteFilterType)\n                return false;\n            if (instrument.tmpNoteFilterEnd != null)\n                return true;\n        }\n        else {\n            if (forSong) {\n                if (((_a = this === null || this === void 0 ? void 0 : this.song) === null || _a === void 0 ? void 0 : _a.tmpEqFilterEnd) != null)\n                    return true;\n            }\n            else {\n                if (instrument.eqFilterType)\n                    return false;\n                if (instrument.tmpEqFilterEnd != null)\n                    return true;\n            }\n        }\n        return false;\n    }\n    isModActive(setting, channel, instrument) {\n        const forSong = Config.modulators[setting].forSong;\n        if (forSong) {\n            return (this.modValues != undefined && this.modValues[setting] != null);\n        }\n        else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\n            return (this.modInsValues[channel][instrument][setting] != null);\n        }\n        return false;\n    }\n    forceHoldMods(volumeStart, channelIndex, instrumentIndex, setting) {\n        let found = false;\n        for (let i = 0; i < this.heldMods.length; i++) {\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\n                this.heldMods[i].volume = volumeStart;\n                this.heldMods[i].holdFor = 24;\n                found = true;\n            }\n        }\n        if (!found)\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\n    }\n    snapToStart() {\n        this.bar = 0;\n        this.resetEffects();\n        this.snapToBar();\n    }\n    goToBar(bar) {\n        this.bar = bar;\n        this.resetEffects();\n        this.playheadInternal = this.bar;\n    }\n    snapToBar() {\n        this.playheadInternal = this.bar;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = 0;\n    }\n    jumpIntoLoop() {\n        if (!this.song)\n            return;\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n            const oldBar = this.bar;\n            this.bar = this.song.loopStart;\n            this.playheadInternal += this.bar - oldBar;\n            if (this.playing)\n                this.computeLatestModValues();\n        }\n    }\n    goToNextBar() {\n        if (!this.song)\n            return;\n        this.prevBar = this.bar;\n        const oldBar = this.bar;\n        this.bar++;\n        if (this.bar >= this.song.barCount) {\n            this.bar = 0;\n        }\n        this.playheadInternal += this.bar - oldBar;\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n    goToPrevBar() {\n        if (!this.song)\n            return;\n        this.prevBar = null;\n        const oldBar = this.bar;\n        this.bar--;\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\n            this.bar = this.song.barCount - 1;\n        }\n        this.playheadInternal += this.bar - oldBar;\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n    getNextBar() {\n        let nextBar = this.bar + 1;\n        if (this.isRecording) {\n            if (nextBar >= this.song.barCount) {\n                nextBar = this.song.barCount - 1;\n            }\n        }\n        else if (this.bar == this.loopBarEnd && !this.renderingSong) {\n            nextBar = this.loopBarStart;\n        }\n        else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd + 1, this.song.loopStart + this.song.loopLength)) {\n            nextBar = this.song.loopStart;\n        }\n        return nextBar;\n    }\n    skipBar() {\n        if (!this.song)\n            return;\n        const samplesPerTick = this.getSamplesPerTick();\n        this.prevBar = this.bar;\n        if (this.loopBarEnd != this.bar)\n            this.bar++;\n        else {\n            this.bar = this.loopBarStart;\n        }\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = samplesPerTick;\n        this.isAtStartOfTick = true;\n        if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {\n            this.bar = this.song.loopStart;\n            if (this.loopBarStart != -1)\n                this.bar = this.loopBarStart;\n            if (this.loopRepeatCount > 0)\n                this.loopRepeatCount--;\n        }\n    }\n    computeSongState(samplesPerTick) {\n        if (this.song == null)\n            return;\n        const roundedSamplesPerTick = Math.ceil(samplesPerTick);\n        const samplesPerSecond = this.samplesPerSecond;\n        let eqFilterVolume = 1.0;\n        if (this.song.eqFilterType) {\n            const eqFilterSettingsStart = this.song.eqFilter;\n            if (this.song.eqSubFilters[1] == null)\n                this.song.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd = this.song.eqSubFilters[1];\n            let startSimpleFreq = this.song.eqFilterSimpleCut;\n            let startSimpleGain = this.song.eqFilterSimplePeak;\n            let endSimpleFreq = this.song.eqFilterSimpleCut;\n            let endSimpleGain = this.song.eqFilterSimplePeak;\n            let filterChanges = false;\n            let startPoint;\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint = eqFilterSettingsEnd.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length < 1)\n                    this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length < 1)\n                    this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length < 1)\n                    this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length < 1)\n                    this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            this.songEqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        else {\n            const eqFilterSettings = (this.song.tmpEqFilterStart != null) ? this.song.tmpEqFilterStart : this.song.eqFilter;\n            for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {\n                let startPoint = eqFilterSettings.controlPoints[i];\n                let endPoint = (this.song.tmpEqFilterEnd != null && this.song.tmpEqFilterEnd.controlPoints[i] != null) ? this.song.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length <= i)\n                    this.songEqFiltersL[i] = new DynamicBiquadFilter();\n                this.songEqFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length <= i)\n                    this.songEqFiltersR[i] = new DynamicBiquadFilter();\n                this.songEqFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            }\n            this.songEqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        let eqFilterVolumeStart = eqFilterVolume;\n        let eqFilterVolumeEnd = eqFilterVolume;\n        this.songEqFilterVolume = eqFilterVolumeStart;\n        this.songEqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n    }\n    synthesize(outputDataL, outputDataR, outputBufferLength, playSong = true) {\n        if (this.song == null) {\n            for (let i = 0; i < outputBufferLength; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n            this.deactivateAudio();\n            return;\n        }\n        const outputDataLUnfiltered = outputDataL.slice();\n        const outputDataRUnfiltered = outputDataR.slice();\n        const song = this.song;\n        this.song.inVolumeCap = 0.0;\n        this.song.outVolumeCap = 0.0;\n        let samplesPerTick = this.getSamplesPerTick();\n        let ended = false;\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\n            this.tickSampleCountdown = samplesPerTick;\n            this.isAtStartOfTick = true;\n        }\n        if (playSong) {\n            if (this.beat >= song.beatsPerBar) {\n                this.beat = 0;\n                this.part = 0;\n                this.tick = 0;\n                this.tickSampleCountdown = samplesPerTick;\n                this.isAtStartOfTick = true;\n                this.prevBar = this.bar;\n                this.bar = this.getNextBar();\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0)\n                    this.loopRepeatCount--;\n            }\n            if (this.bar >= song.barCount) {\n                this.bar = 0;\n                if (this.loopRepeatCount != -1) {\n                    ended = true;\n                    this.pause();\n                }\n            }\n        }\n        this.syncSongState();\n        if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\n            this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\n        }\n        const volume = +this.volume;\n        const limitDecay = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\n        const limitRise = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\n        let limit = +this.limit;\n        let skippedBars = [];\n        let firstSkippedBufferIndex = -1;\n        let bufferIndex = 0;\n        while (bufferIndex < outputBufferLength && !ended) {\n            this.nextBar = this.getNextBar();\n            if (this.nextBar >= song.barCount)\n                this.nextBar = null;\n            const samplesLeftInBuffer = outputBufferLength - bufferIndex;\n            const samplesLeftInTick = Math.ceil(this.tickSampleCountdown);\n            const runLength = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n            const runEnd = bufferIndex + runLength;\n            if (this.isPlayingSong || this.renderingSong) {\n                for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel = song.channels[channelIndex];\n                    const channelState = this.channels[channelIndex];\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\n                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState = channelState.instruments[instrumentIndex];\n                        for (let i = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone = instrumentState.activeModTones.get(i);\n                            const channel = song.channels[channelIndex];\n                            const instrument = channel.instruments[tone.instrumentIndex];\n                            let mod = Config.modCount - 1 - tone.pitches[0];\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                continue;\n                            }\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                        }\n                    }\n                }\n                for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel = song.channels[channelIndex];\n                    const channelState = this.channels[channelIndex];\n                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState = channelState.instruments[instrumentIndex];\n                        for (let i = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone = instrumentState.activeModTones.get(i);\n                            const channel = song.channels[channelIndex];\n                            const instrument = channel.instruments[tone.instrumentIndex];\n                            let mod = Config.modCount - 1 - tone.pitches[0];\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                            }\n                        }\n                    }\n                }\n            }\n            if (this.wantToSkip) {\n                let barVisited = skippedBars.includes(this.bar);\n                if (barVisited && bufferIndex == firstSkippedBufferIndex) {\n                    this.pause();\n                    return;\n                }\n                if (firstSkippedBufferIndex == -1) {\n                    firstSkippedBufferIndex = bufferIndex;\n                }\n                if (!barVisited)\n                    skippedBars.push(this.bar);\n                this.wantToSkip = false;\n                this.skipBar();\n                continue;\n            }\n            this.computeSongState(samplesPerTick);\n            for (let channelIndex = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\n                const channel = song.channels[channelIndex];\n                const channelState = this.channels[channelIndex];\n                if (this.isAtStartOfTick) {\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\n                }\n                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    const instrument = channel.instruments[instrumentIndex];\n                    const instrumentState = channelState.instruments[instrumentIndex];\n                    if (this.isAtStartOfTick) {\n                        let tonesPlayedInThisInstrument = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\n                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone = instrumentState.releasedTones.get(i);\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                                continue;\n                            }\n                            const shouldFadeOutFast = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\n                            tonesPlayedInThisInstrument++;\n                        }\n                        if (instrumentState.awake) {\n                            if (!instrumentState.computed) {\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\n                            }\n                            instrumentState.computed = false;\n                            instrumentState.envelopeComputer.clearEnvelopes();\n                        }\n                    }\n                    for (let i = 0; i < instrumentState.activeTones.count(); i++) {\n                        const tone = instrumentState.activeTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    for (let i = 0; i < instrumentState.liveInputTones.count(); i++) {\n                        const tone = instrumentState.liveInputTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                        const tone = instrumentState.releasedTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    if (instrumentState.awake) {\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n                    }\n                    const tickSampleCountdown = this.tickSampleCountdown;\n                    const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;\n                    const endRatio = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n                    const ticksIntoBar = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n                    const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;\n                    const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;\n                    const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n                    const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n                    let useVibratoSpeed = instrument.vibratoSpeed;\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\n                    }\n                    if (useVibratoSpeed == 0) {\n                        instrumentState.vibratoTime = 0;\n                        instrumentState.nextVibratoTime = 0;\n                    }\n                    else {\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\n                    }\n                }\n            }\n            if (this.enableMetronome || this.countInMetronome) {\n                if (this.part == 0) {\n                    if (!this.startedMetronome) {\n                        const midBeat = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\n                        const periods = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\n                        const hz = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\n                        const amplitude = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\n                        const samplesPerPeriod = this.samplesPerSecond / hz;\n                        const radiansPerSample = Math.PI * 2.0 / samplesPerPeriod;\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\n                        this.metronomePrevAmplitude = 0.0;\n                        this.startedMetronome = true;\n                    }\n                    if (this.metronomeSamplesRemaining > 0) {\n                        const stopIndex = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\n                        for (let i = bufferIndex; i < stopIndex; i++) {\n                            outputDataLUnfiltered[i] += this.metronomeAmplitude;\n                            outputDataRUnfiltered[i] += this.metronomeAmplitude;\n                            const tempAmplitude = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\n                            this.metronomeAmplitude = tempAmplitude;\n                        }\n                    }\n                }\n                else {\n                    this.startedMetronome = false;\n                }\n            }\n            for (let i = bufferIndex; i < runEnd; i++) {\n                {\n                    let filtersL = this.songEqFiltersL;\n                    let filtersR = this.songEqFiltersR;\n                    const filterCount = this.songEqFilterCount | 0;\n                    let initialFilterInput1L = +this.initialSongEqFilterInput1L;\n                    let initialFilterInput2L = +this.initialSongEqFilterInput2L;\n                    let initialFilterInput1R = +this.initialSongEqFilterInput1R;\n                    let initialFilterInput2R = +this.initialSongEqFilterInput2R;\n                    const applyFilters = Synth.applyFilters;\n                    let eqFilterVolume = +this.songEqFilterVolume;\n                    const eqFilterVolumeDelta = +this.songEqFilterVolumeDelta;\n                    const inputSampleL = outputDataL[i];\n                    let sampleL = inputSampleL;\n                    sampleL = applyFilters(sampleL, initialFilterInput1L, initialFilterInput2L, filterCount, filtersL);\n                    initialFilterInput2L = initialFilterInput1L;\n                    initialFilterInput1L = inputSampleL;\n                    sampleL *= eqFilterVolume;\n                    outputDataL[i] = sampleL;\n                    const inputSampleR = outputDataR[i];\n                    let sampleR = inputSampleR;\n                    sampleR = applyFilters(sampleR, initialFilterInput1R, initialFilterInput2R, filterCount, filtersR);\n                    initialFilterInput2R = initialFilterInput1R;\n                    initialFilterInput1R = inputSampleR;\n                    sampleR *= eqFilterVolume;\n                    outputDataR[i] = sampleR;\n                    eqFilterVolume += eqFilterVolumeDelta;\n                    this.sanitizeFilters(filtersL);\n                    if (!(initialFilterInput1L < 100) || !(initialFilterInput2L < 100)) {\n                        initialFilterInput1L = 0.0;\n                        initialFilterInput2L = 0.0;\n                    }\n                    if (Math.abs(initialFilterInput1L) < epsilon)\n                        initialFilterInput1L = 0.0;\n                    if (Math.abs(initialFilterInput2L) < epsilon)\n                        initialFilterInput2L = 0.0;\n                    this.initialSongEqFilterInput1L = initialFilterInput1L;\n                    this.initialSongEqFilterInput2L = initialFilterInput2L;\n                    this.sanitizeFilters(filtersR);\n                    if (!(initialFilterInput1R < 100) || !(initialFilterInput2R < 100)) {\n                        initialFilterInput1R = 0.0;\n                        initialFilterInput2R = 0.0;\n                    }\n                    if (Math.abs(initialFilterInput1R) < epsilon)\n                        initialFilterInput1R = 0.0;\n                    if (Math.abs(initialFilterInput2R) < epsilon)\n                        initialFilterInput2R = 0.0;\n                    this.initialSongEqFilterInput1R = initialFilterInput1R;\n                    this.initialSongEqFilterInput2R = initialFilterInput2R;\n                }\n                const sampleL = (outputDataL[i] + outputDataLUnfiltered[i]) * song.masterGain * song.masterGain;\n                const sampleR = (outputDataR[i] + outputDataRUnfiltered[i]) * song.masterGain * song.masterGain;\n                const absL = sampleL < 0.0 ? -sampleL : sampleL;\n                const absR = sampleR < 0.0 ? -sampleR : sampleR;\n                const abs = absL > absR ? absL : absR;\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs);\n                const limitRange = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\n                const limitTarget = (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\n                    + (+(limitRange == 1)) * (1.05)\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n                outputDataL[i] = sampleL * limitedVolume;\n                outputDataR[i] = sampleR * limitedVolume;\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume);\n            }\n            bufferIndex += runLength;\n            this.isAtStartOfTick = false;\n            this.tickSampleCountdown -= runLength;\n            if (this.tickSampleCountdown <= 0) {\n                this.isAtStartOfTick = true;\n                for (const channelState of this.channels) {\n                    for (const instrumentState of channelState.instruments) {\n                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone = instrumentState.releasedTones.get(i);\n                            if (tone.isOnLastTick) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                            }\n                            else {\n                                tone.ticksSinceReleased++;\n                            }\n                        }\n                        if (instrumentState.deactivateAfterThisTick) {\n                            instrumentState.deactivate();\n                        }\n                        instrumentState.tonesAddedInThisTick = false;\n                    }\n                }\n                const ticksIntoBar = this.getTicksIntoBar();\n                const tickTimeStart = ticksIntoBar;\n                const secondsPerTick = samplesPerTick / this.samplesPerSecond;\n                const currentPart = this.getCurrentPart();\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let instrumentState = this.channels[channel].instruments[instrumentIdx];\n                        const envelopeComputer = instrumentState.envelopeComputer;\n                        const envelopeSpeeds = [];\n                        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n                            envelopeSpeeds[i] = 0;\n                        }\n                        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                            let useEnvelopeSpeed = instrument.envelopeSpeed;\n                            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channel, instrumentIdx) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n                            }\n                            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\n                                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\n                                if (Number.isInteger(useEnvelopeSpeed)) {\n                                    instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                                }\n                                else {\n                                    instrumentState.envelopeTime[envelopeIndex] += ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]) * perEnvelopeSpeed;\n                                }\n                            }\n                            else {\n                                instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                            }\n                        }\n                        if (instrumentState.activeTones.count() > 0) {\n                            const tone = instrumentState.activeTones.get(0);\n                            envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, instrumentState, this, channel, instrumentIdx);\n                        }\n                        const envelopeStarts = envelopeComputer.envelopeStarts;\n                        const arpEnvelopeStart = envelopeStarts[48];\n                        let useArpeggioSpeed = instrument.arpeggioSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false));\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            }\n                            else {\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        else {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * useArpeggioSpeed);\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            }\n                            else {\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        envelopeComputer.clearEnvelopes();\n                    }\n                }\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        if (instrument.tmpEqFilterEnd != null) {\n                            instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;\n                        }\n                        else {\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\n                        }\n                        if (instrument.tmpNoteFilterEnd != null) {\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\n                        }\n                        else {\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                        }\n                    }\n                }\n                if (song.tmpEqFilterEnd != null) {\n                    song.tmpEqFilterStart = song.tmpEqFilterEnd;\n                }\n                else {\n                    song.tmpEqFilterStart = song.eqFilter;\n                }\n                this.tick++;\n                this.tickSampleCountdown += samplesPerTick;\n                if (this.tick == Config.ticksPerPart) {\n                    this.tick = 0;\n                    this.part++;\n                    this.liveInputDuration--;\n                    this.liveBassInputDuration--;\n                    for (let i = 0; i < this.heldMods.length; i++) {\n                        this.heldMods[i].holdFor--;\n                        if (this.heldMods[i].holdFor <= 0) {\n                            this.heldMods.splice(i, 1);\n                        }\n                    }\n                    if (this.part == Config.partsPerBeat) {\n                        this.part = 0;\n                        if (playSong) {\n                            this.beat++;\n                            if (this.beat == song.beatsPerBar) {\n                                this.beat = 0;\n                                if (this.countInMetronome) {\n                                    this.countInMetronome = false;\n                                }\n                                else {\n                                    this.prevBar = this.bar;\n                                    this.bar = this.getNextBar();\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0)\n                                        this.loopRepeatCount--;\n                                    if (this.bar >= song.barCount) {\n                                        this.bar = 0;\n                                        if (this.loopRepeatCount != -1) {\n                                            ended = true;\n                                            this.resetEffects();\n                                            this.pause();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (let setting = 0; setting < Config.modulators.length; setting++) {\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\n                    this.modValues[setting] = this.nextModValues[setting];\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n                samplesPerTick = this.getSamplesPerTick();\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\n            }\n            for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    const instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio));\n                    for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                        instrumentState.envelopeTime[envelopeIndex] = (instrumentState.envelopeTime[envelopeIndex] % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\n                    }\n                }\n            }\n            const maxInstrumentsPerChannel = this.song.getMaxInstrumentsPerChannel();\n            for (let setting = 0; setting < Config.modulators.length; setting++) {\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrument = 0; instrument < maxInstrumentsPerChannel; instrument++) {\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\n                        }\n                    }\n                }\n            }\n        }\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon)\n            limit = 0.0;\n        this.limit = limit;\n        if (playSong && !this.countInMetronome) {\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n        }\n    }\n    freeTone(tone) {\n        this.tonePool.pushBack(tone);\n    }\n    newTone() {\n        if (this.tonePool.count() > 0) {\n            const tone = this.tonePool.popBack();\n            tone.freshlyAllocated = true;\n            return tone;\n        }\n        return new Tone();\n    }\n    releaseTone(instrumentState, tone) {\n        instrumentState.releasedTones.pushFront(tone);\n        tone.atNoteStart = false;\n        tone.passedEndOfNote = true;\n    }\n    freeReleasedTone(instrumentState, toneIndex) {\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\n        instrumentState.releasedTones.remove(toneIndex);\n    }\n    freeAllTones() {\n        for (const channelState of this.channels) {\n            for (const instrumentState of channelState.instruments) {\n                while (instrumentState.activeTones.count() > 0)\n                    this.freeTone(instrumentState.activeTones.popBack());\n                while (instrumentState.activeModTones.count() > 0)\n                    this.freeTone(instrumentState.activeModTones.popBack());\n                while (instrumentState.releasedTones.count() > 0)\n                    this.freeTone(instrumentState.releasedTones.popBack());\n                while (instrumentState.liveInputTones.count() > 0)\n                    this.freeTone(instrumentState.liveInputTones.popBack());\n            }\n        }\n    }\n    determineLiveInputTones(song, channelIndex, samplesPerTick) {\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const pitches = this.liveInputPitches;\n        const bassPitches = this.liveBassInputPitches;\n        if (this.liveInputPitches.length > 0 || this.liveBassInputPitches.length > 0) {\n            this.computeLatestModValues();\n        }\n        for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n            const instrumentState = channelState.instruments[instrumentIndex];\n            const toneList = instrumentState.liveInputTones;\n            let toneCount = 0;\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument = channel.instruments[instrumentIndex];\n                if (instrument.getChord().singleTone) {\n                    let tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n                    for (let i = 0; i < pitches.length; i++) {\n                        tone.pitches[i] = pitches[i];\n                    }\n                    tone.pitchCount = pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                }\n                else {\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\n                    for (let i = 0; i < pitches.length; i++) {\n                        let tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount];\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        }\n                        else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n                        tone.pitches[0] = pitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = pitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument = channel.instruments[instrumentIndex];\n                if (instrument.getChord().singleTone) {\n                    let tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n                    for (let i = 0; i < bassPitches.length; i++) {\n                        tone.pitches[i] = bassPitches[i];\n                    }\n                    tone.pitchCount = bassPitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveBassInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                }\n                else {\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\n                    for (let i = 0; i < bassPitches.length; i++) {\n                        let tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount];\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        }\n                        else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n                        tone.pitches[0] = bassPitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = bassPitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveBassInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n            while (toneList.count() > toneCount) {\n                this.releaseTone(instrumentState, toneList.popBack());\n            }\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\n        }\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n    }\n    adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, otherPattern, instrumentIndex, transition, chord, note, otherNote, forceContinue) {\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n                return null;\n            }\n            const otherInstrument = channel.instruments[otherPattern.instruments[0]];\n            if (forceContinue) {\n                return otherInstrument.getChord();\n            }\n            const otherTransition = otherInstrument.getTransition();\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n                return otherInstrument.getChord();\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n        }\n    }\n    static adjacentNotesHaveMatchingPitches(firstNote, secondNote) {\n        if (firstNote.pitches.length != secondNote.pitches.length)\n            return false;\n        const firstNoteInterval = firstNote.pins[firstNote.pins.length - 1].interval;\n        for (const pitch of firstNote.pitches) {\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1)\n                return false;\n        }\n        return true;\n    }\n    moveTonesIntoOrderedTempMatchedList(toneList, notePitches) {\n        for (let i = 0; i < toneList.count(); i++) {\n            const tone = toneList.get(i);\n            const pitch = tone.pitches[0] + tone.lastInterval;\n            for (let j = 0; j < notePitches.length; j++) {\n                if (notePitches[j] == pitch) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    toneList.remove(i);\n                    i--;\n                    break;\n                }\n            }\n        }\n        while (toneList.count() > 0) {\n            const tone = toneList.popFront();\n            for (let j = 0; j < this.tempMatchedPitchTones.length; j++) {\n                if (this.tempMatchedPitchTones[j] == null) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    break;\n                }\n            }\n        }\n    }\n    determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong) {\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const pattern = song.getPattern(channelIndex, this.bar);\n        const currentPart = this.getCurrentPart();\n        const currentTick = this.tick + Config.ticksPerPart * currentPart;\n        if (playSong && song.getChannelIsMod(channelIndex)) {\n            let notes = [];\n            let prevNotes = [];\n            let nextNotes = [];\n            let fillCount = Config.modCount;\n            while (fillCount--) {\n                notes.push(null);\n                prevNotes.push(null);\n                nextNotes.push(null);\n            }\n            if (pattern != null && !channel.muted) {\n                for (let i = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > prevNotes[pattern.notes[i].pitches[0]].start) {\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < nextNotes[pattern.notes[i].pitches[0]].start) {\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                }\n            }\n            let modToneCount = 0;\n            const newInstrumentIndex = (song.patternInstruments && (pattern != null)) ? pattern.instruments[0] : 0;\n            const instrumentState = channelState.instruments[newInstrumentIndex];\n            const toneList = instrumentState.activeModTones;\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                if (notes[mod] != null) {\n                    if (prevNotes[mod] != null && prevNotes[mod].end != notes[mod].start)\n                        prevNotes[mod] = null;\n                    if (nextNotes[mod] != null && nextNotes[mod].start != notes[mod].end)\n                        nextNotes[mod] = null;\n                }\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n                if (notes[mod] != null) {\n                    let prevNoteForThisInstrument = prevNotes[mod];\n                    let nextNoteForThisInstrument = nextNotes[mod];\n                    let forceContinueAtStart = false;\n                    let forceContinueAtEnd = false;\n                    const atNoteStart = (Config.ticksPerPart * notes[mod].start == currentTick) && this.isAtStartOfTick;\n                    let tone;\n                    if (toneList.count() <= modToneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (atNoteStart && (prevNoteForThisInstrument == null)) {\n                        const oldTone = toneList.get(modToneCount);\n                        if (oldTone.isOnLastTick) {\n                            this.freeTone(oldTone);\n                        }\n                        else {\n                            this.releaseTone(instrumentState, oldTone);\n                        }\n                        tone = this.newTone();\n                        toneList.set(modToneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(modToneCount);\n                    }\n                    modToneCount++;\n                    for (let i = 0; i < notes[mod].pitches.length; i++) {\n                        tone.pitches[i] = notes[mod].pitches[i];\n                    }\n                    tone.pitchCount = notes[mod].pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = newInstrumentIndex;\n                    tone.note = notes[mod];\n                    tone.noteStartPart = notes[mod].start;\n                    tone.noteEndPart = notes[mod].end;\n                    tone.prevNote = prevNoteForThisInstrument;\n                    tone.nextNote = nextNoteForThisInstrument;\n                    tone.prevNotePitchIndex = 0;\n                    tone.nextNotePitchIndex = 0;\n                    tone.atNoteStart = atNoteStart;\n                    tone.passedEndOfNote = false;\n                    tone.forceContinueAtStart = forceContinueAtStart;\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\n                }\n            }\n            while (toneList.count() > modToneCount) {\n                const tone = toneList.popBack();\n                const channel = song.channels[channelIndex];\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                    const instrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n                    this.releaseTone(instrumentState, tone);\n                }\n                else {\n                    this.freeTone(tone);\n                }\n            }\n        }\n        else if (!song.getChannelIsMod(channelIndex)) {\n            let note = null;\n            let prevNote = null;\n            let nextNote = null;\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\n                for (let i = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        prevNote = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        note = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        nextNote = pattern.notes[i];\n                        break;\n                    }\n                }\n                if (note != null) {\n                    if (prevNote != null && prevNote.end != note.start)\n                        prevNote = null;\n                    if (nextNote != null && nextNote.start != note.end)\n                        nextNote = null;\n                }\n            }\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n                const newInstrumentIndex = song.patternInstruments ? pattern.instruments[0] : 0;\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeTones.count() > 0) {\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n            }\n            else {\n                channelState.singleSeamlessInstrument = null;\n            }\n            for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                const instrumentState = channelState.instruments[instrumentIndex];\n                const toneList = instrumentState.activeTones;\n                let toneCount = 0;\n                if ((note != null) && (!song.patternInstruments || (pattern.instruments.indexOf(instrumentIndex) != -1))) {\n                    const instrument = channel.instruments[instrumentIndex];\n                    let prevNoteForThisInstrument = prevNote;\n                    let nextNoteForThisInstrument = nextNote;\n                    const partsPerBar = Config.partsPerBeat * song.beatsPerBar;\n                    const transition = instrument.getTransition();\n                    const chord = instrument.getChord();\n                    let forceContinueAtStart = false;\n                    let forceContinueAtEnd = false;\n                    let tonesInPrevNote = 0;\n                    let tonesInNextNote = 0;\n                    if (note.start == 0) {\n                        let prevPattern = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n                        if (prevPattern != null) {\n                            const lastNote = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n                            if (lastNote != null && lastNote.end == partsPerBar) {\n                                const patternForcesContinueAtStart = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n                                const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    prevNoteForThisInstrument = lastNote;\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;\n                                    forceContinueAtStart = patternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    }\n                    else if (prevNoteForThisInstrument != null) {\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;\n                    }\n                    if (note.end == partsPerBar) {\n                        let nextPattern = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n                        if (nextPattern != null) {\n                            const firstNote = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n                            if (firstNote != null && firstNote.start == 0) {\n                                const nextPatternForcesContinueAtStart = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n                                const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    nextNoteForThisInstrument = firstNote;\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    }\n                    else if (nextNoteForThisInstrument != null) {\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;\n                    }\n                    if (chord.singleTone) {\n                        const atNoteStart = (Config.ticksPerPart * note.start == currentTick);\n                        let tone;\n                        if (toneList.count() <= toneCount) {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n                            const oldTone = toneList.get(toneCount);\n                            if (oldTone.isOnLastTick) {\n                                this.freeTone(oldTone);\n                            }\n                            else {\n                                this.releaseTone(instrumentState, oldTone);\n                            }\n                            tone = this.newTone();\n                            toneList.set(toneCount, tone);\n                        }\n                        else {\n                            tone = toneList.get(toneCount);\n                        }\n                        toneCount++;\n                        for (let i = 0; i < note.pitches.length; i++) {\n                            tone.pitches[i] = note.pitches[i];\n                        }\n                        tone.pitchCount = note.pitches.length;\n                        tone.chordSize = 1;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = note;\n                        tone.noteStartPart = note.start;\n                        tone.noteEndPart = note.end;\n                        tone.prevNote = prevNoteForThisInstrument;\n                        tone.nextNote = nextNoteForThisInstrument;\n                        tone.prevNotePitchIndex = 0;\n                        tone.nextNotePitchIndex = 0;\n                        tone.atNoteStart = atNoteStart;\n                        tone.passedEndOfNote = false;\n                        tone.forceContinueAtStart = forceContinueAtStart;\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                    else {\n                        const transition = instrument.getTransition();\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\n                        }\n                        let strumOffsetParts = 0;\n                        for (let i = 0; i < note.pitches.length; i++) {\n                            let prevNoteForThisTone = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n                            let noteForThisTone = note;\n                            let nextNoteForThisTone = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n                            let noteStartPart = noteForThisTone.start + strumOffsetParts;\n                            let passedEndOfNote = false;\n                            if (noteStartPart > currentPart) {\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n                                    nextNoteForThisTone = noteForThisTone;\n                                    noteForThisTone = prevNoteForThisTone;\n                                    prevNoteForThisTone = null;\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\n                                    passedEndOfNote = true;\n                                }\n                                else {\n                                    break;\n                                }\n                            }\n                            let noteEndPart = noteForThisTone.end;\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song.beatsPerBar, noteEndPart + strumOffsetParts);\n                            }\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n                                strumOffsetParts += chord.strumParts;\n                            }\n                            const atNoteStart = (Config.ticksPerPart * noteStartPart == currentTick);\n                            let tone;\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\n                                tone = this.tempMatchedPitchTones[toneCount];\n                                this.tempMatchedPitchTones[toneCount] = null;\n                                toneList.pushBack(tone);\n                            }\n                            else if (toneList.count() <= toneCount) {\n                                tone = this.newTone();\n                                toneList.pushBack(tone);\n                            }\n                            else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n                                const oldTone = toneList.get(toneCount);\n                                if (oldTone.isOnLastTick) {\n                                    this.freeTone(oldTone);\n                                }\n                                else {\n                                    this.releaseTone(instrumentState, oldTone);\n                                }\n                                tone = this.newTone();\n                                toneList.set(toneCount, tone);\n                            }\n                            else {\n                                tone = toneList.get(toneCount);\n                            }\n                            toneCount++;\n                            tone.pitches[0] = noteForThisTone.pitches[i];\n                            tone.pitchCount = 1;\n                            tone.chordSize = noteForThisTone.pitches.length;\n                            tone.instrumentIndex = instrumentIndex;\n                            tone.note = noteForThisTone;\n                            tone.noteStartPart = noteStartPart;\n                            tone.noteEndPart = noteEndPart;\n                            tone.prevNote = prevNoteForThisTone;\n                            tone.nextNote = nextNoteForThisTone;\n                            tone.prevNotePitchIndex = i;\n                            tone.nextNotePitchIndex = i;\n                            tone.atNoteStart = atNoteStart;\n                            tone.passedEndOfNote = passedEndOfNote;\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                        }\n                    }\n                    if (transition.continues && (toneList.count() <= 0) || (note.pitches.length <= 0))\n                        instrumentState.envelopeComputer.reset();\n                }\n                while (toneList.count() > toneCount) {\n                    const tone = toneList.popBack();\n                    const channel = song.channels[channelIndex];\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                        const instrumentState = channelState.instruments[tone.instrumentIndex];\n                        this.releaseTone(instrumentState, tone);\n                    }\n                    else {\n                        this.freeTone(tone);\n                    }\n                }\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\n            }\n        }\n    }\n    clearTempMatchedPitchTones(toneCount, instrumentState) {\n        for (let i = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n            const oldTone = this.tempMatchedPitchTones[i];\n            if (oldTone != null) {\n                if (oldTone.isOnLastTick) {\n                    this.freeTone(oldTone);\n                }\n                else {\n                    this.releaseTone(instrumentState, oldTone);\n                }\n                this.tempMatchedPitchTones[i] = null;\n            }\n        }\n    }\n    playTone(channelIndex, bufferIndex, runLength, tone) {\n        const channelState = this.channels[channelIndex];\n        const instrumentState = channelState.instruments[tone.instrumentIndex];\n        if (instrumentState.synthesizer != null)\n            instrumentState.synthesizer(this, bufferIndex, runLength, tone, instrumentState);\n        tone.envelopeComputer.clearEnvelopes();\n        instrumentState.envelopeComputer.clearEnvelopes();\n    }\n    playModTone(song, channelIndex, samplesPerTick, bufferIndex, roundedSamplesPerTick, tone, released, shouldFadeOutFast) {\n        const channel = song.channels[channelIndex];\n        const instrument = channel.instruments[tone.instrumentIndex];\n        if (tone.note != null) {\n            const ticksIntoBar = this.getTicksIntoBar();\n            const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;\n            const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;\n            const tickSampleCountdown = this.tickSampleCountdown;\n            const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;\n            const endRatio = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\n            const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n            const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n            const tickTimeStart = Config.ticksPerPart * partTimeStart;\n            const tickTimeEnd = Config.ticksPerPart * partTimeEnd;\n            const endPinIndex = tone.note.getEndPinIndex(this.getCurrentPart());\n            const startPin = tone.note.pins[endPinIndex - 1];\n            const endPin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\n        }\n    }\n    static computeChordExpression(chordSize) {\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n    }\n    computeTone(song, channelIndex, samplesPerTick, tone, released, shouldFadeOutFast) {\n        const roundedSamplesPerTick = Math.ceil(samplesPerTick);\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const instrument = channel.instruments[tone.instrumentIndex];\n        const instrumentState = channelState.instruments[tone.instrumentIndex];\n        instrumentState.awake = true;\n        instrumentState.tonesAddedInThisTick = true;\n        if (!instrumentState.computed) {\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\n        }\n        const transition = instrument.getTransition();\n        const chord = instrument.getChord();\n        const chordExpression = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n        const isNoiseChannel = song.getChannelIsNoise(channelIndex);\n        const intervalScale = isNoiseChannel ? Config.noiseInterval : 1;\n        const secondsPerPart = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\n        const sampleTime = 1.0 / this.samplesPerSecond;\n        const beatsPerPart = 1.0 / Config.partsPerBeat;\n        const ticksIntoBar = this.getTicksIntoBar();\n        const partTimeStart = (ticksIntoBar) / Config.ticksPerPart;\n        const partTimeEnd = (ticksIntoBar + 1.0) / Config.ticksPerPart;\n        const currentPart = this.getCurrentPart();\n        let specialIntervalMult = 1.0;\n        tone.specialIntervalExpressionMult = 1.0;\n        let toneIsOnLastTick = shouldFadeOutFast;\n        let intervalStart = 0.0;\n        let intervalEnd = 0.0;\n        let fadeExpressionStart = 1.0;\n        let fadeExpressionEnd = 1.0;\n        let chordExpressionStart = chordExpression;\n        let chordExpressionEnd = chordExpression;\n        let expressionReferencePitch = 16;\n        let basePitch = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\n        let baseExpression = 1.0;\n        let pitchDamping = 48;\n        if (instrument.type == 3) {\n            baseExpression = Config.spectrumBaseExpression;\n            if (isNoiseChannel) {\n                basePitch = Config.spectrumBasePitch;\n                baseExpression *= 2.0;\n            }\n            expressionReferencePitch = Config.spectrumBasePitch;\n            pitchDamping = 28;\n        }\n        else if (instrument.type == 4) {\n            basePitch = Config.spectrumBasePitch;\n            baseExpression = Config.drumsetBaseExpression;\n            expressionReferencePitch = basePitch;\n        }\n        else if (instrument.type == 2) {\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\n            baseExpression = Config.noiseBaseExpression;\n            expressionReferencePitch = basePitch;\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n        }\n        else if (instrument.type == 1 || instrument.type == 11) {\n            baseExpression = Config.fmBaseExpression;\n        }\n        else if (instrument.type == 0) {\n            baseExpression = Config.chipBaseExpression;\n            if (Config.chipWaves[instrument.chipWave].isCustomSampled) {\n                if (Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey);\n                }\n                else {\n                    basePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey);\n                }\n            }\n            else {\n                if (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune;\n                }\n                else if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune;\n                }\n            }\n        }\n        else if (instrument.type == 9) {\n            baseExpression = Config.chipBaseExpression;\n        }\n        else if (instrument.type == 5) {\n            baseExpression = Config.harmonicsBaseExpression;\n        }\n        else if (instrument.type == 6) {\n            baseExpression = Config.pwmBaseExpression;\n        }\n        else if (instrument.type == 8) {\n            baseExpression = Config.supersawBaseExpression;\n        }\n        else if (instrument.type == 7) {\n            baseExpression = Config.pickedStringBaseExpression;\n        }\n        else if (instrument.type == 10) {\n            baseExpression = 1.0;\n            expressionReferencePitch = 0;\n            pitchDamping = 1.0;\n            basePitch = 0;\n        }\n        else {\n            throw new Error(\"Unknown instrument type in computeTone.\");\n        }\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n            tone.reset();\n            instrumentState.envelopeComputer.reset();\n            if (instrument.type == 0 && instrument.isUsingAdvancedLoopControls) {\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\n                const firstOffset = instrument.chipWaveStartOffset / chipWaveLength;\n                const lastOffset = 0.999999999999999;\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\n                    tone.chipWaveCompletions[i] = 0;\n                    tone.chipWavePrevWaves[i] = 0;\n                    tone.chipWaveCompletionsLastWave[i] = 0;\n                }\n            }\n        }\n        tone.freshlyAllocated = false;\n        for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            tone.phaseDeltas[i] = 0.0;\n            tone.phaseDeltaScales[i] = 0.0;\n            tone.operatorExpressions[i] = 0.0;\n            tone.operatorExpressionDeltas[i] = 0.0;\n        }\n        tone.expression = 0.0;\n        tone.expressionDelta = 0.0;\n        for (let i = 0; i < (instrument.type == 11 ? 6 : Config.operatorCount); i++) {\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\n        }\n        if (released) {\n            const startTicksSinceReleased = tone.ticksSinceReleased;\n            const endTicksSinceReleased = tone.ticksSinceReleased + 1.0;\n            intervalStart = intervalEnd = tone.lastInterval;\n            const fadeOutTicks = Math.abs(instrument.getFadeOutTicks());\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            if (shouldFadeOutFast) {\n                fadeExpressionEnd = 0.0;\n            }\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks)\n                toneIsOnLastTick = true;\n        }\n        else if (tone.note == null) {\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\n            tone.lastInterval = 0;\n            tone.ticksSinceReleased = 0;\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\n        }\n        else {\n            const note = tone.note;\n            const nextNote = tone.nextNote;\n            const noteStartPart = tone.noteStartPart;\n            const noteEndPart = tone.noteEndPart;\n            const endPinIndex = note.getEndPinIndex(currentPart);\n            const startPin = note.pins[endPinIndex - 1];\n            const endPin = note.pins[endPinIndex];\n            const noteStartTick = noteStartPart * Config.ticksPerPart;\n            const noteEndTick = noteEndPart * Config.ticksPerPart;\n            const pinStart = (note.start + startPin.time) * Config.ticksPerPart;\n            const pinEnd = (note.start + endPin.time) * Config.ticksPerPart;\n            tone.ticksSinceReleased = 0;\n            const tickTimeStart = currentPart * Config.ticksPerPart + this.tick;\n            const tickTimeEnd = tickTimeStart + 1.0;\n            const noteTicksPassedTickStart = tickTimeStart - noteStartTick;\n            const noteTicksPassedTickEnd = tickTimeEnd - noteStartTick;\n            const pinRatioStart = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n            const pinRatioEnd = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\n            fadeExpressionStart = 1.0;\n            fadeExpressionEnd = 1.0;\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n            tone.lastInterval = intervalEnd;\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n                const fadeOutTicks = -instrument.getFadeOutTicks();\n                if (fadeOutTicks > 0.0) {\n                    const noteLengthTicks = noteEndTick - noteStartTick;\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks)\n                        toneIsOnLastTick = true;\n                }\n            }\n        }\n        tone.isOnLastTick = toneIsOnLastTick;\n        let tmpNoteFilter = instrument.noteFilter;\n        let startPoint;\n        let endPoint;\n        if (instrument.noteFilterType) {\n            const noteFilterSettingsStart = instrument.noteFilter;\n            if (instrument.noteSubFilters[1] == null)\n                instrument.noteSubFilters[1] = new FilterSettings();\n            const noteFilterSettingsEnd = instrument.noteSubFilters[1];\n            let startSimpleFreq = instrument.noteFilterSimpleCut;\n            let startSimpleGain = instrument.noteFilterSimplePeak;\n            let endSimpleFreq = instrument.noteFilterSimpleCut;\n            let endSimpleGain = instrument.noteFilterSimplePeak;\n            let filterChanges = false;\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\n            startPoint = noteFilterSettingsStart.controlPoints[0];\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\n            instrument.noteFilter = noteFilterSettingsStart;\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\n        }\n        const envelopeComputer = tone.envelopeComputer;\n        const envelopeSpeeds = [];\n        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, tone.instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n            }\n            let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed] * perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\n                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\n                if (Number.isInteger(useEnvelopeSpeed)) {\n                    useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                }\n                else {\n                    useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)] * perEnvelopeSpeed;\n                }\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed;\n        }\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, envelopeSpeeds, instrumentState, this, channelIndex, tone.instrumentIndex);\n        const envelopeStarts = tone.envelopeComputer.envelopeStarts;\n        const envelopeEnds = tone.envelopeComputer.envelopeEnds;\n        instrument.noteFilter = tmpNoteFilter;\n        if (transition.continues && (tone.prevNote == null || tone.note == null)) {\n            instrumentState.envelopeComputer.reset();\n        }\n        if (tone.note != null && transition.slides) {\n            const prevNote = tone.prevNote;\n            const nextNote = tone.nextNote;\n            if (prevNote != null) {\n                const intervalDiff = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\n                if (envelopeComputer.prevSlideStart)\n                    intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n                if (envelopeComputer.prevSlideEnd)\n                    intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff = prevNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.prevSlideStart)\n                        chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n                    if (envelopeComputer.prevSlideEnd)\n                        chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n                }\n            }\n            if (nextNote != null) {\n                const intervalDiff = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\n                if (envelopeComputer.nextSlideStart)\n                    intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n                if (envelopeComputer.nextSlideEnd)\n                    intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff = nextNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.nextSlideStart)\n                        chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n                    if (envelopeComputer.nextSlideEnd)\n                        chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n                }\n            }\n        }\n        if (effectsIncludePitchShift(instrument.effects)) {\n            let pitchShift = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n            let pitchShiftScalarStart = 1.0;\n            let pitchShiftScalarEnd = 1.0;\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\n            }\n            const envelopeStart = envelopeStarts[18];\n            const envelopeEnd = envelopeEnds[18];\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\n        }\n        if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n            const envelopeStart = envelopeStarts[19];\n            const envelopeEnd = envelopeEnds[19];\n            let modDetuneStart = instrument.detune;\n            let modDetuneEnd = instrument.detune;\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\n            }\n            intervalStart += Synth.detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);\n            intervalEnd += Synth.detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);\n        }\n        if (effectsIncludeVibrato(instrument.effects)) {\n            let delayTicks;\n            let vibratoAmplitudeStart;\n            let vibratoAmplitudeEnd;\n            if (instrument.vibrato == Config.vibratos.length) {\n                delayTicks = instrument.vibratoDelay * 2;\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\n                    delayTicks = Number.POSITIVE_INFINITY;\n                vibratoAmplitudeStart = instrument.vibratoDepth;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n            else {\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2;\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\n                    delayTicks = Number.POSITIVE_INFINITY;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\n            }\n            let vibratoStart;\n            if (tone.prevVibrato != null) {\n                vibratoStart = tone.prevVibrato;\n            }\n            else {\n                let vibratoLfoStart = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\n                const vibratoDepthEnvelopeStart = envelopeStarts[20];\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoStart = delayTicks - envelopeComputer.noteTicksStart;\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n                }\n            }\n            let vibratoLfoEnd = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\n            const vibratoDepthEnvelopeEnd = envelopeEnds[20];\n            if (instrument.type != 10) {\n                let vibratoEnd = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoEnd = delayTicks - envelopeComputer.noteTicksEnd;\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\n                }\n                tone.prevVibrato = vibratoEnd;\n                intervalStart += vibratoStart;\n                intervalEnd += vibratoEnd;\n            }\n        }\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n            const fadeInSeconds = instrument.getFadeInSeconds();\n            if (fadeInSeconds > 0.0) {\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStartUnscaled / fadeInSeconds);\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEndUnscaled / fadeInSeconds);\n            }\n        }\n        if (instrument.type == 4 && tone.drumsetPitch == null) {\n            tone.drumsetPitch = tone.pitches[0];\n            if (tone.note != null)\n                tone.drumsetPitch += tone.note.pickMainInterval();\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n        }\n        let noteFilterExpression = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (!effectsIncludeNoteFilter(instrument.effects)) {\n            tone.noteFilterCount = 0;\n        }\n        else {\n            const noteAllFreqsEnvelopeStart = envelopeStarts[1];\n            const noteAllFreqsEnvelopeEnd = envelopeEnds[1];\n            if (instrument.noteFilterType) {\n                const noteFreqEnvelopeStart = envelopeStarts[21];\n                const noteFreqEnvelopeEnd = envelopeEnds[21];\n                const notePeakEnvelopeStart = envelopeStarts[29];\n                const notePeakEnvelopeEnd = envelopeEnds[29];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                if (tone.noteFilters.length < 1)\n                    tone.noteFilters[0] = new DynamicBiquadFilter();\n                tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                noteFilterExpression *= startPoint.getVolumeCompensationMult();\n                tone.noteFilterCount = 1;\n            }\n            else {\n                const noteFilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n                for (let i = 0; i < noteFilterSettings.controlPointCount; i++) {\n                    const noteFreqEnvelopeStart = envelopeStarts[21 + i];\n                    const noteFreqEnvelopeEnd = envelopeEnds[21 + i];\n                    const notePeakEnvelopeStart = envelopeStarts[29 + i];\n                    const notePeakEnvelopeEnd = envelopeEnds[29 + i];\n                    let startPoint = noteFilterSettings.controlPoints[i];\n                    const endPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\n                    if (startPoint.type != endPoint.type) {\n                        startPoint = endPoint;\n                    }\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                    if (tone.noteFilters.length <= i)\n                        tone.noteFilters[i] = new DynamicBiquadFilter();\n                    tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                    noteFilterExpression *= startPoint.getVolumeCompensationMult();\n                }\n                tone.noteFilterCount = noteFilterSettings.controlPointCount;\n            }\n        }\n        if (instrument.type == 4) {\n            const drumsetEnvelopeComputer = tone.envelopeComputer;\n            const drumsetFilterEnvelope = instrument.getDrumsetEnvelope(tone.drumsetPitch);\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope);\n            drumsetEnvelopeComputer.computeDrumsetEnvelopes(instrument, drumsetFilterEnvelope, beatsPerPart, partTimeStart, partTimeEnd);\n            const drumsetFilterEnvelopeStart = drumsetEnvelopeComputer.drumsetFilterEnvelopeStart;\n            const drumsetFilterEnvelopeEnd = drumsetEnvelopeComputer.drumsetFilterEnvelopeEnd;\n            const point = this.tempDrumSetControlPoint;\n            point.type = 0;\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.50);\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n            if (tone.noteFilters.length == tone.noteFilterCount)\n                tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\n            tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFilterCount++;\n        }\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\n        if (instrument.type == 1 || instrument.type == 11) {\n            let sineExpressionBoost = 1.0;\n            let totalCarrierExpression = 0.0;\n            let arpeggioInterval = 0;\n            const arpeggiates = chord.arpeggiates;\n            const isMono = chord.name == \"monophonic\";\n            if (tone.pitchCount > 1 && arpeggiates) {\n                const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n            }\n            const carrierCount = (instrument.type == 11 ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\n            for (let i = 0; i < (instrument.type == 11 ? 6 : Config.operatorCount); i++) {\n                const associatedCarrierIndex = (instrument.type == 11 ? instrument.customAlgorithm.associatedCarrier[i] - 1 : Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\n                const pitch = tone.pitches[arpeggiates ? 0 : isMono ? instrument.monoChordTone : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n                const pitchStart = basePitch + (pitch + intervalStart) * intervalScale + interval;\n                const pitchEnd = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n                const baseFreqStart = Instrument.frequencyFromPitch(pitchStart);\n                const baseFreqEnd = Instrument.frequencyFromPitch(pitchEnd);\n                const hzOffset = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n                const targetFreqStart = freqMult * baseFreqStart + hzOffset;\n                const targetFreqEnd = freqMult * baseFreqEnd + hzOffset;\n                const freqEnvelopeStart = envelopeStarts[5 + i];\n                const freqEnvelopeEnd = envelopeEnds[5 + i];\n                let freqStart;\n                let freqEnd;\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\n                }\n                else {\n                    freqStart = targetFreqStart;\n                    freqEnd = targetFreqEnd;\n                }\n                tone.phaseDeltas[i] = freqStart * sampleTime;\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\n                let amplitudeStart = instrument.operators[i].amplitude;\n                let amplitudeEnd = instrument.operators[i].amplitude;\n                if (i < 4) {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n                else {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n                const amplitudeCurveStart = Synth.operatorAmplitudeCurve(amplitudeStart);\n                const amplitudeCurveEnd = Synth.operatorAmplitudeCurve(amplitudeEnd);\n                const amplitudeMultStart = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                const amplitudeMultEnd = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                let expressionStart = amplitudeMultStart;\n                let expressionEnd = amplitudeMultEnd;\n                if (i < carrierCount) {\n                    let pitchExpressionStart;\n                    if (tone.prevPitchExpressions[i] != null) {\n                        pitchExpressionStart = tone.prevPitchExpressions[i];\n                    }\n                    else {\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n                    }\n                    const pitchExpressionEnd = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\n                    expressionStart *= pitchExpressionStart;\n                    expressionEnd *= pitchExpressionEnd;\n                    totalCarrierExpression += amplitudeCurveEnd;\n                }\n                else {\n                    expressionStart *= Config.sineWaveLength * 1.5;\n                    expressionEnd *= Config.sineWaveLength * 1.5;\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n                }\n                expressionStart *= envelopeStarts[11 + i];\n                expressionEnd *= envelopeEnds[11 + i];\n                if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                    const startVal = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                    const endVal = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n                }\n                tone.operatorExpressions[i] = expressionStart;\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            }\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n            let expressionStart = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[0];\n            let expressionEnd = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[0];\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) {\n                expressionStart = 0;\n                expressionEnd = 0;\n            }\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            let useFeedbackAmplitudeStart = instrument.feedbackAmplitude;\n            let useFeedbackAmplitudeEnd = instrument.feedbackAmplitude;\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\n            }\n            let feedbackAmplitudeStart = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\n            const feedbackAmplitudeEnd = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\n            let feedbackStart = feedbackAmplitudeStart * envelopeStarts[17];\n            let feedbackEnd = feedbackAmplitudeEnd * envelopeEnds[17];\n            tone.feedbackMult = feedbackStart;\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\n        }\n        else {\n            const freqEndRatio = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\n            const basePhaseDeltaScale = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\n            const isMono = chord.name == \"monophonic\";\n            let pitch = tone.pitches[0];\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval || isMono)) {\n                const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                if (chord.customInterval) {\n                    const intervalOffset = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n                }\n                else if (chord.arpeggiates) {\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\n                }\n                else {\n                    pitch = tone.pitches[instrument.monoChordTone];\n                }\n            }\n            const startPitch = basePitch + (pitch + intervalStart) * intervalScale;\n            const endPitch = basePitch + (pitch + intervalEnd) * intervalScale;\n            let pitchExpressionStart;\n            if (tone.prevPitchExpressions[0] != null) {\n                pitchExpressionStart = tone.prevPitchExpressions[0];\n            }\n            else {\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n            }\n            const pitchExpressionEnd = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\n            let settingsExpressionMult = baseExpression * noteFilterExpression;\n            if (instrument.type == 2) {\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n            }\n            if (instrument.type == 0) {\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n            }\n            if (instrument.type == 6) {\n                const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);\n                let pulseWidthModStart = basePulseWidth;\n                let pulseWidthModEnd = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n                const pulseWidthStart = pulseWidthModStart * envelopeStarts[2];\n                const pulseWidthEnd = pulseWidthModEnd * envelopeEnds[2];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n                let decimalOffsetModStart = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n                const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[37];\n                tone.decimalOffset = decimalOffsetStart;\n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\n            }\n            if (instrument.type == 7) {\n                let useSustainStart = instrument.stringSustain;\n                let useSustainEnd = instrument.stringSustain;\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\n                }\n                tone.stringSustainStart = useSustainStart;\n                tone.stringSustainEnd = useSustainEnd;\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\n            }\n            const startFreq = Instrument.frequencyFromPitch(startPitch);\n            if (instrument.type == 0 || instrument.type == 9 || instrument.type == 5 || instrument.type == 7 || instrument.type == 3 || instrument.type == 6 || instrument.type == 2 || instrument.type == 4) {\n                const unisonVoices = instrument.unisonVoices;\n                const unisonSpread = instrument.unisonSpread;\n                const unisonOffset = instrument.unisonOffset;\n                const unisonExpression = instrument.unisonExpression;\n                const voiceCountExpression = (instrument.type == 7) ? 1 : unisonVoices / 2.0;\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\n                const unisonEnvelopeStart = envelopeStarts[4];\n                const unisonEnvelopeEnd = envelopeEnds[4];\n                const unisonStartA = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\n                const unisonEndA = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonStartA;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonEndA / unisonStartA, 1.0 / roundedSamplesPerTick);\n                const divisor = (unisonVoices == 1) ? 1 : (unisonVoices - 1);\n                for (let i = 1; i <= unisonVoices; i++) {\n                    const unisonStart = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeStart / 12.0) * (specialIntervalMult);\n                    const unisonEnd = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeEnd / 12.0) * (specialIntervalMult);\n                    tone.phaseDeltas[i] = startFreq * sampleTime * unisonStart;\n                    tone.phaseDeltaScales[i] = basePhaseDeltaScale * Math.pow(unisonEnd / unisonStart, 1.0 / roundedSamplesPerTick);\n                }\n                for (let i = unisonVoices + 1; i < Config.unisonVoicesMax; i++) {\n                    if (i == 2) {\n                        const unisonBStart = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;\n                        const unisonBEnd = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;\n                        tone.phaseDeltas[i] = startFreq * sampleTime * unisonBStart;\n                        tone.phaseDeltaScales[i] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);\n                    }\n                    else {\n                        tone.phaseDeltas[i] = tone.phaseDeltas[0];\n                        tone.phaseDeltaScales[i] = tone.phaseDeltaScales[0];\n                    }\n                }\n            }\n            else {\n                tone.phaseDeltas[0] = startFreq * sampleTime;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\n            }\n            let supersawExpressionStart = 1.0;\n            let supersawExpressionEnd = 1.0;\n            if (instrument.type == 8) {\n                const minFirstVoiceAmplitude = 1.0 / Math.sqrt(Config.supersawVoiceCount);\n                let useDynamismStart = instrument.supersawDynamism / Config.supersawDynamismMax;\n                let useDynamismEnd = instrument.supersawDynamism / Config.supersawDynamismMax;\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\n                }\n                const curvedDynamismStart = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[38]), 0.2);\n                const curvedDynamismEnd = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[38]), 0.2);\n                const firstVoiceAmplitudeStart = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\n                const firstVoiceAmplitudeEnd = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\n                const dynamismStart = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                const dynamismEnd = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                tone.supersawDynamism = dynamismStart;\n                tone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\n                const initializeSupersaw = (tone.supersawDelayIndex == -1);\n                if (initializeSupersaw) {\n                    let accumulator = 0.0;\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] = accumulator;\n                        accumulator += -Math.log(Math.random());\n                    }\n                    const amplitudeSum = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\n                    const slope = amplitudeSum;\n                    let sample = 0.0;\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        const amplitude = (i == 0) ? 1.0 : dynamismStart;\n                        const normalizedPhase = tone.phases[i] / accumulator;\n                        tone.phases[i] = normalizedPhase;\n                        sample += (normalizedPhase - 0.5) * amplitude;\n                    }\n                    let zeroCrossingPhase = 1.0;\n                    let prevDrop = 0.0;\n                    for (let i = Config.supersawVoiceCount - 1; i >= 0; i--) {\n                        const nextDrop = 1.0 - tone.phases[i];\n                        const phaseDelta = nextDrop - prevDrop;\n                        if (sample < 0.0) {\n                            const distanceToZeroCrossing = -sample / slope;\n                            if (distanceToZeroCrossing < phaseDelta) {\n                                zeroCrossingPhase = prevDrop + distanceToZeroCrossing;\n                                break;\n                            }\n                        }\n                        const amplitude = (i == 0) ? 1.0 : dynamismStart;\n                        sample += phaseDelta * slope - amplitude;\n                        prevDrop = nextDrop;\n                    }\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] += zeroCrossingPhase;\n                    }\n                    for (let i = 1; i < Config.supersawVoiceCount - 1; i++) {\n                        const swappedIndex = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\n                        const temp = tone.phases[i];\n                        tone.phases[i] = tone.phases[swappedIndex];\n                        tone.phases[swappedIndex] = temp;\n                    }\n                }\n                const baseSpreadSlider = instrument.supersawSpread / Config.supersawSpreadMax;\n                let useSpreadStart = baseSpreadSlider;\n                let useSpreadEnd = baseSpreadSlider;\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\n                }\n                const spreadSliderStart = useSpreadStart * envelopeStarts[39];\n                const spreadSliderEnd = useSpreadEnd * envelopeEnds[39];\n                const averageSpreadSlider = (spreadSliderStart + spreadSliderEnd) * 0.5;\n                const curvedSpread = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\n                for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                    const offset = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\n                    tone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\n                }\n                const baseShape = instrument.supersawShape / Config.supersawShapeMax;\n                let useShapeStart = baseShape * envelopeStarts[40];\n                let useShapeEnd = baseShape * envelopeEnds[40];\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\n                }\n                const shapeStart = useShapeStart * envelopeStarts[40];\n                const shapeEnd = useShapeEnd * envelopeEnds[40];\n                tone.supersawShape = shapeStart;\n                tone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\n                let decimalOffsetModStart = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n                const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[37];\n                tone.decimalOffset = decimalOffsetStart;\n                const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);\n                let pulseWidthModStart = basePulseWidth;\n                let pulseWidthModEnd = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n                let pulseWidthStart = pulseWidthModStart * envelopeStarts[2];\n                let pulseWidthEnd = pulseWidthModEnd * envelopeEnds[2];\n                pulseWidthStart -= decimalOffsetStart / 10000;\n                pulseWidthEnd -= decimalOffsetStart / 10000;\n                const phaseDeltaStart = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\n                const phaseDeltaEnd = startFreq * sampleTime * freqEndRatio;\n                tone.supersawPrevPhaseDelta = phaseDeltaEnd;\n                const delayLengthStart = pulseWidthStart / phaseDeltaStart;\n                const delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\n                tone.supersawDelayLength = delayLengthStart;\n                tone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\n                const minBufferLength = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\n                if (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\n                    const likelyMaximumLength = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\n                    const newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n                    if (!initializeSupersaw && tone.supersawDelayLine != null) {\n                        const oldDelayBufferMask = (tone.supersawDelayLine.length - 1) >> 0;\n                        const startCopyingFromIndex = tone.supersawDelayIndex;\n                        for (let i = 0; i < tone.supersawDelayLine.length; i++) {\n                            newDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                        }\n                    }\n                    tone.supersawDelayLine = newDelayLine;\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                }\n                else if (initializeSupersaw) {\n                    tone.supersawDelayLine.fill(0.0);\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                }\n                const pulseExpressionRatio = Config.pwmBaseExpression / Config.supersawBaseExpression;\n                supersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\n                supersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\n            }\n            let expressionStart = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[0] * supersawExpressionStart;\n            let expressionEnd = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[0] * supersawExpressionEnd;\n            if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                const startVal = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                const endVal = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n            }\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) {\n                expressionStart = 0;\n                expressionEnd = 0;\n                instrumentState.awake = false;\n            }\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            if (instrument.type == 7) {\n                let stringDecayStart;\n                if (tone.prevStringDecay != null) {\n                    stringDecayStart = tone.prevStringDecay;\n                }\n                else {\n                    const sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[3];\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n                }\n                const sustainEnvelopeEnd = tone.envelopeComputer.envelopeEnds[3];\n                let stringDecayEnd = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n                tone.prevStringDecay = stringDecayEnd;\n                const unisonVoices = instrument.unisonVoices;\n                for (let i = tone.pickedStrings.length; i < unisonVoices; i++) {\n                    tone.pickedStrings[i] = new PickedString();\n                }\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n                    for (const pickedString of tone.pickedStrings) {\n                        pickedString.delayIndex = -1;\n                    }\n                }\n                for (let i = 0; i < unisonVoices; i++) {\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\n                }\n            }\n        }\n    }\n    static getLFOAmplitude(instrument, secondsIntoBar) {\n        let effect = 0.0;\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n        }\n        return effect;\n    }\n    static getInstrumentSynthFunction(instrument) {\n        if (instrument.type == 1) {\n            const fingerprint = instrument.algorithm + \"_\" + instrument.feedbackType;\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n                const synthSource = [];\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs = [];\n                        for (let j = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    }\n                    else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j = Config.operatorCount - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n                                    const feedbackIndices = Config.feedbacks[instrument.feedbackType].indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                }\n                                else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    }\n                    else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    }\n                    else {\n                        synthSource.push(line);\n                    }\n                }\n                const wrappedFmSynth = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\n            }\n            return Synth.fmSynthFunctionCache[fingerprint];\n        }\n        else if (instrument.type == 0) {\n            if (instrument.isUsingAdvancedLoopControls) {\n                return Synth.loopableChipSynth;\n            }\n            return Synth.chipSynth;\n        }\n        else if (instrument.type == 9) {\n            return Synth.chipSynth;\n        }\n        else if (instrument.type == 5) {\n            return Synth.harmonicsSynth;\n        }\n        else if (instrument.type == 6) {\n            return Synth.pulseWidthSynth;\n        }\n        else if (instrument.type == 8) {\n            return Synth.supersawSynth;\n        }\n        else if (instrument.type == 7) {\n            return Synth.pickedStringSynth;\n        }\n        else if (instrument.type == 2) {\n            return Synth.noiseSynth;\n        }\n        else if (instrument.type == 3) {\n            return Synth.spectrumSynth;\n        }\n        else if (instrument.type == 4) {\n            return Synth.drumsetSynth;\n        }\n        else if (instrument.type == 10) {\n            return Synth.modSynth;\n        }\n        else if (instrument.type == 11) {\n            const fingerprint = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\n                const synthSource = [];\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs = [];\n                        for (let j = 0; j < instrument.customAlgorithm.carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    }\n                    else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j = Config.operatorCount + 2 - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n                                    const feedbackIndices = instrument.customFeedbackType.indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                }\n                                else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    }\n                    else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount + 2; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    }\n                    else {\n                        synthSource.push(line);\n                    }\n                }\n                const wrappedFm6Synth = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n                Synth.fm6SynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFm6Synth)(Config, Synth);\n            }\n            return Synth.fm6SynthFunctionCache[fingerprint];\n        }\n        else {\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\n        }\n    }\n    static wrap(x, b) {\n        return (x % b + b) % b;\n    }\n    static loopableChipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let chipFunction = Synth.loopableChipFunctionCache[instrumentState.unisonVoices];\n        if (chipFunction == undefined) {\n            let chipSource = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {\";\n            chipSource += `\r\n            const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\r\n            // const aliases = false;\r\n            const data = synth.tempMonoInstrumentSampleBuffer;\r\n            const wave = instrumentState.wave;\r\n            const volumeScale = instrumentState.volumeScale;\r\n            const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\r\n\r\n            let chipWaveLoopEnd = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\r\n            let chipWaveLoopStart = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\r\n            `;\n            chipSource += `\r\n            let chipWaveLoopLength = chipWaveLoopEnd - chipWaveLoopStart;\r\n            if (chipWaveLoopLength < 2) {\r\n                chipWaveLoopStart = 0;\r\n                chipWaveLoopEnd = waveLength;\r\n                chipWaveLoopLength = waveLength;\r\n            }\r\n            const chipWaveLoopMode = instrumentState.chipWaveLoopMode;\r\n            const chipWavePlayBackwards = instrumentState.chipWavePlayBackwards;\r\n            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n            if(instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {\r\n            `;\n            for (let i = 1; i < voiceCount; i++) {\n                chipSource += `\r\n                if (instrumentState.unisonVoices <= #)\r\n                    tone.phases[#] = tone.phases[#-1];\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n            }`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                let phaseDelta# = tone.phaseDeltas[#] * waveLength;\r\n                let direction# = tone.directions[#];\r\n                let chipWaveCompletion# = tone.chipWaveCompletions[#];\r\n\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n            if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\r\n                // If playing once or looping, we force the correct direction,\r\n                // since it shouldn't really change. This is mostly so that if\r\n                // the mode is changed midway through playback, it won't get\r\n                // stuck on the wrong direction.\r\n                if (!chipWavePlayBackwards) {`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        direction# = 1;\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `} else {`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        direction# = -1;\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n                }\r\n            }\r\n            if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                    chipWaveCompletion# = 0;\r\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \r\n            }\r\n            \r\n            const chipWaveCompletionFadeLength = 1000;\r\n            let expression = +tone.expression;\r\n            const expressionDelta = +tone.expressionDelta;\r\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                let lastWave# = tone.chipWaveCompletionsLastWave[#];\r\n                const phaseDeltaScale# = +tone.phaseDeltaScales[#];\r\n                let phase# = Synth.wrap(tone.phases[#], 1) * waveLength;\r\n                let prevWaveIntegral# = 0;\r\n\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n            if (!aliases) {\r\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                    const phase#Int = Math.floor(phase#);\r\n                    const index# = Synth.wrap(phase#Int, waveLength);\r\n                    const phaseRatio# = phase# - phase#Int;\r\n                    prevWaveIntegral# = +wave[index#];\r\n                    prevWaveIntegral# += (wave[Synth.wrap(index# + 1, waveLength)] - prevWaveIntegral#) * phaseRatio#;\r\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n            }\r\n            const filters = tone.noteFilters;\r\n            const filterCount = tone.noteFilterCount | 0;\r\n            let initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n            let initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n            const applyFilters = Synth.applyFilters;\r\n            const stopIndex = bufferIndex + roundedSamplesPerTick;\r\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                let prevWave# = tone.chipWavePrevWaves[#];\r\n\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n                let wrapped = 0;\r\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                    if (chipWaveCompletion# > 0 && chipWaveCompletion# < chipWaveCompletionFadeLength) {\r\n                        chipWaveCompletion#++;\r\n                    }\r\n                    phase# += phaseDelta# * direction#;\r\n\r\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n                if (chipWaveLoopMode === 2) {\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        if (direction# === 1) {\r\n                            if (phase# > waveLength) {\r\n                                if (chipWaveCompletion# <= 0) {\r\n                                    lastWave# = prevWave#;\r\n                                    chipWaveCompletion#++;\r\n                                }\r\n                                wrapped = #;\r\n                            }\r\n                        } else if (direction# === -1) {\r\n                            if (phase# < 0) {\r\n                                if (chipWaveCompletion# <= 0) {\r\n                                    lastWave# = prevWave#;\r\n                                    chipWaveCompletion#++;\r\n                                }\r\n                                wrapped = 1;\r\n                            }\r\n                        }\r\n\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n                } else if (chipWaveLoopMode === 3) {\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        if (direction# === 1) {\r\n                            if (phase# > chipWaveLoopEnd) {\r\n                                if (chipWaveCompletion# <= 0) {\r\n                                    lastWave# = prevWave#;\r\n                                    chipWaveCompletion#++;\r\n                                }\r\n                                wrapped = 1;\r\n                            }\r\n                        } else if (direction# === -1) {\r\n                            if (phase# < chipWaveLoopStart) {\r\n                                if (chipWaveCompletion# <= 0) {\r\n                                    lastWave# = prevWave#;\r\n                                    chipWaveCompletion#++;\r\n                                }\r\n                                wrapped = 1;\r\n                            }\r\n                        }\r\n\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n                } else if (chipWaveLoopMode === 0) {\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        if (direction# === 1) {\r\n                            if (phase# > chipWaveLoopEnd) {\r\n                                phase# = chipWaveLoopStart + Synth.wrap(phase# - chipWaveLoopEnd, chipWaveLoopLength);\r\n                                // phase# = chipWaveLoopStart;\r\n                                wrapped = 1;\r\n                            }\r\n                        } else if (direction# === -1) {\r\n                            if (phase# < chipWaveLoopStart) {\r\n                                phase# = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phase#, chipWaveLoopLength);\r\n                                // phase# = chipWaveLoopEnd;\r\n                                wrapped = 1;\r\n                            }\r\n                        }\r\n\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \r\n                } else if (chipWaveLoopMode === 1) {\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        if (direction# === 1) {\r\n                            if (phase# > chipWaveLoopEnd) {\r\n                                phase# = chipWaveLoopEnd - Synth.wrap(phase# - chipWaveLoopEnd, chipWaveLoopLength);\r\n                                // phase# = chipWaveLoopEnd;\r\n                                direction# = -1;\r\n                                wrapped = 1;\r\n                            }\r\n                        } else if (direction# === -1) {\r\n                            if (phase# < chipWaveLoopStart) {\r\n                                phase# = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phase#, chipWaveLoopLength);\r\n                                // phase# = chipWaveLoopStart;\r\n                                direction# = 1;\r\n                                wrapped = 1;\r\n                            }\r\n                        }\r\n\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \r\n                }\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                    let wave# = 0;\r\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \r\n                let inputSample = 0;\r\n                if (aliases) {\r\n                    inputSample = 0;\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        wave# = wave[Synth.wrap(Math.floor(phase#), waveLength)];\r\n                        prevWave# = wave#;\r\n                        const completionFade# = chipWaveCompletion# > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletion#, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                        \r\n                        if (chipWaveCompletion# > 0) {\r\n                            inputSample += lastWave# * completionFade#;\r\n                        } else {\r\n                            inputSample += wave#;\r\n                        }\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `   \r\n                } else {\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        const phase#Int = Math.floor(phase#);\r\n                        const index# = Synth.wrap(phase#Int, waveLength);\r\n                        let nextWaveIntegral# = wave[index#];\r\n                        const phaseRatio# = phase# - phase#Int;\r\n                        nextWaveIntegral# += (wave[Synth.wrap(index# + 1, waveLength)] - nextWaveIntegral#) * phaseRatio#;\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n                    if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\r\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                            let pwi# = 0;\r\n                            const phase#_ = Math.max(0, phase# - phaseDelta# * direction#);\r\n                            const phase#Int = Math.floor(phase#_);\r\n                            const index# = Synth.wrap(phase#Int, waveLength);\r\n                            pwi# = wave[index#];\r\n                            pwi# += (wave[Synth.wrap(index# + 1, waveLength)] - pwi#) * (phase#_ - phase#Int) * direction#;\r\n                            prevWaveIntegral# = pwi#;\r\n                            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `    \r\n                    }\r\n                    if (chipWaveLoopMode === 1 && wrapped !== 0) {\r\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                            wave# = prevWave#;\r\n                            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n                    } else {\r\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                            wave# = (nextWaveIntegral# - prevWaveIntegral#) / (phaseDelta# * direction#);\r\n                            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n                    }\r\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                        prevWave# = wave#;\r\n                        prevWaveIntegral# = nextWaveIntegral#;\r\n                        const completionFade# = chipWaveCompletion# > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletion#, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\r\n                        if (chipWaveCompletion# > 0) {\r\n                            inputSample += lastWave# * completionFade#;\r\n                        } else {\r\n                            inputSample += wave#;\r\n                        }\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n                }\r\n                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n                initialFilterInput2 = initialFilterInput1;\r\n                initialFilterInput1 = inputSample * volumeScale;\r\n                const output = sample * expression;\r\n                expression += expressionDelta;\r\n                data[sampleIndex] += output;\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                    phaseDelta# *= phaseDeltaScale#;\r\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n            }\r\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                tone.phases[#] = phase# / waveLength;\r\n                tone.phaseDeltas[#] = phaseDelta# / waveLength;\r\n                tone.directions[#] = direction#;\r\n                tone.chipWaveCompletions[#] = chipWaveCompletion#;\r\n                tone.chipWavePrevWaves[#] = prevWave#;\r\n                tone.chipWaveCompletionsLastWave[#] = lastWave#;\r\n                \r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n            tone.expression = expression;\r\n            synth.sanitizeFilters(filters);\r\n            tone.initialNoteFilterInput1 = initialFilterInput1;\r\n            tone.initialNoteFilterInput2 = initialFilterInput2;\r\n        }`;\n            chipFunction = new Function(\"Config\", \"Synth\", \"effectsIncludeDistortion\", chipSource)(Config, Synth, effectsIncludeDistortion);\n            Synth.loopableChipFunctionCache[instrumentState.unisonVoices] = chipFunction;\n        }\n        chipFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static chipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let chipFunction = Synth.chipFunctionCache[instrumentState.unisonVoices];\n        if (chipFunction == undefined) {\n            let chipSource = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {\";\n            chipSource += `\r\n        const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\r\n        const data = synth.tempMonoInstrumentSampleBuffer;\r\n        const wave = instrumentState.wave;\r\n        const volumeScale = instrumentState.volumeScale;\r\n\r\n        const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\r\n\r\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        let expression = +tone.expression;\r\n        const expressionDelta = +tone.expressionDelta;\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `let phaseDelta# = tone.phaseDeltas[#] * waveLength;\r\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\r\n\r\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `let phase# = (tone.phases[#] % 1) * waveLength;\r\n            let prevWaveIntegral# = 0.0;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `const filters = tone.noteFilters;\r\n        const filterCount = tone.noteFilterCount | 0;\r\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n        const applyFilters = Synth.applyFilters;\r\n\r\n        if (!aliases) {\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `const phase#Int = phase# | 0;\r\n                const index# = phase#Int % waveLength;\r\n                prevWaveIntegral# = +wave[index#]\r\n                const phase#Ratio = phase# - phase#Int;\r\n                prevWaveIntegral# += (wave[index# + 1] - prevWaveIntegral#) * phase#Ratio;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `\r\n        } \r\n\r\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n        let inputSample = 0;\r\n            if (aliases) {\r\n                `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `phase# += phaseDelta#;\r\n\r\n                    const inputSample# = wave[(0 | phase#) % waveLength];\r\n                    `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleListA = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleListA.push(\"inputSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            chipSource += \"inputSample = \" + sampleListA.join(\" + \") + \";\";\n            chipSource += `} else {\r\n                    `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `phase# += phaseDelta#;\r\n\r\n                     \r\n                        const phase#Int = phase# | 0;\r\n                        const index# = phase#Int % waveLength;\r\n                        let nextWaveIntegral# = wave[index#]\r\n                        const phase#Ratio = phase# - phase#Int;\r\n                        nextWaveIntegral# += (wave[index# + 1] - nextWaveIntegral#) * phase#Ratio;\r\n                        const wave# = (nextWaveIntegral# - prevWaveIntegral#) / phaseDelta#;\r\n                        prevWaveIntegral# = nextWaveIntegral#;\r\n                        let inputSample# = wave#;\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleListB = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleListB.push(\"inputSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            chipSource += \"inputSample = \" + sampleListB.join(\" + \") + \";\";\n            chipSource += `}\r\n        `;\n            chipSource += `const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample * volumeScale;`;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `\r\n                phaseDelta# *= phaseDeltaScale#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += `const output = sample * expression;\r\n            expression += expressionDelta;\r\n            data[sampleIndex] += output;\r\n        }\r\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                chipSource += `tone.phases[#] = phase# / waveLength;\r\n            tone.phaseDeltas[#] = phaseDelta# / waveLength;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            chipSource += \"tone.expression = expression;\";\n            chipSource += `\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }`;\n            chipFunction = new Function(\"Config\", \"Synth\", \"effectsIncludeDistortion\", chipSource)(Config, Synth, effectsIncludeDistortion);\n            Synth.chipFunctionCache[instrumentState.unisonVoices] = chipFunction;\n        }\n        chipFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static harmonicsSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let harmonicsFunction = Synth.harmonicsFunctionCache[instrumentState.unisonVoices];\n        if (harmonicsFunction == undefined) {\n            let harmonicsSource = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {\";\n            harmonicsSource += `\r\n        const data = synth.tempMonoInstrumentSampleBuffer;\r\n        const wave = instrumentState.wave;\r\n        const waveLength = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        let expression = +tone.expression;\r\n        const expressionDelta = +tone.expressionDelta;\r\n         `;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `let phaseDelta# = tone.phaseDeltas[#] * waveLength;\r\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\r\n\r\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `let phase# = (tone.phases[#] % 1) * waveLength;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            harmonicsSource += `const filters = tone.noteFilters;\r\n        const filterCount = tone.noteFilterCount | 0;\r\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n        const applyFilters = Synth.applyFilters;\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `const phase#Int = phase# | 0;\r\n            const index# = phase#Int % waveLength;\r\n            prevWaveIntegral# = +wave[index#]\r\n            const phase#Ratio = phase# - phase#Int;\r\n            prevWaveIntegral# += (wave[index# + 1] - prevWaveIntegral#) * phase#Ratio;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            harmonicsSource += `const stopIndex = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `\r\n                        phase# += phaseDelta#;\r\n                        const phase#Int = phase# | 0;\r\n                        const index# = phase#Int % waveLength;\r\n                        let nextWaveIntegral# = wave[index#]\r\n                        const phase#Ratio = phase# - phase#Int;\r\n                        nextWaveIntegral# += (wave[index# + 1] - nextWaveIntegral#) * phase#Ratio;\r\n                        const wave# = (nextWaveIntegral# - prevWaveIntegral#) / phaseDelta#;\r\n                        prevWaveIntegral# = nextWaveIntegral#;\r\n                        let inputSample# = wave#;\r\n                        `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"inputSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            harmonicsSource += \"inputSample = \" + sampleList.join(\" + \") + \";\";\n            harmonicsSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `\r\n                phaseDelta# *= phaseDeltaScale#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            harmonicsSource += `const output = sample * expression;\r\n            expression += expressionDelta;\r\n            data[sampleIndex] += output;\r\n        }\r\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                harmonicsSource += `tone.phases[#] = phase# / waveLength;\r\n            tone.phaseDeltas[#] = phaseDelta# / waveLength;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            harmonicsSource += \"tone.expression = expression;\";\n            harmonicsSource += `\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }`;\n            harmonicsFunction = new Function(\"Config\", \"Synth\", harmonicsSource)(Config, Synth);\n            Synth.harmonicsFunctionCache[instrumentState.unisonVoices] = harmonicsFunction;\n        }\n        harmonicsFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static pickedStringSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = instrumentState.unisonVoices;\n        let pickedStringFunction = Synth.pickedStringFunctionCache[voiceCount];\n        if (pickedStringFunction == undefined) {\n            let pickedStringSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            pickedStringSource += `\r\n\t\t\t\tconst Config = beepbox.Config;\r\n\t\t\t\tconst Synth = beepbox.Synth;\r\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\r\n\t\t\t\t\r\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\r\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\r\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\r\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\r\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\r\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\r\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\r\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\r\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\r\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\r\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\r\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\r\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\r\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\r\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\r\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\r\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\r\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\r\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\r\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\r\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\r\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\r\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\r\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\r\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\r\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\r\n\t\t\t\t\r\n\t\t\t\tlet expression = +tone.expression;\r\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n                if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[1] = tone.phases[0];\r\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\r\n\t\t\t\t\r\n\t\t\t\tconst filters = tone.noteFilters;\r\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\r\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n\t\t\t\tconst applyFilters = Synth.applyFilters;\r\n\t\t\t\t\r\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\r\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\r\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\r\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\r\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\r\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\r\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\r\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\r\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\r\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\r\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\r\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\r\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\r\n\t\t\t\t\t\r\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\r\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\r\n\t\t\t\t\tdelayIndex#++;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst inputSample = (`;\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            pickedStringSource += sampleList.join(\" + \");\n            pickedStringSource += `) * expression;\r\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\t\t\tinitialFilterInput1 = inputSample;\r\n\t\t\t\t\tdata[sampleIndex] += sample;\r\n\t\t\t\t\t\r\n\t\t\t\t\texpression += expressionDelta;\r\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\r\n\t\t\t\t\tallPassG# += allPassGDelta#;\r\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\r\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\r\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\r\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\r\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\r\n\t\t\t\tconst epsilon = (1.0e-24);\r\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\r\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\r\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\r\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\r\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\r\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\r\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\r\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\r\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\r\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\r\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\r\n\t\t\t\tpickedString#.allPassG = allPassG#;\r\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\r\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\r\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\r\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\r\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\r\n\t\t\t\t\r\n\t\t\t\ttone.expression = expression;\r\n\t\t\t\t\r\n\t\t\t\tsynth.sanitizeFilters(filters);\r\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t\t\t}`;\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n                const lines = [];\n                for (let voice = 0; voice < voiceCount; voice++) {\n                    lines.push(line.replace(/\\#/g, String(voice)));\n                }\n                return lines.join(\"\\n\");\n            });\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\n            Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n        }\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static effectsSynth(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) {\n        const usesDistortion = effectsIncludeDistortion(instrumentState.effects);\n        const usesBitcrusher = effectsIncludeBitcrusher(instrumentState.effects);\n        const usesEqFilter = instrumentState.eqFilterCount > 0;\n        const usesPanning = effectsIncludePanning(instrumentState.effects);\n        const usesChorus = effectsIncludeChorus(instrumentState.effects);\n        const usesEcho = effectsIncludeEcho(instrumentState.effects);\n        const usesReverb = effectsIncludeReverb(instrumentState.effects);\n        const usesGranular = effectsIncludeGranular(instrumentState.effects);\n        const usesRingModulation = effectsIncludeRingModulation(instrumentState.effects);\n        let signature = 0;\n        if (usesDistortion)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesBitcrusher)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesEqFilter)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesPanning)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesChorus)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesEcho)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesReverb)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesGranular)\n            signature = signature | 1;\n        signature = signature << 1;\n        if (usesRingModulation)\n            signature = signature | 1;\n        let effectsFunction = Synth.effectsFunctionCache[signature];\n        if (effectsFunction == undefined) {\n            let effectsSource = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\n            const usesDelays = usesChorus || usesReverb || usesEcho || usesGranular;\n            effectsSource += `\r\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\r\n\t\t\t\t\r\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\r\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;\r\n                `;\n            if (usesDelays) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\r\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`;\n            }\n            if (usesGranular) {\n                effectsSource += `\r\n                let granularWet = instrumentState.granularMix;\r\n                const granularMixDelta = instrumentState.granularMixDelta;\r\n                let granularDry = 1.0 - granularWet; \r\n                const granularDelayLine = instrumentState.granularDelayLine;\r\n                const granularGrains = instrumentState.granularGrains;\r\n                let granularGrainCount = instrumentState.granularGrainsLength;\r\n                const granularDelayLineLength = granularDelayLine.length;\r\n                const granularDelayLineMask = granularDelayLineLength - 1;\r\n                let granularDelayLineIndex = instrumentState.granularDelayLineIndex;\r\n                const usesRandomGrainLocation = instrumentState.usesRandomGrainLocation;\r\n                const computeGrains = instrumentState.computeGrains;\r\n                instrumentState.granularDelayLineDirty = true;\r\n                `;\n            }\n            if (usesDistortion) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\r\n\t\t\t\tlet distortion = instrumentState.distortion;\r\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\r\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\r\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\r\n\t\t\t\tconst distortionFractionalResolution = 4.0;\r\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\r\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\r\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\r\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\r\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\r\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\r\n\t\t\t\t\r\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\r\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\r\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\r\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\r\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`;\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\r\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\r\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\r\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\r\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\r\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\r\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\r\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\r\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`;\n            }\n            if (usesRingModulation) {\n                effectsSource += `\r\n\t\t\t\t\r\n                let ringModMix = +instrumentState.ringModMix;\r\n                let ringModMixDelta = +instrumentState.ringModMixDelta;\r\n                let ringModPhase = +instrumentState.ringModPhase;\r\n                let ringModPhaseDelta = +instrumentState.ringModPhaseDelta;\r\n                let ringModPhaseDeltaScale = +instrumentState.ringModPhaseDeltaScale;\r\n                let ringModWaveformIndex = +instrumentState.ringModWaveformIndex;\r\n                let ringModMixFade = +instrumentState.ringModMixFade;\r\n                let ringModMixFadeDelta = +instrumentState.ringModMixFadeDelta;\r\n                \r\n                let ringModPulseWidth = +instrumentState.ringModPulseWidth;\r\n\r\n                let waveform = Config.operatorWaves[ringModWaveformIndex].samples; \r\n                if (ringModWaveformIndex == Config.operatorWaves.dictionary['pulse width'].index) {\r\n                    waveform = Synth.getOperatorWave(ringModWaveformIndex, ringModPulseWidth).samples;\r\n                }\r\n                const waveformLength = waveform.length - 1;\r\n                `;\n            }\n            if (usesEqFilter) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet filters = instrumentState.eqFilters;\r\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\r\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\r\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\r\n\t\t\t\tconst applyFilters = Synth.applyFilters;`;\n            }\n            effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\r\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`;\n            if (usesPanning) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\r\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\r\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\r\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\r\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\r\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\r\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\r\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\r\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\r\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\r\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`;\n            }\n            if (usesChorus) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\r\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\r\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\r\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\r\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\r\n\t\t\t\t\r\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\r\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\r\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\r\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\r\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\r\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\r\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\r\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\r\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\r\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\r\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\r\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\r\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\r\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\r\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\r\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\r\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\r\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\r\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\r\n\t\t\t\tchorusPhase += chorusAngle * runLength;\r\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\r\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\r\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\r\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\r\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\r\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\r\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\r\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\r\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\r\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\r\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\r\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`;\n            }\n            if (usesEcho) {\n                effectsSource += `\r\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\r\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\r\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\r\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\r\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\r\n\t\t\t\t\r\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\r\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\r\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\r\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\r\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\r\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\r\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\r\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\r\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\r\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\r\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`;\n            }\n            if (usesReverb) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\r\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\r\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\r\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\r\n\t\t\t\t\r\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\r\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\r\n\t\t\t\t\r\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\r\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\r\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\r\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\r\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\r\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\r\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\r\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\r\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\r\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\r\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`;\n            }\n            effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\r\n            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n                    `;\n            if (usesGranular) {\n                effectsSource += `\r\n                let sample = tempMonoInstrumentSampleBuffer[sampleIndex];\r\n                let granularOutput = 0;\r\n                for (let grainIndex = 0; grainIndex < granularGrainCount; grainIndex++) {\r\n                    const grain = granularGrains[grainIndex];\r\n                    if(computeGrains) {\r\n                        if(grain.delay > 0) {\r\n                            grain.delay--;\r\n                        } else {\r\n                            const grainDelayLinePosition = grain.delayLinePosition;\r\n                            const grainDelayLinePositionInt = grainDelayLinePosition | 0;\r\n                            // const grainDelayLinePositionT = grainDelayLinePosition - grainDelayLinePositionInt;\r\n                            let grainAgeInSamples = grain.ageInSamples;\r\n                            const grainMaxAgeInSamples = grain.maxAgeInSamples;\r\n                            // const grainSample0 = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt))    ) & granularDelayLineMask];\r\n                            // const grainSample1 = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt)) + 1) & granularDelayLineMask];\r\n                            // let grainSample = grainSample0 + (grainSample1 - grainSample0) * grainDelayLinePositionT; // Linear interpolation (@TODO: sounds quite bad?)\r\n                            let grainSample = granularDelayLine[((granularDelayLineIndex + (granularDelayLineLength - grainDelayLinePositionInt))    ) & granularDelayLineMask]; // No interpolation\r\n                            `;\n                if (Config.granularEnvelopeType == 0) {\n                    effectsSource += `\r\n                                const grainEnvelope = grain.parabolicEnvelopeAmplitude;\r\n                                `;\n                }\n                else if (Config.granularEnvelopeType == 1) {\n                    effectsSource += `\r\n                                const grainEnvelope = grain.rcbEnvelopeAmplitude;\r\n                                `;\n                }\n                effectsSource += `\r\n                            grainSample *= grainEnvelope;\r\n                            granularOutput += grainSample;\r\n                            if (grainAgeInSamples > grainMaxAgeInSamples) {\r\n                                if (granularGrainCount > 0) {\r\n                                    // Faster equivalent of .pop, ignoring the order in the array.\r\n                                    const lastGrainIndex = granularGrainCount - 1;\r\n                                    const lastGrain = granularGrains[lastGrainIndex];\r\n                                    granularGrains[grainIndex] = lastGrain;\r\n                                    granularGrains[lastGrainIndex] = grain;\r\n                                    granularGrainCount--;\r\n                                    grainIndex--;\r\n                                    // ^ Dangerous, since this could end up causing an infinite loop,\r\n                                    // but should be okay in this case.\r\n                                }\r\n                            } else {\r\n                                grainAgeInSamples++;\r\n                            `;\n                if (Config.granularEnvelopeType == 0) {\n                    effectsSource += `\r\n                                    grain.parabolicEnvelopeAmplitude += grain.parabolicEnvelopeSlope;\r\n                                    grain.parabolicEnvelopeSlope += grain.parabolicEnvelopeCurve;\r\n                                    `;\n                }\n                else if (Config.granularEnvelopeType == 1) {\n                    effectsSource += `\r\n                                    grain.updateRCBEnvelope();\r\n                                    `;\n                }\n                effectsSource += `\r\n                                grain.ageInSamples = grainAgeInSamples;\r\n                                // if(usesRandomGrainLocation) {\r\n                                //     grain.delayLine -= grainPitchShift;\r\n                                // }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                granularWet += granularMixDelta;\r\n                granularDry -= granularMixDelta;\r\n                granularOutput *= Config.granularOutputLoudnessCompensation;\r\n                granularDelayLine[granularDelayLineIndex] = sample;\r\n                granularDelayLineIndex = (granularDelayLineIndex + 1) & granularDelayLineMask;\r\n                sample = sample * granularDry + granularOutput * granularWet;\r\n                tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;\r\n                `;\n            }\n            else {\n                effectsSource += `let sample = tempMonoInstrumentSampleBuffer[sampleIndex];\r\n                tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`;\n            }\n            if (usesDistortion) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\r\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\r\n\t\t\t\t\tsample = distortionNextOutput;\r\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\r\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\r\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\r\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\r\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\r\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\r\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\r\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\r\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\r\n\t\t\t\t\tsample *= distortionOversampleCompensation;\r\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\r\n\t\t\t\t\tdistortion += distortionDelta;\r\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`;\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\r\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\r\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\r\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\r\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\r\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\r\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\r\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\r\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\r\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\r\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\r\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\r\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\r\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`;\n            }\n            if (usesRingModulation) {\n                effectsSource += ` \r\n                \r\n                const ringModOutput = sample * waveform[(ringModPhase*waveformLength)|0];\r\n                const ringModMixF = Math.max(0, ringModMix * ringModMixFade);\r\n                sample = sample * (1 - ringModMixF) + ringModOutput * ringModMixF;\r\n\r\n                ringModMix += ringModMixDelta;\r\n                ringModPhase += ringModPhaseDelta;\r\n                ringModPhase = ringModPhase % 1.0;\r\n                ringModPhaseDelta *= ringModPhaseDeltaScale;\r\n                ringModMixFade += ringModMixFadeDelta;\r\n                `;\n            }\n            if (usesEqFilter) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst inputSample = sample;\r\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\t\t\tinitialFilterInput1 = inputSample;`;\n            }\n            effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tsample *= eqFilterVolume;\r\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`;\n            if (usesPanning) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\r\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\r\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\r\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\r\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\r\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\r\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\r\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\r\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\r\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\r\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\r\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\r\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\r\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\r\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\r\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`;\n            }\n            else {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet sampleL = sample;\r\n\t\t\t\t\tlet sampleR = sample;`;\n            }\n            if (usesChorus) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\r\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\r\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\r\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\r\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\r\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\r\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\r\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\r\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\r\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\r\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\r\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\r\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\r\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\r\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\r\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\r\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\r\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\r\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\r\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\r\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`;\n            }\n            if (usesEcho) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\r\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\r\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\r\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\r\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\r\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\r\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\r\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\r\n\t\t\t\t\t\r\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\r\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\r\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\r\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\r\n\t\t\t\t\tsampleL += echoShelfSampleL;\r\n\t\t\t\t\tsampleR += echoShelfSampleR;\r\n\t\t\t\t\t\r\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\r\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\r\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\r\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\r\n\t\t\t\t\techoMult += echoMultDelta;\r\n                    `;\n            }\n            if (usesReverb) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\r\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\r\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\r\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\r\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\r\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\r\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\r\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\r\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\r\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\r\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\r\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\r\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\r\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\r\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\r\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\r\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\r\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\r\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\r\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\r\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\r\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\r\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\r\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\r\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\r\n\t\t\t\t\treverb += reverbDelta;`;\n            }\n            effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\r\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\r\n\t\t\t\t\tmixVolume += mixVolumeDelta;`;\n            if (usesDelays) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`;\n            }\n            effectsSource += `\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\r\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\r\n\t\t\t\t\r\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\r\n\t\t\t\tconst epsilon = (1.0e-24);`;\n            if (usesDelays) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;`;\n            }\n            if (usesGranular) {\n                effectsSource += `\r\n                    instrumentState.granularMix = granularWet;\r\n                    instrumentState.granularGrainsLength = granularGrainCount;\r\n                    instrumentState.granularDelayLineIndex = granularDelayLineIndex;\r\n                `;\n            }\n            if (usesDistortion) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.distortion = distortion;\r\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\r\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\r\n\t\t\t\t\r\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\r\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\r\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\r\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\r\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`;\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\r\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\r\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\r\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\r\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\r\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\r\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\r\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`;\n            }\n            if (usesRingModulation) {\n                effectsSource += ` \r\n                instrumentState.ringModMix = ringModMix;\r\n                instrumentState.ringModMixDelta = ringModMixDelta;\r\n                instrumentState.ringModPhase = ringModPhase;\r\n                instrumentState.ringModPhaseDelta = ringModPhaseDelta;\r\n                instrumentState.ringModPhaseDeltaScale = ringModPhaseDeltaScale;\r\n                instrumentState.ringModWaveformIndex = ringModWaveformIndex;\r\n                instrumentState.ringModPulseWidth = ringModPulseWidth;\r\n                instrumentState.ringModMixFade = ringModMixFade;\r\n                 `;\n            }\n            if (usesEqFilter) {\n                effectsSource += `\r\n\t\t\t\t\t\r\n\t\t\t\tsynth.sanitizeFilters(filters);\r\n\t\t\t\t// The filter input here is downstream from another filter so we\r\n\t\t\t\t// better make sure it's safe too.\r\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\r\n\t\t\t\t\tinitialFilterInput1 = 0.0;\r\n\t\t\t\t\tinitialFilterInput2 = 0.0;\r\n\t\t\t\t}\r\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\r\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\r\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\r\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`;\n            }\n            if (usesPanning) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\r\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\r\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\r\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\r\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\r\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;`;\n            }\n            if (usesChorus) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\r\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\r\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\r\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\r\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;`;\n            }\n            if (usesEcho) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\r\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\r\n\t\t\t\tinstrumentState.echoMult = echoMult;\r\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\r\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\r\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\r\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\r\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\r\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`;\n            }\n            if (usesReverb) {\n                effectsSource += `\r\n\t\t\t\t\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\r\n\t\t\t\tSynth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\r\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\r\n\t\t\t\tinstrumentState.reverbMult = reverb;\r\n\t\t\t\t\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\r\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\r\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\r\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\r\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\r\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\r\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`;\n            }\n            effectsSource += \"}\";\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\n            Synth.effectsFunctionCache[signature] = effectsFunction;\n        }\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n    }\n    static pulseWidthSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let pulseFunction = Synth.pulseFunctionCache[instrumentState.unisonVoices];\n        if (pulseFunction == undefined) {\n            let pulseSource = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) => {\";\n            pulseSource += `\r\n        const data = synth.tempMonoInstrumentSampleBuffer;\r\n\r\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n\r\n        let expression = +tone.expression;\r\n        const expressionDelta = +tone.expressionDelta;\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `let phaseDelta# = tone.phaseDeltas[#];\r\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\r\n\r\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `phase# = (tone.phases[#] % 1);\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            pulseSource += `let pulseWidth = tone.pulseWidth;\r\n        const pulseWidthDelta = tone.pulseWidthDelta;\r\n\r\n        const filters = tone.noteFilters;\r\n        const filterCount = tone.noteFilterCount | 0;\r\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n        const applyFilters = Synth.applyFilters;\r\n\r\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\r\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `const sawPhaseA# = phase# % 1;\r\n                const sawPhaseB# = (phase# + pulseWidth) % 1;\r\n                let pulseWave# = sawPhaseB# - sawPhaseA#;\r\n                if (!instrumentState.aliases) {\r\n                    if (sawPhaseA# < phaseDelta#) {\r\n                        var t = sawPhaseA# / phaseDelta#;\r\n                        pulseWave# += (t + t - t * t - 1) * 0.5;\r\n                    } else if (sawPhaseA# > 1.0 - phaseDelta#) {\r\n                        var t = (sawPhaseA# - 1.0) / phaseDelta#;\r\n                        pulseWave# += (t + t + t * t + 1) * 0.5;\r\n                    }\r\n                    if (sawPhaseB# < phaseDelta#) {\r\n                        var t = sawPhaseB# / phaseDelta#;\r\n                        pulseWave# -= (t + t - t * t - 1) * 0.5;\r\n                    } else if (sawPhaseB# > 1.0 - phaseDelta#) {\r\n                        var t = (sawPhaseB# - 1.0) / phaseDelta#;\r\n                        pulseWave# -= (t + t + t * t + 1) * 0.5;\r\n                    }\r\n                }\r\n\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"pulseWave\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            pulseSource += \"let inputSample = \" + sampleList.join(\" + \") + \";\";\n            pulseSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `phase# += phaseDelta#;\r\n                phaseDelta# *= phaseDeltaScale#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            pulseSource += `pulseWidth += pulseWidthDelta;\r\n\r\n            const output = sample * expression;\r\n            expression += expressionDelta;\r\n            data[sampleIndex] += output;\r\n        }`;\n            for (let i = 0; i < voiceCount; i++) {\n                pulseSource += `tone.phases[#] = phase#;\r\n            tone.phaseDeltas[#] = phaseDelta#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            pulseSource += `tone.expression = expression;\r\n        tone.pulseWidth = pulseWidth;\r\n\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }`;\n            pulseFunction = new Function(\"Config\", \"Synth\", pulseSource)(Config, Synth);\n            Synth.pulseFunctionCache[instrumentState.unisonVoices] = pulseFunction;\n        }\n        pulseFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static supersawSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const data = synth.tempMonoInstrumentSampleBuffer;\n        const voiceCount = Config.supersawVoiceCount | 0;\n        let phaseDelta = tone.phaseDeltas[0];\n        const phaseDeltaScale = +tone.phaseDeltaScales[0];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phases = tone.phases;\n        let dynamism = +tone.supersawDynamism;\n        const dynamismDelta = +tone.supersawDynamismDelta;\n        const unisonDetunes = tone.supersawUnisonDetunes;\n        let shape = +tone.supersawShape;\n        const shapeDelta = +tone.supersawShapeDelta;\n        let delayLength = +tone.supersawDelayLength;\n        const delayLengthDelta = +tone.supersawDelayLengthDelta;\n        const delayLine = tone.supersawDelayLine;\n        const delayBufferMask = (delayLine.length - 1) >> 0;\n        let delayIndex = tone.supersawDelayIndex | 0;\n        delayIndex = (delayIndex & delayBufferMask) + delayLine.length;\n        const filters = tone.noteFilters;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\n        const applyFilters = Synth.applyFilters;\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            let phase = (phases[0] + phaseDelta) % 1.0;\n            let supersawSample = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\n            if (!instrumentState.aliases) {\n                if (phase < phaseDelta) {\n                    var t = phase / phaseDelta;\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\n                }\n                else if (phase > 1.0 - phaseDelta) {\n                    var t = (phase - 1.0) / phaseDelta;\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n            phases[0] = phase;\n            for (let i = 1; i < voiceCount; i++) {\n                const detunedPhaseDelta = phaseDelta * unisonDetunes[i];\n                let phase = (phases[i] + detunedPhaseDelta) % 1.0;\n                supersawSample += phase * dynamism;\n                if (!instrumentState.aliases) {\n                    if (phase < detunedPhaseDelta) {\n                        const t = phase / detunedPhaseDelta;\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\n                    }\n                    else if (phase > 1.0 - detunedPhaseDelta) {\n                        const t = (phase - 1.0) / detunedPhaseDelta;\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\n                    }\n                }\n                phases[i] = phase;\n            }\n            delayLine[delayIndex & delayBufferMask] = supersawSample;\n            const delaySampleTime = delayIndex - delayLength;\n            const lowerIndex = delaySampleTime | 0;\n            const upperIndex = lowerIndex + 1;\n            const delayRatio = delaySampleTime - lowerIndex;\n            const prevDelaySample = delayLine[lowerIndex & delayBufferMask];\n            const nextDelaySample = delayLine[upperIndex & delayBufferMask];\n            const delaySample = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\n            delayIndex++;\n            const inputSample = supersawSample - delaySample * shape;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n            phaseDelta *= phaseDeltaScale;\n            dynamism += dynamismDelta;\n            shape += shapeDelta;\n            delayLength += delayLengthDelta;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.supersawDynamism = dynamism;\n        tone.supersawShape = shape;\n        tone.supersawDelayLength = delayLength;\n        tone.supersawDelayIndex = delayIndex;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n    static noiseSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let noiseFunction = Synth.noiseFunctionCache[instrumentState.unisonVoices];\n        if (noiseFunction == undefined) {\n            let noiseSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            noiseSource += `\r\n        const data = synth.tempMonoInstrumentSampleBuffer;\r\n        const wave = instrumentState.wave;\r\n\r\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `\r\n            let phaseDelta# = tone.phaseDeltas[#];\r\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\r\n            let noiseSample# = +tone.noiseSamples[#];\r\n            // This is for a \"legacy\" style simplified 1st order lowpass filter with\r\n            // a cutoff frequency that is relative to the tone's fundamental frequency.\r\n            const pitchRelativefilter# = Math.min(1.0, phaseDelta# * instrumentState.noisePitchFilterMult);\r\n            \r\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[#-1];\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += `\r\n        let expression = +tone.expression;\r\n        const expressionDelta = +tone.expressionDelta;\r\n\r\n        const filters = tone.noteFilters;\r\n        const filterCount = tone.noteFilterCount | 0;\r\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n        const applyFilters = Synth.applyFilters;\r\n\r\n        const phaseMask = Config.spectrumNoiseLength - 1;\r\n\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `let phase# = (tone.phases[#] % 1) * Config.chipNoiseLength;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += \"let test = true;\";\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `\r\n            if (tone.phases[#] == 0.0) {\r\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n                phase# = Math.random() * Config.chipNoiseLength;\r\n                if (@ <= # && test && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {`.replaceAll(\"#\", i + \"\").replaceAll(\"@\", voiceCount + \"\").replaceAll(\"~\", tone.phases.length + \"\");\n                for (let j = i + 1; j < tone.phases.length; j++) {\n                    noiseSource += \"phase~ = phase#;\".replaceAll(\"#\", i + \"\").replaceAll(\"~\", j + \"\");\n                }\n                noiseSource += `\r\n                    test = false;\r\n                }\r\n            }`;\n            }\n            noiseSource += `\r\n        const stopIndex = bufferIndex + runLength;\r\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n            `;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `\r\n                let waveSample# = wave[phase# & phaseMask];\r\n\r\n                noiseSample# += (waveSample# - noiseSample#) * pitchRelativefilter#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"noiseSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            noiseSource += \"let inputSample = \" + sampleList.join(\" + \") + \";\";\n            noiseSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `phase# += phaseDelta#;\r\n                phaseDelta# *= phaseDeltaScale#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += `const output = sample * expression;\r\n            expression += expressionDelta;\r\n            data[sampleIndex] += output;\r\n        }`;\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `tone.phases[#] = phase# / `.replaceAll(\"#\", i + \"\") + Config.chipNoiseLength + `;\r\n            tone.phaseDeltas[#] = phaseDelta#;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += \"tone.expression = expression;\";\n            for (let i = 0; i < voiceCount; i++) {\n                noiseSource += `tone.noiseSamples[#] = noiseSample#;\r\n             `.replaceAll(\"#\", i + \"\");\n            }\n            noiseSource += `\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }`;\n            noiseFunction = new Function(\"Config\", \"Synth\", noiseSource)(Config, Synth);\n            ;\n            Synth.noiseFunctionCache[instrumentState.unisonVoices] = noiseFunction;\n        }\n        noiseFunction(synth, bufferIndex, runLength, tone, instrumentState);\n    }\n    static spectrumSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let spectrumFunction = Synth.spectrumFunctionCache[instrumentState.unisonVoices];\n        if (spectrumFunction == undefined) {\n            let spectrumSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            spectrumSource += `\r\n        const data = synth.tempMonoInstrumentSampleBuffer;\r\n        const wave = instrumentState.wave;\r\n        const samplesInPeriod = (1 << 7);\r\n\r\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `\r\n                if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[#-1];\r\n                let phaseDelta# = tone.phaseDeltas[#] * samplesInPeriod;\r\n                let phaseDeltaScale# = +tone.phaseDeltaScales[#];\r\n                let noiseSample# = +tone.noiseSamples[#];\r\n                // This is for a \"legacy\" style simplified 1st order lowpass filter with\r\n                // a cutoff frequency that is relative to the tone's fundamental frequency.\r\n                const pitchRelativefilter# = Math.min(1.0, phaseDelta#);\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `\r\n        let expression = +tone.expression;\r\n        const expressionDelta = +tone.expressionDelta;\r\n\r\n        const filters = tone.noteFilters;\r\n        const filterCount = tone.noteFilterCount | 0;\r\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n        const applyFilters = Synth.applyFilters;\r\n\r\n        const phaseMask = Config.spectrumNoiseLength - 1;\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `let phase# = (tone.phases[#] % 1) * Config.spectrumNoiseLength;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `\r\n            if (tone.phases[0] == 0.0) {\r\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n                phase0 = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta0;\r\n            `;\n            for (let i = 1; i < voiceCount; i++) {\n                spectrumSource += `\r\n                if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {\r\n                    phase# = phase0;\r\n                }\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `}`;\n            for (let i = 1; i < voiceCount; i++) {\n                spectrumSource += `\r\n                if (tone.phases[#] == 0.0 && !(instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)) {\r\n                    // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n                phase# = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta#;\r\n                }\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `\r\n        const stopIndex = bufferIndex + runLength;\r\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {`;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `\r\n                const phase#Int = phase# | 0;\r\n                const index# = phase#Int & phaseMask;\r\n                let waveSample# = wave[index#]\r\n                const phase#Ratio = phase# - phase#Int;\r\n                waveSample# += (wave[index# + 1] - waveSample#) * phase#Ratio;\r\n\r\n                noiseSample# += (waveSample# - noiseSample#) * pitchRelativefilter#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"noiseSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            spectrumSource += \"let inputSample = \" + sampleList.join(\" + \") + \";\";\n            spectrumSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `phase# += phaseDelta#;\r\n                phaseDelta# *= phaseDeltaScale#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `const output = sample * expression;\r\n            expression += expressionDelta;\r\n            data[sampleIndex] += output;\r\n        }`;\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `tone.phases[#] = phase# / `.replaceAll(\"#\", i + \"\") + Config.spectrumNoiseLength + `;\r\n            tone.phaseDeltas[#] = phaseDelta# / samplesInPeriod;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += \"tone.expression = expression;\";\n            for (let i = 0; i < voiceCount; i++) {\n                spectrumSource += `tone.noiseSamples[#] = noiseSample#;\r\n             `.replaceAll(\"#\", i + \"\");\n            }\n            spectrumSource += `\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }`;\n            spectrumFunction = new Function(\"Config\", \"Synth\", spectrumSource)(Config, Synth);\n            ;\n            Synth.spectrumFunctionCache[instrumentState.unisonVoices] = spectrumFunction;\n        }\n        spectrumFunction(synth, bufferIndex, runLength, tone, instrumentState);\n    }\n    static drumsetSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const voiceCount = Math.max(2, instrumentState.unisonVoices);\n        let drumFunction = Synth.drumFunctionCache[instrumentState.unisonVoices];\n        if (drumFunction == undefined) {\n            let drumSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            drumSource += `\r\n        const data = synth.tempMonoInstrumentSampleBuffer;\r\n        let wave = instrumentState.getDrumsetWave(tone.drumsetPitch);\r\n        const referenceDelta = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch);\r\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `let phaseDelta# = tone.phaseDeltas[#] / referenceDelta;\r\n            let phaseDeltaScale# = +tone.phaseDeltaScales[#];\r\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) tone.phases[#] = tone.phases[# - 1];\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `let expression = +tone.expression;\r\n        const expressionDelta = +tone.expressionDelta;\r\n\r\n        const filters = tone.noteFilters;\r\n        const filterCount = tone.noteFilterCount | 0;\r\n        let initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n        let initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n        const applyFilters = Synth.applyFilters;`;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `let phase# = (tone.phases[#] % 1) * Config.spectrumNoiseLength;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `\r\n        if (tone.phases[0] == 0.0) {\r\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phase0 = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta0;\r\n        `;\n            for (let i = 1; i < voiceCount; i++) {\n                drumSource += `\r\n            if (instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval) {\r\n                phase# = phase0;\r\n            }\r\n        `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `}`;\n            for (let i = 1; i < voiceCount; i++) {\n                drumSource += `\r\n            if (tone.phases[#] == 0.0 && !(instrumentState.unisonVoices <= # && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)) {\r\n                // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phase# = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta#;\r\n            }\r\n        `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `const phaseMask = Config.spectrumNoiseLength - 1;\r\n\r\n        const stopIndex = bufferIndex + runLength;\r\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n        `;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `\r\n                const phase#Int = phase# | 0;\r\n                const index# = phase#Int & phaseMask;\r\n                let noiseSample# = wave[index#]\r\n                const phase#Ratio = phase# - phase#Int;\r\n                noiseSample# += (wave[index# + 1] - noiseSample#) * phase#Ratio;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"noiseSample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            drumSource += \"let inputSample = \" + sampleList.join(\" + \") + \";\";\n            drumSource += `const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n            initialFilterInput2 = initialFilterInput1;\r\n            initialFilterInput1 = inputSample;`;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `phase# += phaseDelta#;\r\n                phaseDelta# *= phaseDeltaScale#;\r\n                `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `const output = sample * expression;\r\n            expression += expressionDelta;\r\n            data[sampleIndex] += output;\r\n        }`;\n            for (let i = 0; i < voiceCount; i++) {\n                drumSource += `tone.phases[#] = phase# / `.replaceAll(\"#\", i + \"\") + Config.spectrumNoiseLength + `;\r\n            tone.phaseDeltas[#] = phaseDelta# * referenceDelta;\r\n            `.replaceAll(\"#\", i + \"\");\n            }\n            drumSource += `tone.expression = expression;\r\n        synth.sanitizeFilters(filters);\r\n        tone.initialNoteFilterInput1 = initialFilterInput1;\r\n        tone.initialNoteFilterInput2 = initialFilterInput2;\r\n    }`;\n            drumFunction = new Function(\"Config\", \"Synth\", \"InstrumentState\", drumSource)(Config, Synth, InstrumentState);\n            ;\n            Synth.drumFunctionCache[instrumentState.unisonVoices] = drumFunction;\n        }\n        drumFunction(synth, bufferIndex, runLength, tone, instrumentState);\n    }\n    static modSynth(synth, stereoBufferIndex, roundedSamplesPerTick, tone, instrument) {\n        if (!synth.song)\n            return;\n        let mod = Config.modCount - 1 - tone.pitches[0];\n        if (instrument.invalidModulators[mod])\n            return;\n        let setting = instrument.modulators[mod];\n        let usedInstruments = [];\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\n            usedInstruments.push(0);\n        }\n        else {\n            if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                for (let i = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                    usedInstruments.push(i);\n                }\n            }\n            else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar).instruments;\n            }\n            else {\n                usedInstruments.push(instrument.modInstruments[mod]);\n            }\n        }\n        for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n            for (let i = 0; i < synth.heldMods.length; i++) {\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\n                    if (synth.heldMods[i].setting == setting)\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n                }\n                else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n                }\n            }\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\n            }\n            else if (setting == Config.modulators.dictionary[\"reset envelope\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                const tgtInstrumentState = synth.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrumentState.envelopeTime[envelopeTarget] = 0;\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\n                synth.wantToSkip = true;\n            }\n            else if (setting == Config.modulators.dictionary[\"song eq\"].index) {\n                const tgtSong = synth.song;\n                let dotTarget = instrument.modFilterTypes[mod] | 0;\n                if (dotTarget == 0) {\n                    let pinIdx = 0;\n                    const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                    while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                        pinIdx++;\n                    let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                    if (tgtSong.eqSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtSong.eqSubFilters[tone.note.pins[pinIdx].size] != null) {\n                        tgtSong.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtSong.eqSubFilters[tone.note.pins[pinIdx - 1].size], tgtSong.eqSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                    }\n                    else {\n                        tgtSong.tmpEqFilterEnd = tgtSong.eqFilter;\n                    }\n                }\n                else {\n                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                        if (tgtSong.tmpEqFilterEnd == tgtSong.eqSubFilters[i] && tgtSong.tmpEqFilterEnd != null) {\n                            tgtSong.tmpEqFilterEnd = new FilterSettings();\n                            tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqSubFilters[i].toJsonObject());\n                        }\n                    }\n                    if (tgtSong.tmpEqFilterEnd == null) {\n                        tgtSong.tmpEqFilterEnd = new FilterSettings();\n                        tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqFilter.toJsonObject());\n                    }\n                    if (tgtSong.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                        if (dotTarget % 2) {\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                        }\n                        else {\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"eq filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                if (!tgtInstrument.eqFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n                    if (dotTarget == 0) {\n                        let pinIdx = 0;\n                        const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                            pinIdx++;\n                        let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                        if (tgtInstrument.eqSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.eqSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                        }\n                        else {\n                            tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;\n                        }\n                    }\n                    else {\n                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {\n                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i].toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpEqFilterEnd == null) {\n                            tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());\n                        }\n                        if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) {\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            }\n                            else {\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"note filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                if (!tgtInstrument.noteFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n                    if (dotTarget == 0) {\n                        let pinIdx = 0;\n                        const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                            pinIdx++;\n                        let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                        if (tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                        }\n                        else {\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\n                        }\n                    }\n                    else {\n                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) {\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            }\n                            else {\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope speed\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let speed = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    if (Number.isInteger(speed)) {\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = Config.perEnvelopeSpeedIndices[speed];\n                    }\n                    else {\n                        speed = (1 - (speed % 1)) * Config.perEnvelopeSpeedIndices[Math.floor(speed)] + (speed % 1) * Config.perEnvelopeSpeedIndices[Math.ceil(speed)];\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = speed;\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope lower bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let bound = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeLowerBound = bound / 10;\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope upper bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let bound = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeUpperBound = bound / 10;\n                }\n            }\n        }\n    }\n    static findRandomZeroCrossing(wave, waveLength) {\n        let phase = Math.random() * waveLength;\n        const phaseMask = waveLength - 1;\n        let indexPrev = phase & phaseMask;\n        let wavePrev = wave[indexPrev];\n        const stride = 16;\n        for (let attemptsRemaining = 128; attemptsRemaining > 0; attemptsRemaining--) {\n            const indexNext = (indexPrev + stride) & phaseMask;\n            const waveNext = wave[indexNext];\n            if (wavePrev * waveNext <= 0.0) {\n                for (let i = 0; i < stride; i++) {\n                    const innerIndexNext = (indexPrev + 1) & phaseMask;\n                    const innerWaveNext = wave[innerIndexNext];\n                    if (wavePrev * innerWaveNext <= 0.0) {\n                        const slope = innerWaveNext - wavePrev;\n                        phase = indexPrev;\n                        if (Math.abs(slope) > 0.00000001) {\n                            phase += -wavePrev / slope;\n                        }\n                        phase = Math.max(0, phase) % waveLength;\n                        break;\n                    }\n                    else {\n                        indexPrev = innerIndexNext;\n                        wavePrev = innerWaveNext;\n                    }\n                }\n                break;\n            }\n            else {\n                indexPrev = indexNext;\n                wavePrev = waveNext;\n            }\n        }\n        return phase;\n    }\n    static instrumentVolumeToVolumeMult(instrumentVolume) {\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n    }\n    static volumeMultToInstrumentVolume(volumeMult) {\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\n    }\n    static noteSizeToVolumeMult(size) {\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n    }\n    static volumeMultToNoteSize(volumeMult) {\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\n    }\n    static fadeInSettingToSeconds(setting) {\n        return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n    }\n    static secondsToFadeInSetting(seconds) {\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n    }\n    static fadeOutSettingToTicks(setting) {\n        return Config.fadeOutTicks[setting];\n    }\n    static ticksToFadeOutSetting(ticks) {\n        let lower = Config.fadeOutTicks[0];\n        if (ticks <= lower)\n            return 0;\n        for (let i = 1; i < Config.fadeOutTicks.length; i++) {\n            let upper = Config.fadeOutTicks[i];\n            if (ticks <= upper)\n                return (ticks < (lower + upper) / 2) ? i - 1 : i;\n            lower = upper;\n        }\n        return Config.fadeOutTicks.length - 1;\n    }\n    static detuneToCents(detune) {\n        return detune - Config.detuneCenter;\n    }\n    static centsToDetune(cents) {\n        return cents + Config.detuneCenter;\n    }\n    static getOperatorWave(waveform, pulseWidth) {\n        if (waveform != 2) {\n            return Config.operatorWaves[waveform];\n        }\n        else {\n            return Config.pwmOperatorWaves[pulseWidth];\n        }\n    }\n    getSamplesPerTick() {\n        if (this.song == null)\n            return 0;\n        let beatsPerMinute = this.song.getBeatsPerMinute();\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\n        }\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\n    }\n    getSamplesPerTickSpecificBPM(beatsPerMinute) {\n        const beatsPerSecond = beatsPerMinute / 60.0;\n        const partsPerSecond = Config.partsPerBeat * beatsPerSecond;\n        const tickPerSecond = Config.ticksPerPart * partsPerSecond;\n        return this.samplesPerSecond / tickPerSecond;\n    }\n    static fittingPowerOfTwo(x) {\n        return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n    }\n    sanitizeFilters(filters) {\n        let reset = false;\n        for (const filter of filters) {\n            const output1 = Math.abs(filter.output1);\n            const output2 = Math.abs(filter.output2);\n            if (!(output1 < 100) || !(output2 < 100)) {\n                reset = true;\n                break;\n            }\n            if (output1 < epsilon)\n                filter.output1 = 0.0;\n            if (output2 < epsilon)\n                filter.output2 = 0.0;\n        }\n        if (reset) {\n            for (const filter of filters) {\n                filter.output1 = 0.0;\n                filter.output2 = 0.0;\n            }\n        }\n    }\n    static sanitizeDelayLine(delayLine, lastIndex, mask) {\n        while (true) {\n            lastIndex--;\n            const index = lastIndex & mask;\n            const sample = Math.abs(delayLine[index]);\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon))\n                break;\n            delayLine[index] = 0.0;\n        }\n    }\n    static applyFilters(sample, input1, input2, filterCount, filters) {\n        for (let i = 0; i < filterCount; i++) {\n            const filter = filters[i];\n            const output1 = filter.output1;\n            const output2 = filter.output2;\n            const a1 = filter.a1;\n            const a2 = filter.a2;\n            const b0 = filter.b0;\n            const b1 = filter.b1;\n            const b2 = filter.b2;\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n            filter.a1 = a1 + filter.a1Delta;\n            filter.a2 = a2 + filter.a2Delta;\n            if (filter.useMultiplicativeInputCoefficients) {\n                filter.b0 = b0 * filter.b0Delta;\n                filter.b1 = b1 * filter.b1Delta;\n                filter.b2 = b2 * filter.b2Delta;\n            }\n            else {\n                filter.b0 = b0 + filter.b0Delta;\n                filter.b1 = b1 + filter.b1Delta;\n                filter.b2 = b2 + filter.b2Delta;\n            }\n            filter.output2 = output1;\n            filter.output1 = sample;\n            input2 = output2;\n            input1 = output1;\n        }\n        return sample;\n    }\n    computeTicksSinceStart(ofBar = false) {\n        var _a, _b;\n        const beatsPerBar = ((_a = this.song) === null || _a === void 0 ? void 0 : _a.beatsPerBar) ? (_b = this.song) === null || _b === void 0 ? void 0 : _b.beatsPerBar : 8;\n        if (ofBar) {\n            return Config.ticksPerPart * Config.partsPerBeat * beatsPerBar * this.bar;\n        }\n        else {\n            return this.tick + Config.ticksPerPart * (this.part + Config.partsPerBeat * (this.beat + beatsPerBar * this.bar));\n        }\n    }\n}\nSynth.tempFilterStartCoefficients = new FilterCoefficients();\nSynth.tempFilterEndCoefficients = new FilterCoefficients();\nSynth.fmSynthFunctionCache = {};\nSynth.fm6SynthFunctionCache = {};\nSynth.effectsFunctionCache = Array(1 << 7).fill(undefined);\nSynth.pickedStringFunctionCache = Array(3).fill(undefined);\nSynth.spectrumFunctionCache = [];\nSynth.noiseFunctionCache = [];\nSynth.drumFunctionCache = [];\nSynth.chipFunctionCache = [];\nSynth.pulseFunctionCache = [];\nSynth.harmonicsFunctionCache = [];\nSynth.loopableChipFunctionCache = Array(Config.unisonVoicesMax + 1).fill(undefined);\nSynth.fmSourceTemplate = (`\r\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\r\n\t\tconst sineWave = Config.sineWave;\r\n\t\t\t\r\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\r\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\r\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\r\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\r\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\r\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\r\n        const operator#Wave      = tone.operatorWaves[#].samples;\r\n\t\tlet feedbackMult         = +tone.feedbackMult;\r\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\r\n        let expression = +tone.expression;\r\n\t\tconst expressionDelta = +tone.expressionDelta;\r\n\t\t\r\n\t\tconst filters = tone.noteFilters;\r\n\t\tconst filterCount = tone.noteFilterCount|0;\r\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\r\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\r\n\t\tconst applyFilters = Synth.applyFilters;\r\n\t\t\r\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\r\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\r\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\r\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\t\t\t\t\r\n\t\t\tconst inputSample = fmOutput;\r\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\r\n\t\t\tinitialFilterInput2 = initialFilterInput1;\r\n\t\t\tinitialFilterInput1 = inputSample;\r\n\t\t\t\t\r\n\t\t\t\tfeedbackMult += feedbackDelta;\r\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\r\n\t\t\t\toperator#Phase += operator#PhaseDelta;\r\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\r\n\t\t\t\r\n\t\t\tconst output = sample * expression;\r\n\t\t\texpression += expressionDelta;\r\n\r\n\t\t\tdata[sampleIndex] += output;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\r\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\r\n\t\t    tone.feedbackOutputs[#] = operator#Output;\r\n\t\t    tone.feedbackMult = feedbackMult;\r\n\t\t    tone.expression = expression;\r\n\t\t\t\r\n\t\tsynth.sanitizeFilters(filters);\r\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\r\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\r\n\t\t`).split(\"\\n\");\nSynth.operatorSourceTemplate = (`\r\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\r\n\t\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\r\n                const operator#Sample   = operator#Wave[operator#Index];\r\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n\t\t`).split(\"\\n\");\nexport { Config };\n//# sourceMappingURL=synth.js.map"],"mappings":"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AO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,GAAK,KAAO,KAAO,KAAO,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,GAAK,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,mBAAqB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,oBAAsB,mBAAqB,oBAAsB,oBAAsB,mBAAqB,oBAAsB,qBAAuB,GAAM,sBAAwB,qBAAuB,oBAAsB,qBAAuB,qBAAuB,oBAAsB,qBAAuB,oBAAsB,oBAAsB,qBAAuB,oBAAsB,oBAAsB,qBAAuB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,IAAM,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,MAAQ,MAAQ,MAAQ,IAAM,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,IAAM,MAAQ,MAAQ,MAAQ,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,GAAM,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,MAAQ,MAAQ,IAAM,MAAQ,MAAQ,MAAQ,MAAQ,KAAO,MAAQ,MAAQ,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,qBAAuB,oBAAsB,oBAAsB,qBAAuB,oBAAsB,oBAAsB,qBAAuB,oBAAsB,qBAAuB,qBAAuB,oBAAsB,qBAAuB,qBAAuB,EAAK,qBAAuB,oBAAsB,mBAAqB,oBAAsB,oBAAsB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,mBAAqB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,GAAK,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,QAC9viB,CAAE0B,KAAM,sBAAuBC,WAAY,EAAK5B,QAASC,EAAW,CAAC,EAAK,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,MAAQ,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,KAAO,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,MAAQ,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,IAAM,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,MAAQ,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,KAAO,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,MAAQ,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,GAAK,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,MAAQ,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,KAAO,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,MAAQ,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,IAAM,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,MAAQ,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,KAAO,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,MAAQ,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,UAAY,OAAS,UAAY,SAAW,UAAY,QAAU,UAAY,SAAW,WAAa,GAAM,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,OAAS,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,MAAQ,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,OAAS,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,KAAO,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,OAAS,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,MAAQ,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,OAAS,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,IAAM,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,OAAS,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,MAAQ,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,OAAS,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,KAAO,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,OAAS,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,MAAQ,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,OAAS,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,WAAa,QAAU,WAAa,UAAY,WAAa,SAAW,WAAa,UAAY,aAC7zL,CAAE0B,KAAM,qBAAsBC,WAAY,EAAK5B,QAASC,EAAW,CAAC,EAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,OAC12I,CAAE0B,KAAM,sBAAuBC,WAAY,EAAK5B,QAASC,EAAW,CAAC,EAAK,oBAAsB,oBAAsB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,mBAAqB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,kBAAoB,mBAAqB,mBAAqB,gBAAkB,mBAAqB,kBAAoB,mBAAqmBAAqB,kBAAoB,mBAAqB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,mBAAqB,kBAAoB,kBAAoB,mBAAqB,kBAAoB,mBAAqB,mBAAqB,kBAAoB,mBAAqB,kBAAoB,mBAAqB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,kBAAoB,mBAAqB,mBAAqB,kBAAoB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,mBAAqB,oBAAsB,oBAAsB,uBAAyB,qBAAuB,oBAAsB,oBAAsB,qBAAuB,qBAAuB,mBAAqB,oBAAsB,oBAAsB,kBAAoB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,mBAAqB,kBAAoB,oBAAsB,oBAAsB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,mBAAqoBAAsB,mBAAqB,mBAAqB,oBAAsB,kBAAoB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,kBAAoB,mBAAqB,iBAAmB,oBAAsB,mBAAqB,mBAAqB,mBAAqB,oBAAsB,mBAAqB,mBAAqB,oBAAsB,kBAAoB,oBAAsB,oBAAsB,oBAAsB,kBAAoB,oBAAsB,oBAAsB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,mBAAqB,oBAAsB,oBAAsB,oBAAsB,oBAAsB,qBAAuB,qBAAuB,yBAEz4Kd,EAAOC,UAy9BA,SAA6BoS,GAChC,MAAMC,EAAW,IAAIvR,MAAMsR,EAAIjR,QACzB4B,EAAa,GACnB,IAAK,IAAI+F,EAAI,EAAGA,EAAIuJ,EAASlR,OAAQ2H,IAAK,CACtCuJ,EAASvJ,GAAKwJ,OAAOC,OAAO,GAAIH,EAAItJ,IACpC,MAAMhL,EAAQuU,EAASvJ,GACvBhL,EAAM+E,MAAQiG,EACd/F,EAAWjF,EAAMyE,MAAQzE,CACjC,CACI,IAAK,IAAI0U,KAAOzP,EACZA,EAAWyP,GAAK5R,QAAUM,EAAgB6B,EAAWyP,GAAK5R,SAE9D,MAAMzC,EAASkU,EAEf,OADAlU,EAAO4E,WAAaA,EACb5E,CACX,CAx+BmBsU,CAAoBtV,EAAG+C,cAC1CH,EAAOK,gBAAkBjD,EAAG+C,aAC5BH,EAAO2S,mCAAqCvV,EAAG6C,UAAUmB,OACzDpB,EAAO+K,WAAawC,EAAU,CAC1B,CAAE/K,KAAM,QAASC,WAAY,IAAMiN,UAAW,GAAIkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MACnG,CAAE2B,KAAM,QAASC,WAAY,EAAKiN,UAAW,GAAIkD,gBAAiB,EAAKC,QAAQ,EAAMhS,QAAS,MAC9F,CAAE2B,KAAM,QAASC,WAAY,GAAKiN,UAAW,GAAIkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MAClG,CAAE2B,KAAM,OAAQC,WAAY,GAAKiN,UAAW,GAAIkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MACjG,CAAE2B,KAAM,SAAUC,WAAY,IAAKiN,UAAW,GAAIkD,gBAAiB,EAAKC,QAAQ,EAAMhS,QAAS,MAC/F,CAAE2B,KAAM,QAASC,WAAY,EAAKiN,UAAW,GAAIkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MAClG,CAAE2B,KAAM,OAAQC,WAAY,IAAKiN,UAAW,IAAKkD,gBAAiB,KAAQC,QAAQ,EAAMhS,QAAS,MACjG,CAAE2B,KAAM,SAAUC,WAAY,KAAOiN,UAAW,GAAIkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MACrG,CAAE2B,KAAM,WAAYC,WAAY,EAAKiN,UAAW,GAAIkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MACrG,CAAE2B,KAAM,SAAUC,WAAY,EAAKiN,UAAW,GAAIkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MACnG,CAAE2B,KAAM,cAAeC,WAAY,GAAKiN,UAAW,MAAOkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MAC3G,CAAE2B,KAAM,iBAAkBC,WAAY,GAAKiN,UAAW,MAAOkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MAC9G,CAAE2B,KAAM,YAAaC,WAAY,GAAKiN,UAAW,GAAIkD,gBAAiB,KAAQC,QAAQ,EAAOhS,QAAS,MACtG,CAAE2B,KAAM,OAAQC,WAAY,EAAKiN,UAAW,GAAIkD,gBAAiB,EAAKC,QAAQ,EAAMhS,QAAS,MAC7F,CAAE2B,KAAM,WAAYC,WAAY,EAAKiN,UAAW,GAAIkD,gBAAiB,EAAKC,QAAQ,EAAMhS,QAAS,QAErGb,EAAO8S,eAAiB,EAAM,EAC9B9S,EAAO+S,gBAAkB,GACzB/S,EAAOgT,2BAA6B,GACpChT,EAAOiT,sBAAwB,IAC/BjT,EAAOkT,gBAAkB9V,EAAG6V,sBAAwBjK,KAAKuC,IAAI,EAAKnO,EAAG0V,gBAAkB1V,EAAG2V,gBAAkB,EAAI3V,EAAG4V,6BACnHhT,EAAOmT,gBAAkB,EACzBnT,EAAOoT,gBAAkB,GACzBpT,EAAOqT,iBAAmB,EAC1BrT,EAAOsT,eAAiB,GACxBtT,EAAOuT,gBAAkB,GACzBvT,EAAOwT,gBAAkB,CAAC,WAAY,YAAa,QACnDxT,EAAOyT,iBAAmB,GAC1BzT,EAAO0T,qBAAuB,GAC9B1T,EAAO2T,sBAAwB,EAC/B3T,EAAO4T,YAAc,GACrB5T,EAAO6T,aAAe,EAAE,IAAK,IAAK,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAChE7T,EAAO8T,eAAiB,EACxB9T,EAAO+T,oBAAsB,GAC7B/T,EAAOgU,YAAczG,EAAU,CAC3B,CAAE/K,KAAM,SAAUyR,YAAY,EAAOC,WAAW,EAAOC,QAAQ,EAAOC,WAAY,EAAGC,yBAAyB,GAC9G,CAAE7R,KAAM,YAAayR,YAAY,EAAMC,WAAW,EAAOC,QAAQ,EAAOC,WAAY,EAAGC,yBAAyB,GAChH,CAAE7R,KAAM,WAAYyR,YAAY,EAAMC,WAAW,EAAMC,QAAQ,EAAOC,WAAY,EAAGC,yBAAyB,GAC9G,CAAE7R,KAAM,QAASyR,YAAY,EAAMC,WAAW,EAAOC,QAAQ,EAAMC,WAAY,EAAGC,yBAAyB,GAC3G,CAAE7R,KAAM,mBAAoByR,YAAY,EAAMC,WAAW,EAAOC,QAAQ,EAAMC,WAAY,EAAGC,yBAAyB,KAE1HrU,EAAOsU,SAAW/G,EAAU,CACxB,CAAE/K,KAAM,OAAQsK,UAAW,EAAKyH,KAAM,EAAGC,WAAY,GACrD,CAAEhS,KAAM,QAASsK,UAAW,IAAMyH,KAAM,EAAGC,WAAY,GACvD,CAAEhS,KAAM,UAAWsK,UAAW,GAAKyH,KAAM,EAAGC,WAAY,IACxD,CAAEhS,KAAM,QAASsK,UAAW,IAAMyH,KAAM,EAAGC,WAAY,GACvD,CAAEhS,KAAM,QAASsK,UAAW,GAAKyH,KAAM,EAAGC,WAAY,KAE1DxU,EAAOyU,aAAelH,EAAU,CAC5B,CAAE/K,KAAM,SAAUkS,eAAgB,CAAC,KAAOC,OAAQ,KAClD,CAAEnS,KAAM,QAASkS,eAAgB,CAAC,IAAM,OAAc,KAAWC,OAAQ,UAE7E3U,EAAO4U,cAAgB,CAAC,EAAG,MAAQ,KAAO,GAAK,IAAM,EAAI,EAAG,GAAK,GAAK,EAAI,EAAG,IAAM,GAAK,GAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,GAChR5U,EAAO6U,QAAUtH,EAAU,CACvB,CAAE/K,KAAM,OAAQsS,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,EAAKvS,WAAY,IAAKwS,KAAM,GAC5E,CAAEzS,KAAM,UAAWsS,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAKvS,WAAY,GAAKwS,KAAM,GACjF,CAAEzS,KAAM,MAAOsS,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAKvS,WAAY,EAAKwS,KAAM,GAC7E,CAAEzS,KAAM,aAAcsS,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvS,WAAY,EAAKwS,KAAM,GACnF,CAAEzS,KAAM,YAAasS,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvS,WAAY,GAAKwS,KAAM,GAClF,CAAEzS,KAAM,QAASsS,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvS,WAAY,EAAKwS,KAAM,IAC9E,CAAEzS,KAAM,UAAWsS,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvS,WAAY,EAAKwS,KAAM,GAChF,CAAEzS,KAAM,UAAWsS,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAKvS,WAAY,EAAKwS,KAAM,GACjF,CAAEzS,KAAM,OAAQsS,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAKvS,WAAY,IAAMwS,KAAM,KAC/E,CAAEzS,KAAM,QAASsS,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvS,WAAY,EAAKwS,MAAO,GAC/E,CAAEzS,KAAM,OAAQsS,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAKvS,WAAY,GAAKwS,MAAO,KAC/E,CAAEzS,KAAM,SAAUsS,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAGvS,WAAY,IAAMwS,KAAM,GAC9E,CAAEzS,KAAM,MAAOsS,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAGvS,WAAY,IAAMwS,KAAM,IAC5E,CAAEzS,KAAM,SAAUsS,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,EAAKvS,WAAY,GAAKwS,KAAM,GAC9E,CAAEzS,KAAM,gBAAiBsS,OAAQ,EAAGC,OAAQ,GAAMC,OAAQ,EAAKvS,WAAY,IAAMwS,KAAM,GACvF,CAAEzS,KAAM,gBAAiBsS,OAAQ,EAAGC,OAAQ,GAAMC,OAAQ,EAAKvS,WAAY,GAAKwS,KAAM,GACtF,CAAEzS,KAAM,eAAgBsS,OAAQ,EAAGC,OAAQ,KAAMC,OAAQ,KAAMvS,WAAY,IAAMwS,KAAM,GACvF,CAAEzS,KAAM,YAAasS,OAAQ,EAAGC,OAAQ,GAAIC,OAAQ,EAAKvS,WAAY,EAAKwS,KAAM,GAChF,CAAEzS,KAAM,QAASsS,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,IAAKvS,WAAY,GAAKwS,KAAM,GAC7E,CAAEzS,KAAM,kBAAmBsS,OAAQ,EAAGC,OAAQ,IAAKC,QAAS,IAAKvS,WAAY,GAAKwS,KAAM,GACxF,CAAEzS,KAAM,aAAcsS,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,EAAKvS,WAAY,IAAKwS,KAAM,GAClF,CAAEzS,KAAM,SAAUsS,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGvS,WAAY,IAAMwS,KAAM,GAC3E,CAAEzS,KAAM,UAAWsS,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,IAAMvS,WAAY,GAAKwS,MAAO,IAClF,CAAEzS,KAAM,eAAgBsS,OAAQ,EAAGC,OAAQ,KAAMC,QAAS,EAAKvS,WAAY,GAAKwS,MAAO,IACvF,CAAEzS,KAAM,SAAUsS,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,IAAMvS,WAAY,EAAKwS,KAAM,GAC/E,CAAEzS,KAAM,SAAUsS,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,GAAKvS,WAAY,IAAMwS,KAAM,GAC/E,CAAEzS,KAAM,UAAWsS,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,EAAGvS,WAAY,KAAOwS,KAAM,GAC/E,CAAEzS,KAAM,OAAQsS,OAAQ,EAAGC,OAAQ,EAAGC,QAAS,EAAGvS,WAAY,EAAKwS,KAAM,GACzE,CAAEzS,KAAM,QAASsS,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,GAAKvS,WAAY,KAAOwS,KAAM,GAC7E,CAAEzS,KAAM,aAAcsS,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,EAAKvS,WAAY,GAAKwS,KAAM,GAClF,CAAEzS,KAAM,SAAUsS,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,EAAKvS,WAAY,EAAKwS,KAAM,GAC9E,CAAEzS,KAAM,SAAUsS,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,GAAKvS,WAAY,EAAKwS,KAAM,GAC9E,CAAEzS,KAAM,UAAWsS,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,IAAMvS,WAAY,GAAKwS,KAAM,GAChF,CAAEzS,KAAM,YAAasS,OAAQ,EAAGC,OAAQ,MAAQC,OAAQ,GAAKvS,WAAY,GAAKwS,MAAO,KACrF,CAAEzS,KAAM,YAAasS,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGvS,WAAY,GAAKwS,KAAM,GAC7E,CAAEzS,KAAM,aAAcsS,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGvS,WAAY,GAAKwS,KAAM,GAC9E,CAAEzS,KAAM,QAASsS,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGvS,WAAY,IAAMwS,KAAM,IAC1E,CAAEzS,KAAM,mBAAoBsS,OAAQ,EAAGC,OAAQ,KAAMC,QAAS,EAAGvS,WAAY,IAAMwS,KAAM,IACzF,CAAEzS,KAAM,QAASsS,OAAQ,EAAGC,OAAQ,IAAMC,QAAS,IAAMvS,WAAY,IAAMwS,KAAM,IACjF,CAAEzS,KAAM,QAASsS,OAAQ,EAAGC,OAAQ,EAAKC,QAAS,GAAKvS,WAAY,GAAKwS,KAAM,GAC9E,CAAEzS,KAAM,YAAasS,OAAQ,EAAGC,OAAQ,KAAMC,OAAQ,MAAOvS,WAAY,IAAMwS,KAAM,IACrF,CAAEzS,KAAM,OAAQsS,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,IAAKvS,WAAY,GAAKwS,MAAO,IAC7E,CAAEzS,KAAM,UAAWsS,OAAQ,EAAGC,OAAQ,GAAMC,OAAQ,GAAMvS,WAAY,GAAKwS,KAAM,GACjF,CAAEzS,KAAM,OAAQsS,OAAQ,EAAGC,OAAQ,OAAQC,OAAQ,MAAOvS,WAAY,IAAMwS,KAAM,IAClF,CAAEzS,KAAM,aAAcsS,OAAQ,EAAGC,OAAQ,MAAOC,QAAS,MAAOvS,WAAY,IAAMwS,KAAM,KACxF,CAAEzS,KAAM,SAAUsS,OAAQ,EAAGC,OAAQ,KAAOC,QAAS,GAAMvS,WAAY,IAAKwS,KAAM,GAClF,CAAEzS,KAAM,UAAWsS,OAAQ,EAAGC,OAAQ,GAAMC,OAAQ,GAAMvS,WAAY,GAAKwS,KAAM,IACjF,CAAEzS,KAAM,OAAQsS,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,GAAMvS,WAAY,EAAKwS,KAAM,GAC7E,CAAEzS,KAAM,OAAQsS,OAAQ,EAAGC,OAAQ,GAAIC,QAAS,EAAGvS,WAAY,EAAKwS,MAAO,KAE/EjV,EAAOkV,YAAc,CAAC,SAAU,SAAU,UAAW,aAAc,aAAc,cAAe,OAAQ,cAAe,SAAU,UAAW,kBAAmB,aAAc,GAAI,WAAY,YAC7LlV,EAAOmV,YAAc,CAAC,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,IAChEnV,EAAOoV,YAAc,EACrBpV,EAAOqV,YAAc,GACrBrV,EAAOsV,eAAiB,MACxBtV,EAAOuV,UAAY,GACnBvV,EAAOwV,OAAwB,EAAfpY,EAAGmY,UACnBvV,EAAOyV,mBAAqB,KAC5BzV,EAAO0V,aAAe,EACtB1V,EAAO2O,eAAiB,GACxB3O,EAAO6O,aAAe,GACtB7O,EAAO8O,aAAe,KACtB9O,EAAO2V,iBAAmB,IAC1B3V,EAAO4V,cAAgB,IACvB5V,EAAO6V,cAAgB,EACvB7V,EAAO8V,cAAgB,GACvB9V,EAAO+V,aAAe,GACtB/V,EAAOgW,aAAe,IACtBhW,EAAOiW,cAAgB,GACvBjW,EAAOkW,cAAgB,KACvBlW,EAAOmW,gBAAkB,GACzBnW,EAAOoW,qBAAuB,EAC9BpW,EAAOqW,YAAc,EACrBrW,EAAOsW,oBAAsB,EAC7BtW,EAAOuW,iBAAmB,MAC1BvW,EAAOwW,mBAAqB,CAAC,CAAC,KAAM,IAAM,MAAO,CAAC,KAAM,KAAM,OAC9DxW,EAAOyW,mBAAqB,CAAC,CAAC,EAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IACzDzW,EAAO0W,eAAiBtZ,EAAGmZ,kBAAoB,EAAMnZ,EAAGoZ,mBAAmB,GAAGG,OAAOvZ,EAAGoZ,mBAAmB,IAAII,QAAO,CAACC,EAAGC,IAAM9N,KAAKO,IAAIsN,EAAGC,MAC5I9W,EAAO+W,OAASxJ,EAAU,CACtB,CAAE/K,KAAM,eAAgBwU,gBAAgB,EAAOC,aAAa,EAAOC,WAAY,EAAGC,YAAY,GAC9F,CAAE3U,KAAM,QAASwU,gBAAgB,EAAOC,aAAa,EAAOC,WAAY,EAAGC,YAAY,GACvF,CAAE3U,KAAM,WAAYwU,gBAAgB,EAAOC,aAAa,EAAMC,WAAY,EAAGC,YAAY,GACzF,CAAE3U,KAAM,kBAAmBwU,gBAAgB,EAAMC,aAAa,EAAOC,WAAY,EAAGC,YAAY,GAChG,CAAE3U,KAAM,aAAcwU,gBAAgB,EAAOC,aAAa,EAAOC,WAAY,EAAGC,YAAY,KAEhGnX,EAAOoX,aAAe,EACtBpX,EAAOqX,cAAgB,EACvBrX,EAAOsX,wBAA0BtO,KAAKO,IAAInM,EAAGga,aAAcha,EAAGia,cAAgB,GAC9ErX,EAAOuX,WAAahK,EAAU,CAC1B,CAAE/K,KAAM,YAAagV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,KACxG,CAAElV,KAAM,YAAagV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,GAAI,CAAC,GAAI,KACtG,CAAElV,KAAM,YAAagV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,KACtG,CAAElV,KAAM,YAAagV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,CAAC,GAAI,KACvG,CAAElV,KAAM,UAAWgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KAClG,CAAElV,KAAM,UAAWgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,KACjG,CAAElV,KAAM,YAAagV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,KACrG,CAAElV,KAAM,UAAWgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACjG,CAAElV,KAAM,YAAagV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACpG,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,GAAI,KAC3G,CAAElV,KAAM,UAAWgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,GAAI,KAChG,CAAElV,KAAM,YAAagV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACpG,CAAElV,KAAM,UAAWgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,KAC/F,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,KACxG,CAAElV,KAAM,aAAcgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,OAElH1X,EAAO2X,cAAgBpK,EAAU,CAC7B,CAAE/K,KAAM,SAAUgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,KACzH,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACtH,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,KACrH,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,KACrH,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,KACpH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,CAAC,GAAI,KACzH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,KACzH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,KAC3H,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,KAC1H,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,GAAI,KACzH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,KAChI,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KAC5H,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,KAC5H,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACvH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KAC1H,CAAElV,KAAM,kBAAmBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,KAC3H,CAAElV,KAAM,kBAAmBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACzH,CAAElV,KAAM,kBAAmBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,KAC1I,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACvH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACtH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACtH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,KACrH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,KACxH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,KACzH,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACnH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,KACvH,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,KACrH,CAAElV,KAAM,gBAAiBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACxH,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,KAClH,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KACjH,CAAElV,KAAM,mBAAoBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,KACzJ,CAAElV,KAAM,eAAgBgV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,KACrJ,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,GAAI,KAC7H,CAAElV,KAAM,cAAegV,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,OAE9H1X,EAAO4X,wBAA0B,CAAC,EAAK,KAAO,KAAO,KAAO,KAAO,MACnE5X,EAAO6X,qBAAuB,GAC9B7X,EAAO8X,oBAAsBvK,EAAU,CACnC,CAAE/K,KAAM,QAASuV,KAAM,KAAOC,SAAU,EAAKC,cAAe,GAC5D,CAAEzV,KAAM,QAASuV,KAAM,IAAMC,SAAU,EAAKC,cAAe,GAC3D,CAAEzV,KAAM,OAAQuV,KAAM,GAAKC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,QAASuV,KAAM,IAAMC,SAAU,EAAKC,cAAe,GAC3D,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,MAAOuV,KAAM,EAAKC,SAAU,IAAKC,eAAgB,GACzD,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,MAAOuV,KAAM,EAAKC,UAAW,IAAKC,eAAgB,GAC1D,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,OAAQuV,KAAM,IAAKC,UAAW,IAAMC,cAAe,GAC3D,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,MAAOuV,KAAM,EAAKC,UAAW,IAAKC,eAAgB,GAC1D,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,KAAMuV,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,OAAQuV,KAAM,GAAMC,UAAW,EAAKC,eAAgB,GAC5D,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,MAAOuV,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAEzV,KAAM,OAAQuV,KAAM,IAAOC,SAAU,EAAKC,cAAe,GAC3D,CAAEzV,KAAM,OAAQuV,KAAM,IAAOC,SAAU,EAAKC,cAAe,GAC3D,CAAEzV,KAAM,OAAQuV,KAAM,IAAOC,SAAU,EAAKC,cAAe,KAE/DjY,EAAOkY,UAAY3K,EAAU,CACzB,CAAE/K,KAAM,OAAQ+R,KAAM,EAAG4D,MAAO,GAChC,CAAE3V,KAAM,YAAa+R,KAAM,EAAG4D,MAAO,GACrC,CAAE3V,KAAM,QAAS+R,KAAM,EAAG4D,MAAO,GACjC,CAAE3V,KAAM,QAAS+R,KAAM,EAAG4D,MAAO,GACjC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,KACpC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,IACnC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,GACnC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,GACnC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,KACpC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,IACnC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,GACnC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,GACnC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,KACpC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,IACnC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,GACnC,CAAE3V,KAAM,UAAW+R,KAAM,EAAG4D,MAAO,GACnC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,IACrC,CAAE3V,KAAM,UAAW+R,KAAM,GAAI4D,MAAO,IACpC,CAAE3V,KAAM,UAAW+R,KAAM,GAAI4D,MAAO,GACpC,CAAE3V,KAAM,UAAW+R,KAAM,GAAI4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,KACrC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,IACrC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,IACrC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,GACrC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,KACrC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,KACrC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,IACrC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,GACrC,CAAE3V,KAAM,WAAY+R,KAAM,GAAI4D,MAAO,GACrC,CAAE3V,KAAM,UAAW+R,KAAM,GAAI4D,MAAO,KACpC,CAAE3V,KAAM,UAAW+R,KAAM,GAAI4D,MAAO,KACpC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,IACnC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,GACnC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,GACnC,CAAE3V,KAAM,UAAW+R,KAAM,GAAI4D,MAAO,IACpC,CAAE3V,KAAM,UAAW+R,KAAM,GAAI4D,MAAO,GACpC,CAAE3V,KAAM,UAAW+R,KAAM,GAAI4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,IACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,KACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,IACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,GACpC,CAAE3V,KAAM,WAAY+R,KAAM,EAAG4D,MAAO,KACpC,CAAE3V,KAAM,YAAa+R,KAAM,EAAG4D,MAAO,IACrC,CAAE3V,KAAM,YAAa+R,KAAM,EAAG4D,MAAO,IACrC,CAAE3V,KAAM,kBAAmB+R,KAAM,EAAG4D,MAAO,GAC3C,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,GACnC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,IACnC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,IACnC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,GACnC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,GACnC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,KAEvCnY,EAAOoY,aAAe7K,EAAU,CAC5B,CAAE/K,KAAM,OAAQ+R,KAAM,EAAG4D,MAAO,GAChC,CAAE3V,KAAM,YAAa+R,KAAM,EAAG4D,MAAO,GACrC,CAAE3V,KAAM,QAAS+R,KAAM,EAAG4D,MAAO,GACjC,CAAE3V,KAAM,SAAU+R,KAAM,EAAG4D,MAAO,GAClC,CAAE3V,KAAM,QAAS+R,KAAM,EAAG4D,MAAO,GACjC,CAAE3V,KAAM,QAAS+R,KAAM,EAAG4D,MAAO,IACjC,CAAE3V,KAAM,QAAS+R,KAAM,EAAG4D,MAAO,IACjC,CAAE3V,KAAM,QAAS+R,KAAM,EAAG4D,MAAO,IACjC,CAAE3V,KAAM,MAAO+R,KAAM,EAAG4D,MAAO,GAC/B,CAAE3V,KAAM,QAAS+R,KAAM,GAAI4D,MAAO,IAClC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,IACnC,CAAE3V,KAAM,SAAU+R,KAAM,GAAI4D,MAAO,IACnC,CAAE3V,KAAM,OAAQ+R,KAAM,GAAI4D,MAAO,IACjC,CAAE3V,KAAM,OAAQ+R,KAAM,GAAI4D,MAAO,GACjC,CAAE3V,KAAM,OAAQ+R,KAAM,GAAI4D,MAAO,KAErCnY,EAAOqY,UAAY9K,EAAU,CACzB,CAAE/K,KAAM,KAAM8V,QAAS,CAAC,CAAC,GAAI,GAAI,GAAI,KACrC,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,KACrC,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACrC,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACrC,CAAE9V,KAAM,QAAS8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,KACzC,CAAE9V,KAAM,QAAS8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KACzC,CAAE9V,KAAM,WAAY8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KAC7C,CAAE9V,KAAM,WAAY8V,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7C,CAAE9V,KAAM,cAAe8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACjD,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,KACtC,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACtC,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACtC,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAE9V,KAAM,UAAW8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KAC3C,CAAE9V,KAAM,UAAW8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KAC3C,CAAE9V,KAAM,UAAW8V,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC5C,CAAE9V,KAAM,UAAW8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7C,CAAE9V,KAAM,UAAW8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7C,CAAE9V,KAAM,YAAa8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC/C,CAAE9V,KAAM,YAAa8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC/C,CAAE9V,KAAM,YAAa8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,EAAG,EAAG,KAClD,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,OAEjFtY,EAAOuY,aAAehL,EAAU,CAC5B,CAAE/K,KAAM,SAAU8V,QAAS,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,KAC7D,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KAC7C,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,KAC7C,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,KAC7C,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,KAC7C,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,KAC7C,CAAE9V,KAAM,KAAM8V,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,CAAC,KAC7C,CAAE9V,KAAM,QAAS8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,KACjD,CAAE9V,KAAM,QAAS8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACjD,CAAE9V,KAAM,WAAY8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,KACrD,CAAE9V,KAAM,WAAY8V,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACrD,CAAE9V,KAAM,cAAe8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACzD,CAAE9V,KAAM,iBAAkB8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KAC7D,CAAE9V,KAAM,oBAAqB8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACjE,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,KAC9C,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,KAC9C,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,KAC9C,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,KAC9C,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,CAAC,KAC9C,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,KAC9C,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,KAC9C,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,KAC9C,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,KAC9C,CAAE9V,KAAM,cAAe8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACxD,CAAE9V,KAAM,cAAe8V,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACxD,CAAE9V,KAAM,cAAe8V,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC1D,CAAE9V,KAAM,gBAAiB8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7D,CAAE9V,KAAM,gBAAiB8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7D,CAAE9V,KAAM,cAAe8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC3D,CAAE9V,KAAM,cAAe8V,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC3D,CAAE9V,KAAM,gBAAiB8V,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,KACpE,CAAE9V,KAAM,MAAO8V,QAAS,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,OAEjJtY,EAAOgL,gBAAkB,MACzBhL,EAAOwY,oBAAsB,MAC7BxY,EAAOyY,kBAAoB,GAC3BzY,EAAO0Y,sBAAwB,GAC/B1Y,EAAO2Y,+BAAiC,EACxC3Y,EAAO4Y,yBAA2B,EAClC5Y,EAAO6Y,aAAe,GAAKzb,EAAGwb,0BAA4B,EAC1D5Y,EAAO8Y,uBAAyB,GAChC9Y,EAAO+Y,kBAAoB,GAC3B/Y,EAAOgZ,iCAAmC,IAC1ChZ,EAAOiZ,0BAA4B,EACnCjZ,EAAOkZ,cAAgB,GAAK9b,EAAG6b,2BAA6B,EAC5DjZ,EAAOmZ,oBAAsB,KAC7BnZ,EAAO2K,gBAAkB,GACzB3K,EAAOoZ,oBAAsB,GAC7BpZ,EAAOqZ,mBAAqB,EAC5BrZ,EAAOsZ,oBAAsB,EAC7BtZ,EAAOuZ,kBAAoB,GAC3BvZ,EAAOwZ,iBAAmB,EAC1BxZ,EAAOyZ,qBAAuB,EAC9BzZ,EAAO0Z,qBAAuB,GAC9B1Z,EAAO2Z,qBAAuB,EAC9B3Z,EAAO4Z,qBAAuB,GAC9B5Z,EAAO6Z,mBAAqB,EAC5B7Z,EAAO8Z,mBAAqB,GAC5B9Z,EAAO+Z,cAAgB,EACvB/Z,EAAOga,iBAAmB,GAC1Bha,EAAOia,UAAY,GACnBja,EAAOka,aAAe,EACtBla,EAAOma,SAAW,EAClBna,EAAOoa,SAAWhd,EAAG8c,aAAe9c,EAAG4c,iBACvCha,EAAOqa,uBAA2C,EAAlBjd,EAAGga,aACnCpX,EAAOsa,wBAA0B,CAAC,GAAW,EAAM,GAAM,EAAM,GAAM,GAAW,EAAM,EAAK,EAAM,EAAK,GAAO,GAAM,EAAM,EAAK,GAAW,EAAM,EAAK,EAAM,EAAK,GAAO,GAAM,EAAK,GAAO,GAAM,EAAM,EAAK,IAAW,EAAM,EAAK,EAAM,EAAK,GAAO,GAAM,IAAW,IAAW,EAAM,EAAK,GAAO,EAAK,GAAO,EAAK,GAAKC,KAAI1D,GAAK7N,KAAK6D,KAAKgK,GAAKzZ,EAAG4c,mBAChVha,EAAOwa,gBAAkBpd,EAAGkd,wBAAwBlZ,OACpDpB,EAAOya,iBAAmBrd,EAAGod,iBAAmB,EAChDxa,EAAO0a,aAAe,IACtB1a,EAAO2a,UAAY,IACnB3a,EAAO4a,UAAY,EACnB5a,EAAO6a,cAAgB,EACvB7a,EAAO8a,cAAgB,IACvB9a,EAAO+a,gBAAkB,EACzB/a,EAAOgb,gBAAkB,EACzBhb,EAAOib,iBAAmB,GAC1Bjb,EAAOkb,gBAAkB,GACzBlb,EAAOmb,iBAAmB,GAC1Bnb,EAAOob,gBAAkB,GACzBpb,EAAOqb,qBAAuB,EAC9Brb,EAAOsb,oBAAsB,EAC7Btb,EAAOub,eAAiB,EACxBvb,EAAOwb,cAAgB,EACvBxb,EAAO8I,eAAiB,IACxB9I,EAAOyb,aAAere,EAAG0L,eAAiB,EAC1C9I,EAAO0b,SAAWte,EAAGuL,mBACrB3I,EAAO2b,wBAA0B,CAAC,EAAG,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAK,GAAK,IAAM,GAAK,MAAQ,GAAK,GAAK,GAAK,MAAQ,GAAK,IAAM,GAAK,GAAK,EAAG,KAAM,OAAQ,IAAK,OAAQ,KAAM,EAAG,KAAM,IAAK,KAAM,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,KACrV3b,EAAO4b,0BAA4B,CAC/B,EAAG,EACH,IAAM,EACN,IAAM,EACN,IAAM,EACN,IAAM,EACN,IAAM,EACN,IAAM,EACN,IAAM,EACN,IAAM,EACN,IAAM,EACN,GAAK,GACL,GAAK,GACL,IAAM,GACN,GAAK,GACL,MAAQ,GACR,GAAK,GACL,GAAK,GACL,GAAK,GACL,MAAQ,GACR,GAAK,GACL,IAAM,GACN,GAAK,GACL,GAAK,GACL,EAAG,GACH,KAAM,GACN,OAAQ,GACR,IAAK,GACL,OAAQ,GACR,KAAM,GACN,EAAG,GACH,KAAM,GACN,IAAK,GACL,KAAM,GACN,EAAG,GACH,IAAK,GACL,EAAG,GACH,IAAK,GACL,EAAG,GACH,IAAK,GACL,EAAG,GACH,IAAK,GACL,EAAG,GACH,IAAK,GACL,EAAG,GACH,IAAK,GACL,EAAG,GACH,IAAK,GACL,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,GAAI,GACJ,IAAK,GACL,IAAK,IAET5b,EAAO6b,oBAAsB,EAC7B7b,EAAO8b,oBAAsB,EAC7B9b,EAAO+b,sBAAwB,GAC/B/b,EAAOgc,uBAAyB,GAChChc,EAAOic,iCAAmC,IAC1Cjc,EAAOkc,gCAAkC,GACzClc,EAAOmc,+BAAiC,EACxCnc,EAAOoc,oBAAsB,IAC7Bpc,EAAOqc,gBAAkB,EACzBrc,EAAOsc,mBAAqB,GAC5Btc,EAAOuc,gBAAkB,IACzBvc,EAAOwc,uBAAwB,EAC/Bxc,EAAOyc,iBAAmB,CAAC,SAAU,YACrCzc,EAAO0c,oBAAsB,GAC7B1c,EAAO2c,qBAAuB,GAC9B3c,EAAO4c,4BAA8B,EACrC5c,EAAO6c,iBAAmB,GAC1B7c,EAAO8c,uBAAyB,GAChC9c,EAAO+c,4BAA8BxP,EAAU,CAC3C,CAAE/K,KAAM,OAAQwa,aAAc,KAAMC,YAAa,OAAQC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,MAC/I,CAAE9a,KAAM,aAAcwa,aAAc,EAAGC,YAAa,cAAeC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,MACzJ,CAAE9a,KAAM,aAAcwa,aAAc,EAAGC,YAAa,cAAeC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,CAAC,EAAG,IAC7J,CAAE9a,KAAM,gBAAiBwa,aAAc,EAAGC,YAAa,UAAWC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,CAAC,IACzJ,CAAE9a,KAAM,SAAUwa,aAAc,EAAGC,YAAa,SAAUC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACtK,CAAE9a,KAAM,oBAAqBwa,aAAc,EAAGC,YAAa,WAAYC,YAAY,EAAMC,UAAU,EAAOC,SAAUhgB,EAAGia,cAAgB,EAAGgG,OAAQ,KAAMC,sBAAuB,CAAC,EAAG,KACnL,CAAE9a,KAAM,oBAAqBwa,aAAc,GAAIC,YAAa,aAAcC,YAAY,EAAOC,UAAU,EAAOC,SAAUhgB,EAAGia,cAAgB,EAAGgG,OAAQ,KAAMC,sBAAuB,CAAC,EAAG,KACvL,CAAE9a,KAAM,oBAAqBwa,aAAc,GAAIC,YAAa,cAAeC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,CAAC,EAAG,KACrK,CAAE9a,KAAM,aAAcwa,aAAc,GAAIC,YAAa,cAAeC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MACvJ,CAAE9a,KAAM,SAAUwa,aAAc,GAAIC,YAAa,SAAUC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MAC9I,CAAE9a,KAAM,eAAgBwa,aAAc,GAAIC,YAAa,gBAAiBC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MAC3J,CAAE9a,KAAM,qBAAsBwa,aAAc,EAAGC,YAAa,kBAAmBC,YAAY,EAAOC,UAAU,EAAMC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MACjK,CAAE9a,KAAM,iBAAkBwa,aAAc,GAAIC,YAAa,mBAAoBC,YAAY,EAAOC,UAAU,EAAMC,SAAUhgB,EAAGmW,gBAAiB8J,OAAQ,EAAGC,sBAAuB,MAChL,CAAE9a,KAAM,gBAAiBwa,aAAc,GAAIC,YAAa,iBAAkBC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,CAAC,EAAG,IACpK,CAAE9a,KAAM,mBAAoBwa,aAAc,GAAIC,YAAa,WAAYC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,CAAC,IAC9J,CAAE9a,KAAM,iBAAkBwa,aAAc,GAAIC,YAAa,SAAUC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,CAAC,IAC1J,CAAE9a,KAAM,gBAAiBwa,aAAc,GAAIC,YAAa,YAAaC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,CAAC,IAC5J,CAAE9a,KAAM,UAAWwa,aAAc,GAAIC,YAAa,UAAWC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MAChJ,CAAE9a,KAAM,aAAcwa,aAAc,GAAIC,YAAa,aAAcC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MACtJ,CAAE9a,KAAM,yBAA0Bwa,aAAc,GAAIC,YAAa,WAAYC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MAChK,CAAE9a,KAAM,sBAAuBwa,aAAc,GAAIC,YAAa,aAAcC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MAC/J,CAAE9a,KAAM,SAAUwa,aAAc,GAAIC,YAAa,SAAUC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MAC9I,CAAE9a,KAAM,cAAewa,aAAc,GAAIC,YAAa,OAAQC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MACjJ,CAAE9a,KAAM,SAAUwa,aAAc,GAAIC,YAAa,SAAUC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,MAC9I,CAAE9a,KAAM,gBAAiBwa,aAAc,GAAIC,YAAa,iBAAkBC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,GAAIC,sBAAuB,MAC9J,CAAE9a,KAAM,iBAAkBwa,aAAc,GAAIC,YAAa,WAAYC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,GAAIC,sBAAuB,MACzJ,CAAE9a,KAAM,mBAAoBwa,aAAc,GAAIC,YAAa,cAAeC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,GAAIC,sBAAuB,MAC9J,CAAE9a,KAAM,WAAYwa,aAAc,GAAIC,YAAa,WAAYC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,GAAIC,sBAAuB,MACnJ,CAAE9a,KAAM,YAAawa,aAAc,GAAIC,YAAa,aAAcC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,GAAIC,sBAAuB,MACtJ,CAAE9a,KAAM,YAAawa,aAAc,GAAIC,YAAa,aAAcC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,GAAIC,sBAAuB,MACtJ,CAAE9a,KAAM,aAAcwa,aAAc,GAAIC,YAAa,cAAeC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,GAAIC,sBAAuB,MACxJ,CAAE9a,KAAM,YAAawa,aAAc,GAAIC,YAAa,aAAcC,YAAY,EAAOC,UAAU,EAAOC,SAAU,EAAGC,OAAQ,EAAGC,sBAAuB,QAEzJtd,EAAOud,cAAgBhQ,EAAU,CAC7B,CAAE/K,KAAM,OAAQ3B,QAASzD,EAAGse,UAC5B,CAAElZ,KAAM,WAAY3B,QAASzD,EAAG+L,mBAChC,CAAE3G,KAAM,cAAe3B,QAASzD,EAAGqM,mBAAmB,KACtD,CAAEjH,KAAM,WAAY3B,QAASzD,EAAGyM,mBAChC,CAAErH,KAAM,OAAQ3B,QAASzD,EAAGyM,iBAAgB,IAC5C,CAAErH,KAAM,YAAa3B,QAASzD,EAAGiM,sBAAsB,IACvD,CAAE7G,KAAM,aAAc3B,QAASzD,EAAG2M,2BAEtC/J,EAAOwd,iBAAmBjQ,EAAU,CAChC,CAAE/K,KAAM,KAAM3B,QAASzD,EAAGqM,mBAAmB,MAC7C,CAAEjH,KAAM,KAAM3B,QAASzD,EAAGqM,mBAAmB,MAC7C,CAAEjH,KAAM,QAAS3B,QAASzD,EAAGqM,mBAAmB,OAChD,CAAEjH,KAAM,MAAO3B,QAASzD,EAAGqM,mBAAmB,MAC9C,CAAEjH,KAAM,MAAO3B,QAASzD,EAAGqM,mBAAmB,EAAI,IAClD,CAAEjH,KAAM,MAAO3B,QAASzD,EAAGqM,mBAAmB,KAC9C,CAAEjH,KAAM,MAAO3B,QAASzD,EAAGqM,mBAAmB,EAAI,IAClD,CAAEjH,KAAM,MAAO3B,QAASzD,EAAGqM,mBAAmB,MAC9C,CAAEjH,KAAM,QAAS3B,QAASzD,EAAGqM,mBAAmB,OAChD,CAAEjH,KAAM,MAAO3B,QAASzD,EAAGqM,mBAAmB,MAC9C,CAAEjH,KAAM,MAAO3B,QAASzD,EAAGqM,mBAAmB,QAElDzJ,EAAOyd,gBAAkB,GACzBzd,EAAO0d,WAAanQ,EAAU,CAC1B,CAAE/K,KAAM,OAAQmb,UAAW,OAAQC,UAAW,EAAGC,WAAY,EAAGC,SAAS,EAAMC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACjIC,WAAY,iBAAkBC,WAAY,CAAC,4JAA6J,gBAC5M,CAAE3b,KAAM,cAAemb,UAAW,SAAUC,UAAW,IAAKC,WAAY,IAAKC,SAAS,EAAMC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC9IC,WAAY,cAAeC,WAAY,CAAC,yFAA0F,oGAAqG,qCAC3O,CAAE3b,KAAM,QAASmb,UAAW,QAASC,UAAWxgB,EAAGyS,SAAWzS,EAAGwS,SAAUiO,WAAY7U,KAAKoV,MAAMhhB,EAAGyS,SAAWzS,EAAGwS,UAAY,GAAIkO,SAAS,EAAMC,kBAAmB3gB,EAAGwS,SAAUoO,iBAAkB,GAAIC,SAAU,EAC9MC,WAAY,aAAcC,WAAY,CAAC,kFAAmF,4LAA6L,wFAAyF,oCACpZ,CAAE3b,KAAM,cAAemb,UAAW,SAAUC,UAA4B,EAAjBxgB,EAAGmT,YAAiBsN,WAAYzgB,EAAGmT,YAAauN,SAAS,EAAMC,mBAAoB3gB,EAAGmT,YAAayN,iBAAkB,GAAIC,SAAU,EACtLC,WAAY,cAAeC,WAAY,CAAC,iKAAkK,qJAAsJ,iCACpW,CAAE3b,KAAM,WAAYmb,UAAW,WAAYC,UAAW,EAAGC,WAAY,EAAGC,SAAS,EAAMC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACzIC,WAAY,iBAAkBC,WAAY,CAAC,yJAA0J,yNAA0N,4GAA6G,gBAChhB,CAAE3b,KAAM,cAAemb,UAAW,YAAaC,UAAWxgB,EAAGiY,YAAawI,WAAY7U,KAAKoV,KAAKhhB,EAAGiY,YAAc,GAAIyI,SAAS,EAAOC,kBAAmB/U,KAAKoV,MAAMhhB,EAAGiY,YAAc,GAAM2I,iBAAkB,GAAIC,SAAU,EACtNC,WAAY,cAAeC,WAAY,CAAC,0FAA2F,qOAAsO,wdAAyd,qNAAsN,iCAC5hC,CAAE3b,KAAM,MAAOmb,UAAW,MAAOC,UAAWxgB,EAAGoY,OAAQqI,WAAY7U,KAAKoV,KAAKhhB,EAAGoY,OAAS,GAAIsI,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EAC9JC,WAAY,qBAAsBC,WAAY,CAAC,sFAAuF,+KAAgL,oCAC1T,CAAE3b,KAAM,SAAUmb,UAAW,SAAUC,UAAWxgB,EAAGmT,YAAasN,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EAClJC,WAAY,oBAAqBC,WAAY,CAAC,oFAAqF,8EAA+E,8BACtN,CAAE3b,KAAM,aAAcmb,UAAW,aAAcC,UAAWxgB,EAAGif,gBAAkB,EAAGwB,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EAClKC,WAAY,wBAAyBC,WAAY,CAAC,uGAAwG,kFAAmF,8BACjP,CAAE3b,KAAM,cAAemb,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC3IC,WAAY,cAAeC,WAAY,CAAC,mHAAoH,6KAA8K,qGAAsG,qCACpb,CAAE3b,KAAM,cAAemb,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC3IC,WAAY,cAAeC,WAAY,CAAC,oHAAqH,6KAA8K,qGAAsG,qCACrb,CAAE3b,KAAM,cAAemb,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC3IC,WAAY,cAAeC,WAAY,CAAC,mHAAoH,6KAA8K,qGAAsG,qCACpb,CAAE3b,KAAM,cAAemb,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC3IC,WAAY,cAAeC,WAAY,CAAC,oHAAqH,6KAA8K,qGAAsG,qCACrb,CAAE3b,KAAM,cAAemb,UAAW,aAAcC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACjJC,WAAY,cAAeC,WAAY,CAAC,sHAAuH,6KAA8K,qGAAsG,qCACvb,CAAE3b,KAAM,cAAemb,UAAW,cAAeC,UAAWxgB,EAAGuN,gBAAiBkT,WAAYzgB,EAAGuN,gBAAiBmT,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAClLC,WAAY,cAAeC,WAAY,CAAC,qGAAsG,0LAA2L,2IAA4I,sCACzd,CAAE3b,KAAM,SAAUmb,UAAW,SAAUC,UAAWxgB,EAAGud,UAAYvd,EAAGwd,UAAWiD,WAAYzgB,EAAGsd,aAAcoD,SAAS,EAAOC,mBAAoB3gB,EAAGsd,aAAcsD,iBAAkB,EAAGC,SAAU,EAC5LC,WAAY,oBAAqBC,WAAY,CAAC,qFAAsF,8PAA+P,sCACvY,CAAE3b,KAAM,gBAAiBmb,UAAW,gBAAiBC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EACpJC,WAAY,gBAAiBC,WAAY,CAAC,4HAA6H,oKAAqK,0CAChV,CAAE3b,KAAM,cAAemb,UAAW,SAAUC,UAAWxgB,EAAG0d,cAAgB1d,EAAGyd,cAAegD,WAAY7U,KAAKoV,MAAMhhB,EAAG0d,cAAgB1d,EAAGyd,eAAiB,GAAIiD,SAAS,EAAMC,mBAAoB,IAAKC,iBAAkB,GAAIC,SAAU,EAClOC,WAAY,cAAeC,WAAY,CAAC,8FAA+F,gSAAiS,4CAC5a,CAAE3b,KAAM,gBAAiBmb,UAAW,gBAAiBC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EACpJC,WAAY,gBAAiBC,WAAY,CAAC,yFAA0F,4KAA6K,8BACrT,CAAE3b,KAAM,gBAAiBmb,UAAW,gBAAiBC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EACpJC,WAAY,gBAAiBC,WAAY,CAAC,oIAAqI,+NAAgO,0CACnZ,CAAE3b,KAAM,YAAamb,UAAW,YAAaC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC9IC,WAAY,iBAAkBC,WAAY,CAAC,qHAAsH,+GAC7J,gCAAiC,6BAA8B,qCAAsC,yCAA0C,uCAAwC,yCAA0C,uCAAwC,yCAA0C,wCAAyC,wCAAyC,8BAC7Y,CAAE3b,KAAM,YAAamb,UAAW,YAAaC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EAC7IC,WAAY,gBAAiBC,WAAY,CAAC,0GAA2G,4LAA6L,8BACtV,CAAE3b,KAAM,YAAamb,UAAW,YAAaC,UAAW,EAAGC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC5IC,WAAY,iBAAkBC,WAAY,CAAC,2SAA4S,qKAAsK,gBACjgB,CAAE3b,KAAM,YAAamb,UAAW,QAASC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACzIC,WAAY,YAAaC,WAAY,CAAC,+EAAgF,wjBAAyjB,+PAAgQ,0LAA2L,8BAC9mC,CAAE3b,KAAM,cAAemb,UAAW,QAASC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EAC1IC,WAAY,cAAeC,WAAY,CAAC,iFAAkF,0jBAA2jB,+PAAgQ,0LAA2L,8BACpnC,CAAE3b,KAAM,YAAamb,UAAW,WAAYC,UAAWxgB,EAAGwf,4BAA8B,EAAGiB,WAAY7U,KAAKgB,MAAM5M,EAAGwf,4BAA8B,GAAIkB,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EACxNC,WAAY,uBAAwBC,WAAY,CAAC,0FAA2F,0IAA2I,8BAC3R,CAAE3b,KAAM,aAAcmb,UAAW,aAAcC,UAAWxgB,EAAGsf,oBAAsB,EAAGmB,WAAY7U,KAAKgB,MAAM5M,EAAGsf,oBAAsB,GAAIoB,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EAC3MC,WAAY,6BAA8BC,WAAY,CAAC,iGAAkG,sJAAuJ,8BACpT,CAAE3b,KAAM,OAAQmb,UAAW,OAAQC,UAAWxgB,EAAG8S,iBAAmB,EAAG2N,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EACvJC,WAAY,0BAA2BC,WAAY,CAAC,wGAAyG,4KAA6K,8BAC9U,CAAE3b,KAAM,aAAcmb,UAAW,aAAcC,UAAWxgB,EAAG4S,eAAgB6N,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EAC7JC,WAAY,wBAAyBC,WAAY,CAAC,4FAA6F,8GAA+G,2CAElQ,CAAE3b,KAAM,SAAUmb,UAAW,SAAUC,UAAWxgB,EAAGiZ,YAAc,EAAGwH,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EACtJC,WAAY,oBAAqBC,WAAY,CAAC,6FAA8F,oHAAqH,8BACrQ,CAAE3b,KAAM,cAAemb,UAAW,YAAaC,UAAWxgB,EAAGsW,qBAAuB,EAAGmK,WAAYzgB,EAAGsW,qBAAuB,EAAGoK,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAClMC,WAAY,6BAA8BC,WAAY,CAAC,qGAAsG,iLAAkL,8BACnV,CAAE3b,KAAM,eAAgBmb,UAAW,aAAcC,UAAWxgB,EAAGuW,sBAAwB,EAAGkK,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC3KC,WAAY,sBAAuBC,WAAY,CAAC,uGAAwG,wPAAyP,8BACrZ,CAAE3b,KAAM,gBAAiBmb,UAAW,YAAaC,UAAWxgB,EAAGsW,qBAAuB,EAAGmK,WAAYzgB,EAAGsW,qBAAuB,EAAGoK,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EACnMC,WAAY,+BAAgCC,WAAY,CAAC,qGAAsG,iLAAkL,8BACrV,CAAE3b,KAAM,iBAAkBmb,UAAW,aAAcC,UAAWxgB,EAAGuW,sBAAwB,EAAGkK,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,EAAGC,SAAU,EAC5KC,WAAY,wBAAyBC,WAAY,CAAC,uGAAwG,wPAAyP,8BACvZ,CAAE3b,KAAM,cAAemb,UAAW,cAAeC,UAAWxgB,EAAGod,gBAAkB,EAAGqD,WAAYzgB,EAAGqd,iBAAkBqD,SAAS,EAAOC,mBAAoB3gB,EAAGqd,iBAAkBuD,iBAAkB,EAAGC,SAAU,EACzMC,WAAY,cAAeC,WAAY,CAAC,+FAAgG,sLAAuL,sCACnU,CAAE3b,KAAM,UAAWmb,UAAW,UAAWC,UAAWxgB,EAAGkf,mBAAqB,EAAGuB,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAChKC,WAAY,wBAAyBC,WAAY,CAAC,oGAAqG,2JAA4J,8BACvT,CAAE3b,KAAM,aAAcmb,UAAW,WAAYC,UAAWxgB,EAAGiY,YAAawI,WAAY7U,KAAKoV,KAAKhhB,EAAGiY,YAAc,GAAIyI,SAAS,EAAOC,kBAAmB/U,KAAKoV,MAAMhhB,EAAGiY,YAAc,GAAM2I,iBAAkB,GAAIC,SAAU,EACpNC,WAAY,aAAcC,WAAY,CAAC,6FAA8F,qSAAsS,yJAA0J,iCACzkB,CAAE3b,KAAM,cAAemb,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC3IC,WAAY,cAAeC,WAAY,CAAC,mHAAoH,6KAA8K,qGAAsG,qCACpb,CAAE3b,KAAM,cAAemb,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC3IC,WAAY,cAAeC,WAAY,CAAC,mHAAoH,6KAA8K,qGAAsG,qCACpb,CAAE3b,KAAM,iBAAkBmb,UAAW,iBAAkBC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGM,uBAAuB,EAAML,iBAAkB,GAAIC,SAAU,EACpLC,WAAY,iBAAkBC,WAAY,CAAC,oIAAqI,gBACpL,CAAE3b,KAAM,iBAAkBmb,UAAW,cAAeC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACrJC,WAAY,iBAAkBC,WAAY,CAAC,+EAAgF,sRACvH,gCAAiC,6BAA8B,qCAAsC,yCAA0C,uCAAwC,yCAA0C,uCAAwC,yCAA0C,wCAAyC,wCAAyC,8BAC7Y,CAAE3b,KAAM,WAAYmb,UAAW,WAAYC,UAAWxgB,EAAGkc,oBAAqBuE,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC/JC,WAAY,oBAAqBC,WAAY,CAAC,iGAAkG,gOAAiO,8BACrX,CAAE3b,KAAM,SAAUmb,UAAW,SAAUC,UAAWxgB,EAAGmc,kBAAmBsE,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACzJC,WAAY,kBAAmBC,WAAY,CAAC,6FAA8F,sMAAuM,8BACrV,CAAE3b,KAAM,YAAamb,UAAW,YAAaC,UAAWxgB,EAAGoc,iBAAkBqE,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC9JC,WAAY,iBAAkBC,WAAY,CAAC,+FAAgG,oKAAqK,kCACpT,CAAE3b,KAAM,4BAA6Bmb,UAAW,aAAcC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU7gB,EAAGyf,iBAAmB,EACrLqB,WAAY,4BAA6BC,WAAY,CAAC,qFAAsF,0QACxI,yCAA0C,4CAA6C,2CAA4C,4CAA6C,yCAA0C,8CAA+C,yCAA0C,mCAAoC,qCAAsC,mCAAoC,mCAAoC,mCAAoC,gCAAiC,8BAClhB,CAAE3b,KAAM,UAAWmb,UAAW,UAAWC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAMC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACxIC,WAAY,iBAAkBC,WAAY,CAAC,mJAAoJ,wjBAAyjB,+PAAgQ,0LAA2L,8BACvrC,CAAE3b,KAAM,iBAAkBmb,UAAW,WAAYC,UAAW,EAAGC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU7gB,EAAGyf,iBAAmB,EACtKqB,WAAY,iBAAkBC,WAAY,CAAC,2LAA4L,gBAC3O,CAAE3b,KAAM,kBAAmBmb,UAAW,WAAYC,UAAWxgB,EAAGsY,aAAcmI,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC/JC,WAAY,kBAAmBC,WAAY,CAAC,uEAAwE,8BACxH,CAAE3b,KAAM,iBAAkBmb,UAAW,eAAgBC,UAAWxgB,EAAGuR,eAAgBkP,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACpKC,WAAY,0BAA2BC,WAAY,CAAC,8FAA+F,8BACvJ,CAAE3b,KAAM,WAAYmb,UAAW,WAAYC,UAAWxgB,EAAG0Y,cAAe+H,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EACzJC,WAAY,WAAYC,WAAY,CAAC,gEAAiE,8BAC1G,CAAE3b,KAAM,aAAcmb,UAAW,UAAWC,UAAWxgB,EAAG+Y,gBAAiB0H,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAC5JC,WAAY,cAAeC,WAAY,CAAC,0FAA2F,8BACvI,CAAE3b,KAAM,aAAcmb,UAAW,aAAcC,UAAWxgB,EAAG4Y,aAAe5Y,EAAG6Y,cAAe4H,WAAYzgB,EAAG2Y,aAAe3Y,EAAG6Y,cAAe6H,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAChNC,WAAY,aAAcC,WAAY,CAAC,kFAAmF,wDAA0D/gB,EAAG6Y,cAAgB,iCAAkC,8BAC7O,CAAEzT,KAAM,cAAemb,UAAW,cAAeC,UAAWxgB,EAAG8Y,cAAgB9Y,EAAG6Y,cAAe4H,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU,EAClLC,WAAY,cAAeC,WAAY,CAAC,sIAAuI,wDAA0D/gB,EAAG6Y,cAAgB,iCAAkC,8BAClS,CAAEzT,KAAM,kCAAmCmb,UAAW,aAAcC,UAAoC,GAAzBxgB,EAAG0e,oBAA0B+B,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU7gB,EAAGyf,iBAAmB,EACnNqB,WAAY,kCAAmCC,WAAY,CAAC,iDAAkD,yIAA0I,sGAC5P,CAAE3b,KAAM,kCAAmCmb,UAAW,YAAaC,UAAoC,GAAzBxgB,EAAG0e,oBAA0B+B,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkB,GAAIC,SAAU7gB,EAAGyf,iBAAmB,EACnNqB,WAAY,kCAAmCC,WAAY,CAAC,iDAAkD,uIAAwI,wGC10CtO,4FAA4FG,KAAKC,UAAUC,WAI5H,MAAMC,EACT,oBAAOC,CAAcC,GACjB,IAAIvhB,EACJ,MAAMwhB,EAAgBD,GAAe,EAC/BE,EAA4B,GAAdF,EACpB,OAA+D,QAAvDvhB,EAAKqhB,EAAaK,iBAAiBF,UAAmC,IAAPxhB,OAAgB,EAASA,EAAG2hB,QAAQF,EACnH,CACI,+BAAOG,CAAyBC,GAC5B,IAAK,IAAIL,EAAgB,EAAGA,EAAgBH,EAAaK,iBAAiB1d,OAAQwd,IAAiB,CAC/F,MAAMM,EAAWT,EAAaK,iBAAiBF,GAC/C,IAAK,IAAIC,EAAc,EAAGA,EAAcK,EAASH,QAAQ3d,OAAQyd,IAAe,CAC5E,MAAMM,EAASD,EAASH,QAAQF,GAChC,GAAIM,EAAOC,aAAeD,EAAOE,aAAeJ,EAC5C,OAAQL,GAAiB,GAAKC,CAClD,CACA,CACQ,OAAO,IACf,CACI,wBAAOS,CAAkBC,GACrB,IAAK,IAAIX,EAAgB,EAAGA,EAAgBH,EAAaK,iBAAiB1d,OAAQwd,IAAiB,CAC/F,MAAMM,EAAWT,EAAaK,iBAAiBF,GAC/C,IAAK,IAAIC,EAAc,EAAGA,EAAcK,EAASH,QAAQ3d,OAAQyd,IAAe,CAE5E,GADeK,EAASH,QAAQF,GACrBrc,MAAQ+c,EACf,OAAQX,GAAiB,GAAKC,CAClD,CACA,CACQ,OAAO,IACf,CACI,yBAAOW,CAAmBC,GACtB,IAAIriB,EACJ,OAAsE,QAA9DA,EAAKqhB,EAAaK,iBAAiB,GAAGC,QAAQ/b,kBAA+B,IAAP5F,OAAgB,EAASA,EAAGoB,aAAiD,EAASA,EAAYihB,GACxL,ECrCO,SAAS3U,EAAsB0C,EAAOkS,GACzC,IAAK,IAAI3W,EAAI,EAAGA,EAAIyE,EAAMpM,OAAQ2H,IAC9ByE,EAAMzE,IAAM2W,CAEpB,CAIA,SAASC,EAAUC,GACf,IAJJ,SAAoBA,GAChB,SAASA,GAAOA,EAAKA,EAAI,EAC7B,CAESC,CAAWD,GACZ,MAAM,IAAIlf,MAAM,0CACpB,OAAOsI,KAAKgB,MAAMhB,KAAKN,IAAIkX,GAAK5W,KAAKN,IAAI,GAC7C,CAqMO,SAASmC,EAA4B2C,EAAOsS,GAC/C,MAAMC,EAAcJ,EAAUG,GAC9B,GAAIA,EAAkB,EAClB,MAAM,IAAIpf,MAAM,wCACpB,IAAK,IAAIsf,EAAOD,EAAc,EAAGC,GAAQ,EAAGA,IAAQ,CAChD,MAAMC,EAAY,GAAKD,EACjBE,EAAeD,GAAa,EAC5BE,EAASF,GAAa,EACtBG,EAA6B,EAAVpX,KAAKE,GAAWiX,EACnCE,EAAerX,KAAKgE,IAAIoT,GACxBE,EAAetX,KAAKC,IAAImX,GACxBG,EAAuB,EAAMF,EACnC,IAAK,IAAIxd,EAAa,EAAGA,EAAaid,EAAiBjd,GAAcsd,EAAQ,CACzE,MAAMK,EAAc3d,EACd4d,EAAYD,EAAcN,EAC1BQ,EAAcF,EAAcP,EAC5BU,EAAYD,EAAcR,EAC1BU,EAAYF,EAAcT,EAC1BY,EAAarT,EAAMgT,GACnBM,EAAatT,EAAMkT,GACzBlT,EAAMgT,GAAeK,EAAaC,EAClCtT,EAAMiT,IAAc,EACpBjT,EAAMkT,GAAeG,EAAaC,EAClCtT,EAAMmT,IAAc,EACpB,IAAII,EAAIV,EACJW,GAAKV,EACLW,EAAQ,EACRC,EAAQ,EACZ,IAAK,IAAIpe,EAAQ,EAAGA,EAAQod,EAAcpd,IAAS,CAC/C,MAAMqe,EAAUX,EAAc1d,EACxBse,EAAUV,EAAc5d,EACxBue,EAAUX,EAAc5d,EACxBwe,EAAUV,EAAY9d,EACtBye,EAAQ/T,EAAM2T,GACdK,EAAQhU,EAAM4T,GACdK,EAAQjU,EAAM6T,GACdK,EAAQlU,EAAM8T,GACdK,EAAQJ,EAAQC,EAChBI,EAAQH,EAAQC,EACtBlU,EAAM2T,GAAWI,EAAQC,EACzBhU,EAAM4T,GAAWM,EAAQD,EACzBjU,EAAM6T,GAAWM,EAAQZ,EAAIa,EAAQZ,EACrCxT,EAAM8T,GAAWM,EAAQb,EAAIY,EAAQX,EACrC,MAAMa,EAAQtB,EAAuBQ,EAAIE,EACnCa,EAAQvB,EAAuBS,EAAIE,EACzCD,EAAQF,EACRG,EAAQF,EACRD,EAAIc,EACJb,EAAIc,CACpB,CACA,CACA,CACI,IAAK,IAAIhf,EAAQ,EAAGA,EAAQgd,EAAiBhd,GAAS,EAAG,CACrD,MAAMif,EAASjf,EAAQ,EACjBkf,EAASlf,EAAQ,EACjBmf,EAASnf,EAAQ,EACjBye,EAAQ/T,EAAM1K,GACd0e,EAAwB,EAAhBhU,EAAMuU,GACdG,EAAQ1U,EAAMwU,GACdG,EAAwB,EAAhB3U,EAAMyU,GACdN,EAAQJ,EAAQW,EAChBN,EAAQL,EAAQW,EACtB1U,EAAM1K,GAAS6e,EAAQH,EACvBhU,EAAMuU,GAAUJ,EAAQH,EACxBhU,EAAMwU,GAAUJ,EAAQO,EACxB3U,EAAMyU,GAAUL,EAAQO,CAChC,EAtQA,SAA0B3U,EAAOsS,GAC7B,MAAMsC,EAAWzC,EAAUG,GAC3B,GAAIsC,EAAW,GACX,MAAM,IAAI1hB,MAAM,mDACpB,MAAM2hB,EAAa,GAAKD,EACxB,IAAK,IAAIrZ,EAAI,EAAGA,EAAI+W,EAAiB/W,IAAK,CACtC,IAAIuZ,EAKJ,GAJAA,GAAU,MAAJvZ,IAAe,GAAW,MAAJA,IAAe,EAC3CuZ,GAAU,MAAJA,IAAe,GAAW,MAAJA,IAAe,EAC3CA,GAAU,MAAJA,IAAe,GAAW,KAAJA,IAAe,EAC3CA,GAAMA,GAAK,GAAW,IAAJA,IAAa,IAAOD,EAClCC,EAAIvZ,EAAG,CACP,IAAIwZ,EAAO/U,EAAMzE,GACjByE,EAAMzE,GAAKyE,EAAM8U,GACjB9U,EAAM8U,GAAKC,CACvB,CACA,CACA,CAsPIC,CAAiBhV,EAAOsS,EAC5B,CD9OArB,EAAagE,QAAU,QACvBhE,EAAaiE,mBAAqB,WAAajE,EAAagE,QAC5DhE,EAAakE,gBAAkB,qBAC/BlE,EAAamE,QAAU,QAAQtE,KAAKC,UAAUsE,WAAa,YAAYvE,KAAKC,UAAUC,YAAc,uBAAuBF,KAAKC,UAAUsE,WAAa,sBAAsBvE,KAAKC,UAAUC,WAC5LC,EAAaqE,WAAarE,EAAamE,QAAU,IAAM,QACvDnE,EAAasE,SAAWtE,EAAamE,QAAU,UAAY,UAC3DnE,EAAaK,iBAAmBvR,EAAU,CACtC,CACI/K,KAAM,qBAAsBuc,QAASxR,EAAU,CAC3C,CAAE/K,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,GAAIwkB,WAAY,GACpC,CAAExgB,KAAMhE,EAAY,IAAKwkB,WAAY,OAG7C,CACIxgB,KAAM,gBAAiBuc,QAASxR,EAAU,CACtC,CAAE/K,KAAM,cAAe6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,GAAIxV,QAAW,CAAC,YAAayV,WAAc,YAAaC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,WAAYza,KAAQ,SAAU0a,OAAU,OAAQpL,UAAa,KACtP,CAAE1V,KAAM,gBAAiB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,GAAIxV,QAAW,CAAC,YAAayV,WAAc,YAAaC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,WAAYza,KAAQ,WAAY0a,OAAU,OAAQpL,UAAa,KAC1P,CAAE1V,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,QAAW9V,QAAW,CAAC,YAAayV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,eAAgBza,KAAQ,SAAU0a,OAAU,MAAOpL,UAAa,KACvU,CAAE1V,KAAM,kBAAmB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,KAAQ9V,QAAW,CAAC,YAAayV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,eAAgBza,KAAQ,WAAY0a,OAAU,UAAWpL,UAAa,KAC9U,CAAE1V,KAAM,kBAAmB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAM9V,QAAW,CAAC,UAAW,YAAa+V,QAAW,QAASN,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBza,KAAQ,WAAY0a,OAAU,MAAOpL,UAAa,KAC5V,CAAE1V,KAAM,aAAc6c,YAAa,IAAKqE,SAAS,EAAMT,SAAU,CAAE1O,KAAQ,QAAS4O,WAAc,OAAQzV,QAAW,CAAC,YAAa2V,MAAS,WAAYM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUjb,KAAQ,UAC1O,CAAEpG,KAAM,gBAAiB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,WAAY2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAM9V,QAAW,CAAC,UAAWoW,OAAU,GAAIV,cAAiB,EAAGvP,cAAiB,EAAGnJ,WAAc,GAAIqZ,SAAY,IAAKhP,OAAU,GAAIiP,MAAS,EAAG9L,UAAa,KAC7S,CAAE1V,KAAM,WAAY6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,GAAIyV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MAC3f,CAAEN,KAAM,UAAW6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,GAAIyV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,kBAAmBY,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MACzoB,CAAEN,KAAM,WAAY6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,GAAIyV,WAAc,SAAUC,cAAiB,MAAQvP,cAAiB,EAAGwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MAC/f,CAAEN,KAAM,WAAY6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,WAAY+V,QAAW,UAAWN,WAAc,SAAUC,cAAiB,MAAQvP,cAAiB,EAAGwP,MAAS,kBAAmBY,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,KAAOoL,UAAa,KACne,CAAE1V,KAAM,UAAW6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIsB,cAAgB,EAAMC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOlX,QAAW,GAAImX,SAAY,GAAIzB,cAAiB,EAAGvP,cAAiB,EAAGoQ,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,QAAU,CAAET,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,QAAU,CAAET,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,QAAU,CAAET,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,SAAW5M,UAAa,KACxuB,CAAE1V,KAAM,YAAa6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,cAAe7G,QAAW,CAAC,YAAayV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,WAAYH,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQG,QAAW,OAAQvL,UAAa,GAAI6M,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACvmB,CAAEviB,KAAM,gBAAiB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,cAAe7G,QAAW,CAAC,YAAayV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,WAAYH,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpL,UAAa,GAAI6M,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC3iB,CAAEviB,KAAM,gBAAiB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,cAAe7G,QAAW,CAAC,YAAayV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,WAAYH,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpL,UAAa,GAAI6M,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3iB,CAAEviB,KAAM,eAAgB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,cAAe7G,QAAW,CAAC,YAAayV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,WAAYH,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpL,UAAa,GAAI6M,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3lB,CAAEviB,KAAM,aAAc6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,cAAe7G,QAAW,CAAC,YAAayV,WAAc,YAAaC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,WAAYH,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpL,UAAa,GAAI6M,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,MAC3lB,CAAEviB,KAAM,eAAgB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,cAAe7G,QAAW,CAAC,YAAayV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,WAAYH,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpL,UAAa,GAAI6M,eAAkB,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,SAGnjB,CACIviB,KAAM,mBAAoBuc,QAASxR,EAAU,CACzC,CAAE/K,KAAM,gBAAiB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,YAAagP,SAAY,OAAQC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,SAAW9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,OAAUM,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,QAAS4B,cAAiB,GAAIhN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,gBAC9qB,CAAE/hB,KAAM,eAAgB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,OAAU,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,IAAO,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,SAAW9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,QAAS4B,cAAiB,GAAIhN,UAAa,KACnmB,CAAE1V,KAAM,iBAAkB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,GAAIxV,QAAW,CAAC,eAAgBsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQL,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgBza,KAAQ,YAAa0a,OAAU,UAAWpL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,cACpZ,CAAE/hB,KAAM,mBAAoB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAW9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,aAAc4B,cAAiB,GAAIhN,UAAa,KAC9e,CAAE1V,KAAM,mBAAoB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa2O,SAAY,GAAIxV,QAAW,CAAC,eAAgBsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQL,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,eAAgB4B,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI3B,OAAU,OAAQpL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,cACzf,CAAE/hB,KAAM,mBAAoB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,eAAgBsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,SAAUC,WAAc,MAASL,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MAChrB,CAAEN,KAAM,cAAe6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,YAAagP,SAAY,IAAKC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,SAAUC,WAAc,SAAW9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,OAAQ4B,cAAiB,GAAIhN,UAAa,KACjiB,CAAE1V,KAAM,WAAY6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,eAAgBsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,SAAUC,WAAc,QAAWL,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,cACrpB,CAAE/hB,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,QAAW9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,QAAS4B,UAAa,CAAC,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK3B,OAAU,QAAS4B,cAAiB,GAAIhN,UAAa,KACje,CAAE1V,KAAM,gBAAiB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa2O,SAAY,CAAC,CAAE3O,KAAQ,YAAagP,SAAY,OAAQC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,SAAW9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,OAAUM,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IAAK3B,OAAU,QAAS4B,cAAiB,GAAIhN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,gBACvqB,CAAE/hB,KAAM,gBAAiB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,YAAagP,SAAY,OAAQC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,GAAK,CAAEjP,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,GAAK,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,MAAS9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,OAAU,CAAEjP,KAAQ,YAAagP,SAAY,IAAKC,WAAc,QAAWM,OAAU,GAAIV,cAAiB,EAAGvP,aAAgB,GAAIoR,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,QAAS4B,cAAiB,GAAIC,kBAAqB,WAAYjN,UAAa,CAAC,CAAEoM,OAAU,iBAAkBC,SAAY,YAAazhB,MAAS,GAAK,CAAEwhB,OAAU,iBAAkBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,iBAAkBC,SAAY,UAAWzhB,MAAS,SAGvjC,CACIN,KAAM,oBAAqBuc,QAASxR,EAAU,CAC1C,CAAE/K,KAAM,UAAW6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,cACtlB,CAAE/hB,KAAM,eAAgB6c,YAAa,EAAGD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOzF,OAAU,IAAKzR,QAAW,CAAC,aAAc,cAAe,UAAW2V,MAAS,QAASiC,gBAAkB,EAAMC,cAAiB,GAAIC,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQM,OAAU,EAAGV,cAAiB,EAAGvP,aAAgB,GAAIoQ,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,MAAOvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,EAAGC,sBAAyB,GAAK,CAAEzB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,EAAGjjB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,IAAMC,QAAU,IACptD,CAAExjB,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQ9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,QAAS4B,UAAa,CAAC,IAAK,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI3B,OAAU,OAAQ4B,cAAiB,GAAIhN,UAAa,KACpc,CAAE1V,KAAM,cAAe6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAW9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,QAAS4B,UAAa,CAAC,IAAK,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI3B,OAAU,OAAQ4B,cAAiB,GAAIhN,UAAa,KAClb,CAAE1V,KAAM,aAAc6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACxlB,CAAE/hB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOzF,OAAU,IAAKzR,QAAW,CAAC,aAAc,cAAe,UAAW2V,MAAS,QAASiC,gBAAkB,EAAMC,cAAiB,GAAIC,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAWM,OAAU,EAAGV,cAAiB,EAAGvP,aAAgB,GAAIoQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,MAAOvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,GAAK,CAAEzB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,EAAGjjB,MAAS,IAAMkjB,QAAU,IACngD,CAAExjB,KAAM,UAAW6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOzF,OAAU,IAAKzR,QAAW,CAAC,aAAc,cAAe,UAAW2V,MAAS,QAASiC,gBAAkB,EAAMC,cAAiB,GAAIC,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQM,OAAU,EAAGV,cAAiB,EAAGvP,aAAgB,GAAIoQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,MAAOvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,GAAK,CAAEzB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,EAAGC,sBAAyB,EAAGjjB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,EAAGjjB,MAAS,IAAMkjB,QAAU,IACvtD,CAAExjB,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,cACnlB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6G,uBAAwB,EAAGhD,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAO,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,QAAW9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,QAAS4B,UAAa,CAAC,GAAI,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,UAAW4B,cAAiB,GAAIhN,UAAa,KACnjB,CAAE1V,KAAM,aAAc6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACnkB,CAAE/hB,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,eACxlB,CAAE/hB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,UAAWQ,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,aAC7lB,CAAE/hB,KAAM,cAAe6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,aACplB,CAAE/hB,KAAM,QAAS6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOzF,OAAU,IAAKzR,QAAW,CAAC,aAAc,cAAe,UAAW2V,MAAS,QAASiC,gBAAkB,EAAMC,cAAiB,GAAIC,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQM,OAAU,EAAGV,cAAiB,EAAGvP,aAAgB,GAAIoQ,UAAa,UAAWC,aAAgB,MAAOC,kBAAqB,GAAIC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,MAAOvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,GAAK,CAAEzB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,IAAMC,QAAU,OAG3/C,CACIxjB,KAAM,iBAAkBuc,QAASxR,EAAU,CACvC,CAAE/K,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACnlB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,GAAIxV,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,QAAS4B,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,OAAQ4B,cAAiB,GAAIhN,UAAa,KAC7Z,CAAE1V,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACzY,CAAEziB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC9Y,CAAEziB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,iBAG3lB,CACI/hB,KAAM,sBAAuBuc,QAASxR,EAAU,CAC5C,CAAE/K,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC/Y,CAAEziB,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC/Y,CAAEziB,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACrlB,CAAE/hB,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3Y,CAAEziB,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC1Y,CAAEziB,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,aAC7kB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,GAAIyX,SAAY,cACtlB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACnlB,CAAE/hB,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ4O,WAAc,OAAQzV,QAAW,SAAU2V,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWjb,KAAQ,WAAYsd,SAAY,UAAWzC,QAAW,SACxR,CAAEjhB,KAAM,kBAAmB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAW9V,QAAW,CAAC,cAAe,cAAesX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,MAAOC,WAAc,UAAY2C,iBAAoB,IAAKC,uBAA0B,EAAGjD,WAAc,QAASC,cAAiB,MAAQvP,cAAiB,EAAGwP,MAAS,WAAYza,KAAQ,WAAY0a,OAAU,OAAQpL,UAAa,CAAC,CAAEoM,OAAU,iBAAkBC,SAAY,UAAWzhB,MAAS,SAG9hB,CACIN,KAAM,wBAAyBuc,QAASxR,EAAU,CAC9C,CAAE/K,KAAM,oBAAqB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,cAAeE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,GAAIyX,SAAY,aAC1mB,CAAE/hB,KAAM,OAAQ6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM4O,WAAc,YAAazV,QAAW,SAAU2V,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC3kB,CAAE/hB,KAAM,QAAS6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM4O,WAAc,YAAazV,QAAW,SAAU2V,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,cACllB,CAAE/hB,KAAM,QAAS6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,aACllB,CAAE/hB,KAAM,UAAW6c,YAAa,IAAK4D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,aAC/jB,CAAE/hB,KAAM,WAAY6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACvlB,CAAE/hB,KAAM,OAAQ6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,iBAG7lB,CACI/hB,KAAM,qBAAsBuc,QAASxR,EAAU,CAC3C,CAAE/K,KAAM,mBAAoB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,OAAU,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,GAAK,CAAEjP,KAAQ,WAAYgP,SAAY,QAASC,WAAc,GAAK,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,KAAQ9V,QAAW,CAAC,cAAe,cAAesX,WAAc,CAAC,CAAEzQ,KAAQ,YAAagP,SAAY,MAAOC,WAAc,GAAK,CAAEjP,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAW6C,WAAc,GAAIlD,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,QAAS4B,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,OAAQ4B,cAAiB,GAAIhN,UAAa,CAAC,CAAEoM,OAAU,iBAAkBC,SAAY,YAAazhB,MAAS,MACh4B,CAAEN,KAAM,oBAAqB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,OAAU,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,GAAK,CAAEjP,KAAQ,WAAYgP,SAAY,QAASC,WAAc,GAAK,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,MAAS9V,QAAW,CAAC,cAAe,aAAc,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,YAAagP,SAAY,OAAQC,WAAc,GAAK,CAAEjP,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAM6C,WAAc,GAAIvC,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,QAAS4B,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,OAAQ4B,cAAiB,GAAIhN,UAAa,CAAC,CAAEoM,OAAU,iBAAkBC,SAAY,YAAazhB,MAAS,MAC/8B,CAAEN,KAAM,iBAAkB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,SAAUC,WAAc,IAAM9V,QAAW,GAAIyV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,QAASY,UAAa,YAAaC,aAAgB,UAAWC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,cAC3jB,CAAE/hB,KAAM,mBAAoB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAM9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,QAASY,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,KAAOoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,QAASzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MAC1uB,CAAEN,KAAM,gBAAiB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,MAAO2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,SAAW9V,QAAW,GAAIyV,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,QAAS3Y,WAAc,SAAUwN,UAAa,CAAC,CAAEoM,OAAU,aAAcC,SAAY,YACnU,CAAE/hB,KAAM,iBAAkB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,MAAO2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAM9V,QAAW,CAAC,WAAY+V,QAAW,UAAWN,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,QAAS3Y,WAAc,GAAIwN,UAAa,CAAC,CAAEoM,OAAU,aAAcC,SAAY,cACxV,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAM9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,QAASY,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,KAAOoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,YACtsB,CAAE/hB,KAAM,gBAAiB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAM9V,QAAW,CAAC,UAAWoW,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,cAAiB,EAAGwP,MAAS,QAASY,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,SAGzpB,CACIN,KAAM,kBAAmBuc,QAASxR,EAAU,CACxC,CAAE/K,KAAM,kBAAmB6c,YAAa,GAAID,aAAa,EAAM6G,uBAAwB,EAAGhD,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACjZ,CAAEziB,KAAM,kBAAmB6c,YAAa,GAAI4G,uBAAwB,EAAGhD,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,KACrY,CAAEziB,KAAM,mBAAoB6c,YAAa,GAAID,aAAa,EAAM6G,uBAAwB,EAAGhD,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOzF,OAAU,IAAKzR,QAAW,CAAC,UAAW,cAAe,SAAU,UAAW+V,QAAW,UAAW6C,aAAgB,GAAKC,aAAgB,KAAMC,aAAgB,GAAIC,YAAe,EAAGjB,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQkD,OAAU,IAAK5C,OAAU,EAAGV,cAAiB,EAAGvP,cAAiB,EAAGoQ,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,EAAGC,sBAAyB,GAAK,CAAEzB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,IAAMC,QAAU,IACzlD,CAAExjB,KAAM,aAAc6c,YAAa,GAAID,aAAa,EAAM6G,uBAAwB,EAAGhD,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,UAAWQ,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC1nB,CAAE/hB,KAAM,aAAc6c,YAAa,GAAID,aAAa,EAAM6G,uBAAwB,EAAGhD,SAAU,CAAE1O,KAAQ,KAAM4O,WAAc,aAAczV,QAAW,SAAU2V,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACrnB,CAAE/hB,KAAM,aAAc6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACzY,CAAEziB,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ7G,QAAW,SAAUyV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWjb,KAAQ,aAAcsd,SAAY,aAAczC,QAAW,SAChS,CAAEjhB,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWqC,SAAY,MAAOzC,QAAW,OAAQwB,UAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACrY,CAAEziB,KAAM,UAAW6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASqC,SAAY,MAAOzC,QAAW,OAAQwB,UAAa,CAAC,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,SAGnZ,CACIziB,KAAM,iBAAkBuc,QAASxR,EAAU,CACvC,CAAE/K,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,QAAU,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,QAAW9V,QAAW,CAAC,UAAW,UAAW+V,QAAW,UAAWK,OAAU,GAAIX,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,EAAGwP,MAAS,eAAgBY,UAAa,cAAeC,aAAgB,MAAOC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cAC7vB,CAAE/hB,KAAM,QAAS6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWQ,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC1lB,CAAE/hB,KAAM,QAAS6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,OAAU,CAAEjP,KAAQ,YAAagP,SAAY,MAAOC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,SAAW9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,KAAOC,WAAc,QAAWM,OAAU,GAAIX,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MACp4B,CAAEN,KAAM,aAAc6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWQ,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,cAC5lB,CAAE/hB,KAAM,SAAU6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWQ,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,aACrlB,CAAE/hB,KAAM,kBAAmB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOlX,QAAW,CAAC,cAAe,SAAU,UAAW8X,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,SAAUC,WAAc,QAAWkD,OAAU,IAAK5C,OAAU,EAAGV,cAAiB,MAAQvP,aAAgB,GAAIoQ,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,GAAIC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,MAAOvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,UAAWoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,GAAKC,sBAAyB,IAAMC,QAAU,IAC7vC,CAAExjB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,cAC5lB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,cAClmB,CAAE/hB,KAAM,kBAAmB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ4O,WAAc,YAAazV,QAAW,kBAAmB2V,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUjb,KAAQ,WAAYsd,SAAY,MAAOzC,QAAW,YACrS,CAAEjhB,KAAM,kBAAmB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACzmB,CAAE/hB,KAAM,kBAAmB6c,YAAa,GAAID,aAAa,EAAM6G,uBAAwB,EAAGhD,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,cAC3oB,CAAE/hB,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,KAAMC,WAAc,QAAU,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,QAAW9V,QAAW,CAAC,UAAW,UAAW+V,QAAW,QAASK,OAAU,GAAIX,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,EAAGwP,MAAS,eAAgBY,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,cACruB,CAAE/hB,KAAM,kBAAmB6c,YAAa,GAAI4G,uBAAwB,EAAGhD,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOzF,OAAU,IAAKzR,QAAW,CAAC,UAAW,cAAe,SAAU,UAAW+V,QAAW,UAAW6C,aAAgB,GAAKC,aAAgB,KAAMC,aAAgB,GAAIC,YAAe,EAAGjB,gBAAkB,EAAMC,cAAiB,GAAIC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,SAAUC,WAAc,KAAQkD,OAAU,IAAK5C,OAAU,EAAGV,cAAiB,MAAQvP,aAAgB,GAAIoQ,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,IAAMC,QAAU,IACx4C,CAAExjB,KAAM,kBAAmB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,WAAY2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAU,CAAEjP,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAW9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,YAAagP,SAAY,IAAKC,WAAc,QAAWM,OAAU,GAAIV,cAAiB,MAAQvP,aAAgB,EAAGnJ,WAAc,SAAUqZ,SAAY,GAAIhP,OAAU,EAAGiP,MAAS,GAAI9L,UAAa,CAAC,CAAEoM,OAAU,iBAAkBC,SAAY,UAAWzhB,MAAS,MAC9hB,CAAEN,KAAM,oBAAqB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,WAAY2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAO,CAAEjP,KAAQ,YAAagP,SAAY,MAAOC,WAAc,KAAQ,CAAEjP,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,IAAMgB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAO+B,cAAiB,CAAC,CAAEpS,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAO,CAAEjP,KAAQ,YAAagP,SAAY,MAAOC,WAAc,KAAQ,CAAEjP,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,IAAM9V,QAAW,CAAC,cAAe,SAAU,UAAW8X,gBAAkB,EAAOC,cAAiB,GAAIC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAMoD,gBAAmB,CAAC,CAAErS,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAMkD,OAAU,GAAI5C,OAAU,GAAIV,cAAiB,MAAQvP,cAAiB,EAAGnJ,WAAc,GAAIqZ,SAAY,GAAIhP,OAAU,GAAIiP,MAAS,EAAG9L,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,SAAW,CAAED,OAAU,aAAcC,SAAY,iBAGhtC,CACI/hB,KAAM,gBAAiBuc,QAASxR,EAAU,CACtC,CAAE/K,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,GAAK,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,QAAU,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,KAAQ,CAAEjP,KAAQ,WAAYgP,SAAY,QAASC,WAAc,UAAY9V,QAAW,CAAC,UAAW,SAAU,UAAW+V,QAAW,QAASiD,OAAU,IAAK5C,OAAU,GAAIV,cAAiB,MAAQvP,aAAgB,GAAIoR,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI3B,OAAU,OAAQpL,UAAa,KAC7wB,CAAE1V,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa2O,SAAY,CAAC,CAAE3O,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,SAAW,CAAEjP,KAAQ,OAAQgP,SAAY,OAAQC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,OAAU,CAAEjP,KAAQ,YAAagP,SAAY,MAAOC,WAAc,OAAU,CAAEjP,KAAQ,WAAYgP,SAAY,QAASC,WAAc,UAAY9V,QAAW,CAAC,UAAW,SAAU,UAAW+V,QAAW,QAASiD,OAAU,IAAK5C,OAAU,GAAIX,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,OAAQpL,UAAa,KACl0B,CAAE1V,KAAM,aAAc6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,YAAa2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,SAAW,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,OAAQC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,UAAY9V,QAAW,CAAC,UAAW,SAAU,UAAW+V,QAAW,QAASiD,OAAU,IAAK5C,OAAU,GAAIX,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,OAAQpL,UAAa,KAC7uB,CAAE1V,KAAM,eAAgB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,YAAa2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,GAAK,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,QAAU,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,MAAS9V,QAAW,CAAC,UAAW,UAAW+V,QAAW,QAASK,OAAU,GAAIV,cAAiB,MAAQvP,aAAgB,GAAIoR,UAAa,CAAC,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI3B,OAAU,OAAQpL,UAAa,KAC3pB,CAAE1V,KAAM,aAAc6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,YAAa2O,SAAY,CAAC,CAAE3O,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,SAAW,CAAEjP,KAAQ,OAAQgP,SAAY,OAAQC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,OAAU,CAAEjP,KAAQ,YAAagP,SAAY,MAAOC,WAAc,OAAU,CAAEjP,KAAQ,WAAYgP,SAAY,QAASC,WAAc,UAAY9V,QAAW,CAAC,UAAW,UAAW+V,QAAW,QAASK,OAAU,GAAIV,cAAiB,MAAQvP,aAAgB,GAAIoR,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,OAAQpL,UAAa,KACpuB,CAAE1V,KAAM,YAAa6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,YAAa2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,GAAK,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,OAAQC,WAAc,OAAU,CAAEjP,KAAQ,OAAQgP,SAAY,MAAOC,WAAc,GAAK,CAAEjP,KAAQ,YAAagP,SAAY,OAAQC,WAAc,SAAW9V,QAAW,CAAC,UAAW,UAAW+V,QAAW,QAASK,OAAU,GAAIX,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,OAAQpL,UAAa,KAC1wB,CAAE1V,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUqC,SAAY,QAASzC,QAAW,QAASwB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC3X,CAAEziB,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ4O,WAAc,cAAezV,QAAW,kBAAmB2V,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUjb,KAAQ,UAAWsd,SAAY,QAASzC,QAAW,UACpS,CAAEjhB,KAAM,iBAAkB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,QAASQ,UAAa,YAAaC,aAAgB,UAAWC,kBAAqB,EAAGiB,iBAAoB,QAAShB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,aACxmB,CAAE/hB,KAAM,aAAc6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,UAAW,UAAW+V,QAAW,UAAWK,OAAU,GAAIX,WAAc,QAASC,cAAiB,MAAQvP,cAAiB,EAAGwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,QAASzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cACxmB,CAAE/hB,KAAM,QAAS6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOlX,QAAW,CAAC,cAAe,UAAW8X,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAMM,OAAU,EAAGV,cAAiB,MAAQvP,aAAgB,EAAGoQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,GAAIC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,MAAOvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,UAAWoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,GAAKC,sBAAyB,GAAK,CAAEzB,OAAU,oBAAqBC,SAAY,UAAWoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,EAAGC,sBAAyB,IAAMC,QAAU,IACv4C,CAAExjB,KAAM,QAAS6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,UAAW,UAAW+V,QAAW,QAASK,OAAU,GAAIX,WAAc,mBAAoBC,cAAiB,MAAQvP,cAAiB,EAAGwP,MAAS,eAAgBY,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,aAAcC,SAAY,aAAe,CAAED,OAAU,oBAAqBC,SAAY,cAC9lB,CAAE/hB,KAAM,UAAW6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,SAAW,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,SAAW,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,SAAW,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,cAC7jB,CAAE/hB,KAAM,YAAa6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,cAC1lB,CAAE/hB,KAAM,aAAc6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,WAAY7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWgD,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAG7V,CACIrkB,KAAM,gBAAiBuc,QAASxR,EAAU,CACtC,CAAE/K,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC7kB,CAAE/hB,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC7kB,CAAE/hB,KAAM,OAAQ6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACzkB,CAAE/hB,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,IAAMC,WAAc,SAAW9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAMM,OAAU,GAAIV,cAAiB,MAAQvP,cAAiB,EAAGoQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cACj0B,CAAE/hB,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,GAAK,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,SAAW9V,QAAW,CAAC,UAAWoW,OAAU,GAAIV,cAAiB,MAAQvP,cAAiB,EAAGoQ,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cAC9uB,CAAE/hB,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,GAAIyX,SAAY,cACvlB,CAAE/hB,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,GAAIiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,cACxlB,CAAE/hB,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM4O,WAAc,OAAQzV,QAAW,SAAU2V,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,cACxlB,CAAE/hB,KAAM,cAAe6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,MAAO7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWnZ,WAAc,GAAIoc,cAAiB,UAAWrD,QAAW,YAG/Q,CACIjhB,KAAM,eAAgBuc,QAASxR,EAAU,CACrC,CAAE/K,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,YAC/kB,CAAE/hB,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,QAAShB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,aAC7kB,CAAE/hB,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC5kB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,YAChlB,CAAE/hB,KAAM,YAAa6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,QAASQ,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC9jB,CAAE/hB,KAAM,UAAW6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,QAASQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC5kB,CAAE/hB,KAAM,OAAQ6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,WAAYhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACjlB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,SAAW,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aACtlB,CAAE/hB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAKC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,aAC3kB,CAAE/hB,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtY,CAAEziB,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,GAAIsB,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOzF,OAAU,IAAKzR,QAAW,CAAC,cAAe,UAAW8X,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGV,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAMuD,gBAAmB,CAAC,CAAExS,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAMM,OAAU,EAAGV,cAAiB,MAAQvP,cAAiB,EAAGoQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,MAAOvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,GAAIC,sBAAyB,EAAGC,sBAAyB,GAAK,CAAEzB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,EAAGC,sBAAyB,EAAGjjB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,WAAYoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,EAAGC,sBAAyB,IAAMC,QAAU,OAGhuD,CACIxjB,KAAM,gBAAiBuc,QAASxR,EAAU,CACtC,CAAE/K,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM8Q,OAAU,EAAGnC,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQgB,cAAgB,EAAMC,YAAe,EAAGC,aAAgB,EAAGC,cAAiB,GAAIC,kBAAoB,EAAOzF,OAAU,IAAK6H,cAAiB,GAAItZ,QAAW,CAAC,UAAWoW,OAAU,EAAGV,cAAiB,MAAQvP,cAAiB,EAAGoQ,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,MAAOvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,GAAK,CAAE2Z,UAAa,KAAMvX,UAAa,EAAGgY,SAAY,OAAQpa,WAAc,IAAMwN,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,EAAGC,sBAAyB,EAAGjjB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,QAASoB,mBAAsB,EAAGC,iBAAoB,GAAI9b,SAAW,EAAO+b,iBAAoB,EAAGC,sBAAyB,EAAGC,sBAAyB,IAAMC,QAAU,IACt2C,CAAExjB,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACvY,CAAEziB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,kBAAmByV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUqC,SAAY,QAASzC,QAAW,UAAWwB,UAAa,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACvX,CAAEziB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUqC,SAAY,QAASzC,QAAW,OAAQwB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAClX,CAAEziB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,GAAIiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,SAAW,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,YAC7kB,CAAE/hB,KAAM,aAAc6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWQ,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,GAAIiB,iBAAoB,SAAUhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,SAAW,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,WAAa,CAAEF,UAAa,MAAOvX,UAAa,GAAIyX,SAAY,aAC/lB,CAAE/hB,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,WAAY2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,SAAW9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,YAAagP,SAAY,QAASC,WAAc,QAAWM,OAAU,GAAIV,cAAiB,MAAQvP,cAAiB,EAAGgT,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3O,UAAa,CAAC,CAAEoM,OAAU,iBAAkBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,aAAcC,SAAY,YAChlB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM7G,QAAW,kBAAmByV,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQQ,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGiB,iBAAoB,UAAWhB,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,GAAIyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,KAAMvX,UAAa,EAAGyX,SAAY,UAAY,CAAEF,UAAa,MAAOvX,UAAa,EAAGyX,SAAY,aACxmB,CAAE/hB,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,WAAY4O,WAAc,aAAczV,QAAW,SAAU2V,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUgD,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC7V,CAAErkB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,WAAY7G,QAAW,SAAUyV,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASgD,SAAY,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACpV,CAAErkB,KAAM,eAAgB6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,WAAY2O,SAAY,GAAIxV,QAAW,CAAC,aAAc,cAAe,UAAW2V,MAAS,QAAS2B,WAAc,CAAC,CAAEzQ,KAAQ,YAAagP,SAAY,MAAOC,WAAc,OAAU,CAAEjP,KAAQ,WAAYgP,SAAY,KAAOC,WAAc,QAAWM,OAAU,GAAIV,cAAiB,MAAQvP,aAAgB,GAAIgT,SAAY,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI3O,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,cACvjB,CAAE/hB,KAAM,UAAW6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,YAAa7G,QAAW,SAAUyV,WAAc,WAAYE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUqC,SAAY,QAASzC,QAAW,UAAWwB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAGpZ,CACIziB,KAAM,cAAeuc,QAASxR,EAAU,CACpC,CAAE/K,KAAM,cAAe6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,UAAWgZ,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cACpqB,CAAE/hB,KAAM,WAAY6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAMkD,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MACjsB,CAAEN,KAAM,gBAAiB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,GAAIxV,QAAW,CAAC,UAAW,cAAe,UAAW+V,QAAW,UAAWuB,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAMkD,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgBza,KAAQ,WAAY0a,OAAU,aAAcpL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,cAC9c,CAAE/hB,KAAM,kBAAmB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,QAAU,CAAEjP,KAAQ,OAAQgP,SAAY,QAASC,WAAc,QAAW9V,QAAW,CAAC,UAAWgZ,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,QAASzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cACzyB,CAAE/hB,KAAM,kBAAmB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,eAAgBsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQL,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MACzvB,CAAEN,KAAM,eAAgB6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,eAAgBsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQL,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,GAAIC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cACpuB,CAAE/hB,KAAM,YAAa6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,OAAQ2O,SAAY,GAAIxV,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAMkD,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBza,KAAQ,WAAY0a,OAAU,MAAOpL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,cACpa,CAAE/hB,KAAM,aAAc6c,YAAa,GAAID,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAM9V,QAAW,CAAC,SAAU,UAAWgZ,OAAU,IAAK5C,OAAU,GAAIX,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,QAASY,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,MACpwB,CAAEN,KAAM,aAAc6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,gBAAiB2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,QAASC,WAAc,IAAM9V,QAAW,CAAC,UAAWgZ,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgB4B,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK3B,OAAU,SAAU4B,cAAiB,GAAIhN,UAAa,KACte,CAAE1V,KAAM,UAAW6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,OAAQgP,SAAY,QAASC,WAAc,UAAY9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQkD,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,GAAIC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,WAAYzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cAC13B,CAAE/hB,KAAM,SAAU6c,YAAa,IAAKD,aAAa,EAAM6D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,OAAQgP,SAAY,QAASC,WAAc,SAAW9V,QAAW,CAAC,cAAe,UAAWsX,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,QAASC,WAAc,KAAQkD,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAWzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,WAAYzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,cACp4B,CAAE/hB,KAAM,cAAe6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,GAAIxV,QAAW,CAAC,UAAW,cAAe,UAAW+V,QAAW,UAAWuB,WAAc,CAAC,CAAEzQ,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,IAAMkD,OAAU,IAAKvD,WAAc,SAAUC,cAAiB,EAAGvP,aAAgB,GAAIwP,MAAS,eAAgBY,UAAa,cAAeC,aAAgB,WAAYC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,KAAMvX,UAAa,GAAK,CAAEuX,UAAa,MAAOvX,UAAa,IAAMoL,UAAa,CAAC,CAAEoM,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,WAAYzhB,MAAS,GAAK,CAAEwhB,OAAU,oBAAqBC,SAAY,QAASzhB,MAAS,MACxxB,CAAEN,KAAM,eAAgB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,KAAM2O,SAAY,CAAC,CAAE3O,KAAQ,OAAQgP,SAAY,QAASC,WAAc,IAAM9V,QAAW,GAAIyV,WAAc,SAAUC,cAAiB,MAAQvP,aAAgB,GAAIwP,MAAS,kBAAmBY,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,KAAMvX,UAAa,IAAM,CAAEuX,UAAa,MAAOvX,UAAa,KAAOoL,UAAa,CAAC,CAAEoM,OAAU,oBAAqBC,SAAY,cACrjB,CAAE/hB,KAAM,eAAgB6c,YAAa,GAAI4D,SAAU,CAAE1O,KAAQ,WAAY2O,SAAY,CAAC,CAAE3O,KAAQ,WAAYgP,SAAY,IAAMC,WAAc,QAAW9V,QAAW,CAAC,UAAWoW,OAAU,IAAKV,cAAiB,MAAQvP,aAAgB,GAAInJ,WAAc,GAAIqZ,SAAY,IAAKhP,OAAU,GAAIiP,MAAS,EAAG9L,UAAa,QAG5T,CACI1V,KAAM,eAAgBuc,QAASxR,EAAU,CACrC,CAAE/K,KAAM,mBAAoB6c,YAAa,IAAKqE,SAAS,EAAMT,SAAU,CAAE1O,KAAQ,UAAW7G,QAAW,SAAUuZ,MAAS,CAAC,CAAEpD,eAAkB,UAAWgD,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhD,eAAkB,UAAWgD,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAA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CA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAEEC,EAAe,CACjB,OACA,QACA,SACA,MACA,YACA,UACA,YACA,eACA,mBACA,QACA,cACA,UACA,QACA,kBACA,QACA,gBACA,iBACA,aACA,mBACA,kBACA,OACA,gBACA,eACA,gBACA,cACA,YACA,YACA,cACA,UACA,YACA,UACA,YACA,eAEAF,EAAMG,SAASJ,GACfF,GAA0B,EAErBI,EAASE,SAASJ,IACvBF,GAA0B,EAC1B/a,EAAuB,KAAIkb,EAAMC,EAASjZ,WAAU1wB,GAAKA,IAAMypC,MAE1DG,EAAaC,SAASJ,KACT,YAAbA,GAAuC,UAAbA,GAAoC,gBAAVnnB,KAGrDinB,GAA0B,EAC1B/a,EAAuB,KAAIkb,EAAME,EAAalZ,WAAU1wB,GAAKA,IAAMypC,KAGvG,CACA,CACA,CAEgBF,GACApgD,EAAO2B,4BAA6B,EACpC0rC,GAAK6J,IACL90C,EAAmB,GACnBqc,EAAao2B,cAAgB,CAAC,kBAGI,MAA9Bp2B,EAAao2B,eAAyBp2B,EAAao2B,cAAczzC,OAAS,IAC1EpB,EAAO2B,4BAA6B,EACpC0rC,GAAK6H,IAGzB,CAEQ,GADA53C,KAAKg0C,MAAQ,EACctmB,MAAvBm1B,EAAkB,MAAgB,CAClC,MAAMQ,EAAgB,CAClB,YAAa,qBACb,YAAa,qBACb,kBAAmB,qBACnB,kBAAmB,qBACnBC,OAAU,WAERC,EAAmD71B,MAAtC21B,EAAcR,EAAkB,OAAmBQ,EAAcR,EAAkB,OAAKA,EAAkB,MACvH7O,EAAQtxC,EAAOqP,OAAOk4B,WAAU+J,GAASA,EAAM9uC,MAAQq+C,IAG7D,IAFc,GAAVvP,IACAh0C,KAAKg0C,MAAQA,GACbh0C,KAAKg0C,OAAStxC,EAAOqP,OAAmB,WAAU,OAAEvM,OACnBkoB,MAA7Bm1B,EAAwB,YACxB,IAAK,IAAIp3C,KAAKo3C,EAAwB,YAAE3wC,OACpClS,KAAKiwC,YAAYxkC,GAAKo3C,EAAwB,YAAEp3C,EAIxE,CACQ,GAAyBiiB,MAArBm1B,EAAgB,IAChB,GAAkC,iBAAtBA,EAAiB,IACzB7iD,KAAKmV,KAAQ0tC,EAAgB,IAAI,OAAU,GAAKngD,EAAOwP,KAAKpO,YAE3D,GAAkC,iBAAtB++C,EAAiB,IAAe,CAC7C,MAAM1tC,EAAM0tC,EAAgB,IAC5B,GAAY,OAAR1tC,EACAnV,KAAKmV,IAAM,EACXnV,KAAKk3B,OAAS,OAEb,GAAY,sBAAR/hB,EACLnV,KAAKmV,IAAM,EACXnV,KAAKk3B,QAAU,OAEd,GAAY,OAAR/hB,EACLnV,KAAKmV,IAAM,EACXnV,KAAKk3B,QAAU,OAEd,GAAY,eAAR/hB,EACLnV,KAAKmV,IAAM,EACXnV,KAAKk3B,QAAU,MAEd,CACD,MAAMssB,EAASruC,EAAI2rC,OAAO,GAAG2C,cACvBC,EAASvuC,EAAI2rC,OAAO,GAAGhlB,cAG7B,IAAIt2B,EAFc,CAAEm+C,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAG3yB,EAAK,EAAG4yB,EAAK,IAEnDR,GACtB,MAAM9rC,EAFgB,CAAE,IAAK,EAAG,IAAK,EAAGkY,GAAM,EAAG,KAAM,GAE1B8zB,GAChBh2B,MAATloB,IACckoB,MAAVhW,IACAlS,GAASkS,GACTlS,EAAQ,IACRA,GAAS,IACbA,GAAgB,GAChBxF,KAAKmV,IAAM3P,EAEnC,CACA,CAE4CkoB,MAAhCm1B,EAA2B,iBAC3B7iD,KAAKmxC,MAAQ7b,EAAM5yB,EAAO4P,SAAU5P,EAAO6P,SAAW,EAAkC,EAA/BswC,EAA2B,iBAEzDn1B,MAA3Bm1B,EAAsB,YACtB7iD,KAAKk3B,OAAS5B,EAAM5yB,EAAO8P,UAAW9P,EAAO+P,UAAY,EAA6B,EAA1BowC,EAAsB,YAEtF,IAAIpa,EAAqB,EACG/a,MAAxBm1B,EAAmB,SACnBpa,EAAqBnT,EAAM,EAAG,GAA2B,EAAvButB,EAAmB,SAExBn1B,MAA7Bm1B,EAAwB,cACxB7iD,KAAKm8B,YAAczwB,KAAKO,IAAIvJ,EAAO0Q,eAAgB1H,KAAKQ,IAAIxJ,EAAO2Q,eAA4C,EAA5BwvC,EAAwB,eAE/G,IAAIlnB,EAAuB,EACOjO,MAA9Bm1B,EAAyB,eACzBlnB,EAAqD,EAA7BknB,EAAyB,cAAU,EAC3D7iD,KAAKm7B,OAASz4B,EAAOoR,QAAQm2B,WAAU9O,GAAUA,EAAOpnB,cAAgB4nB,KACpD,GAAhB37B,KAAKm7B,SACLn7B,KAAKm7B,OAAS,IAGUzN,MAA5Bm1B,EAAuB,WACvB7iD,KAAKywC,WAAa/kC,KAAKO,IAAI,EAAKP,KAAKQ,IAAI,EAAK22C,EAAuB,YAAK,IAG1E7iD,KAAKywC,WAAa,EAEc/iB,MAAhCm1B,EAA2B,eAC3B7iD,KAAKswC,eAAiB5kC,KAAKO,IAAI,EAAKP,KAAKQ,IAAI,EAAK22C,EAA2B,gBAAK,IAGlF7iD,KAAKswC,eAAiB,EAEgB5iB,MAAtCm1B,EAAiC,qBACjC7iD,KAAKqwC,qBAAuB3kC,KAAKO,IAAI,EAAKP,KAAKQ,IAAI,IAAK22C,EAAiC,sBAAK,IAG9F7iD,KAAKqwC,qBAAuB,EAED3iB,MAA3Bm1B,EAAsB,UACtB7iD,KAAKowC,UAAY1kC,KAAKO,IAAI,IAAQP,KAAKQ,IAAI,IAAS22C,EAAsB,WAAK,IAG/E7iD,KAAKowC,UAAY,IAEW1iB,MAA5Bm1B,EAAuB,WACvB7iD,KAAKmwC,WAAazkC,KAAKO,IAAI,EAAKP,KAAKQ,IAAI,GAAM22C,EAAuB,YAAK,IAG3E7iD,KAAKmwC,WAAa,EAEUziB,MAA5Bm1B,EAAuB,WACvB7iD,KAAKwwC,WAAa9kC,KAAKO,IAAI,EAAKP,KAAKQ,IAAI,GAAM22C,EAAuB,YAAK,IAG3E7iD,KAAKwwC,WAAa,EAEgB9iB,MAAlCm1B,EAA6B,iBAC7B7iD,KAAKuwC,iBAAmB7kC,KAAKO,IAAI,EAAKP,KAAKQ,IAAI,MAAO22C,EAA6B,kBAAK,IAGxF7iD,KAAKuwC,iBAAmB,EAEA7iB,MAAxBm1B,EAAmB,OACnB7iD,KAAK4lB,SAAS8V,eAAemnB,EAAmB,QAGhD7iD,KAAK4lB,SAAS0U,QAElB,IAAK,IAAI7uB,EAAI,EAAGA,EAAI/I,EAAOyT,iBAAmB,EAAG1K,IACzCo3C,EAAW,SAAWp3C,GACtBzL,KAAKolC,aAAa35B,GAAKo3C,EAAW,SAAWp3C,GAG7CzL,KAAKolC,aAAa35B,GAAK,KAG/B,IAAIw4C,EAAiB,EACjBC,EAAc,EACdC,EAAU,EACd,GAA8Bz2B,MAA1Bm1B,EAAqB,SACrB,IAAK,MAAMV,KAAiBU,EAAqB,SACzCV,EAA2B,cAC3B8B,EAAiBv4C,KAAKO,IAAIg4C,EAAsD,EAAtC9B,EAA2B,YAAEr+C,SACvEq+C,EAAwB,WACxB+B,EAAcx4C,KAAKO,IAAIi4C,EAAgD,EAAnC/B,EAAwB,SAAEr+C,SAC9Dq+C,EAAwB,WACxBgC,EAAUz4C,KAAKO,IAAIk4C,EAA4C,EAAnChC,EAAwB,SAAEr+C,SAG1B4pB,MAApCm1B,EAA+B,mBAC/B7iD,KAAK0zC,qBAAuBmP,EAA+B,mBAG3D7iD,KAAK0zC,oBAAqB,EAEUhmB,MAApCm1B,EAA+B,mBAC/B7iD,KAAKy7B,qBAAuBonB,EAA+B,mBAG3D7iD,KAAKy7B,mBAAsBwoB,EAAiB,EAEhDjkD,KAAKo0C,mBAAqB1oC,KAAKQ,IAAIg4C,EAAaxhD,EAAO6Q,aACvDvT,KAAKm0C,SAAWzoC,KAAKQ,IAAIi4C,EAASzhD,EAAO6Q,aACVma,MAA3Bm1B,EAAsB,YACtB7iD,KAAKi0C,UAAY3e,EAAM,EAAGt1B,KAAKm0C,SAAoC,EAA1B0O,EAAsB,YAErCn1B,MAA1Bm1B,EAAqB,WACrB7iD,KAAKk0C,WAAa5e,EAAM,EAAGt1B,KAAKm0C,SAAWn0C,KAAKi0C,UAAY,EAA4B,EAAzB4O,EAAqB,WAExF,MAAMuB,EAAmB,GACnBC,EAAmB,GACnBC,EAAiB,GACvB,GAA8B52B,MAA1Bm1B,EAAqB,SACrB,IAAK,IAAIjP,EAAe,EAAGA,EAAeiP,EAAqB,SAAE/+C,OAAQ8vC,IAAgB,CACrF,IAAIuO,EAAgBU,EAAqB,SAAEjP,GAC3C,MAAMnZ,EAAU,IAAIkV,GACpB,IAAI/T,GAAiB,EACjBlB,GAAe,EA4BnB,GA3B6BhN,MAAzBy0B,EAAoB,MACpBvmB,EAA2C,QAAzBumB,EAAoB,KACtCznB,EAAyC,OAAzBynB,EAAoB,MAGpCvmB,EAAkBgY,GAAgB,EAElChY,EACAyoB,EAAiBx3C,KAAK4tB,GAEjBC,EACL4pB,EAAez3C,KAAK4tB,GAGpB2pB,EAAiBv3C,KAAK4tB,GAEc/M,MAApCy0B,EAA+B,kBAC/B1nB,EAAQvD,OAAS5B,EAAM,EAAG5yB,EAAOka,aAAuD,GAAL,EAAnCulC,EAA+B,kBAC3EvmB,IACAnB,EAAQvD,OAAS,IAEIxJ,MAAzBy0B,EAAoB,KACpB1nB,EAAQv1B,KAAOi9C,EAAoB,KAGnC1nB,EAAQv1B,KAAO,GAEfzB,MAAMs4B,QAAQomB,EAA2B,aAAI,CAC7C,MAAMY,EAAoBZ,EAA2B,YACrD,IAAK,IAAI12C,EAAI,EAAGA,EAAIs3C,EAAkBj/C,UAC9B2H,GAAKzL,KAAKyzC,+BAD4BhoC,IAAK,CAG/C,MAAM0W,EAAa,IAAI2iB,GAAWlJ,EAAgBlB,GAClDD,EAAQN,YAAY1uB,GAAK0W,EACzBA,EAAWuZ,eAAeqnB,EAAkBt3C,GAAImwB,EAAgBlB,GAAc,GAAO,EAAO+N,EAAoB5M,EACxI,CACA,CACgB,IAAK,IAAIpwB,EAAI,EAAGA,EAAIzL,KAAKo0C,mBAAoB3oC,IAAK,CAC9C,MAAM6oC,EAAU,IAAIra,GAEpB,IAAIuB,EADJf,EAAQmV,SAASnkC,GAAK6oC,EAElB6N,EAAwB,WACxB3mB,EAAgB2mB,EAAwB,SAAE12C,IACzBiiB,MAAjB8N,GAEJ8Y,EAAQ5Y,eAAeF,EAAex7B,KAAMy6B,EAASkB,EAAsBC,EAAgBlB,EAAcmB,EAC7H,CACgBpB,EAAQmV,SAAS9rC,OAAS9D,KAAKo0C,mBAC/B,IAAK,IAAI3oC,EAAI,EAAGA,EAAIzL,KAAKm0C,SAAU1oC,IAC/BgvB,EAAQoV,KAAKpkC,GAAmCiiB,MAA7By0B,EAAwB,SAAkBz2C,KAAKQ,IAAIlM,KAAKo0C,mBAAoB+N,EAAwB,SAAE12C,KAAO,GAAK,EAEzIgvB,EAAQoV,KAAK/rC,OAAS9D,KAAKm0C,QAC3C,CAEYiQ,EAAiBtgD,OAASpB,EAAO0Z,uBACjCgoC,EAAiBtgD,OAASpB,EAAO0Z,sBACjCioC,EAAiBvgD,OAASpB,EAAO4Z,uBACjC+nC,EAAiBvgD,OAASpB,EAAO4Z,sBACjCgoC,EAAexgD,OAASpB,EAAO8Z,qBAC/B8nC,EAAexgD,OAASpB,EAAO8Z,oBACnCxc,KAAKszC,kBAAoB8Q,EAAiBtgD,OAC1C9D,KAAKuzC,kBAAoB8Q,EAAiBvgD,OAC1C9D,KAAKwzC,gBAAkB8Q,EAAexgD,OACtC9D,KAAKkwC,SAASpsC,OAAS,EACvBL,MAAM2zC,UAAUvqC,KAAK5L,MAAMjB,KAAKkwC,SAAUkU,GAC1C3gD,MAAM2zC,UAAUvqC,KAAK5L,MAAMjB,KAAKkwC,SAAUmU,GAC1C5gD,MAAM2zC,UAAUvqC,KAAK5L,MAAMjB,KAAKkwC,SAAUoU,GACtC5hD,EAAO2B,6BACPo7C,OAAOC,SAASriB,KAAOr9B,KAAKw0C,iBAC5BmL,YAAW,KAAQD,SAASE,QAAQ,GAAK,IAErD,CACI,UAAA2E,CAAW3Q,EAAcW,GACrB,GAAIA,EAAM,GAAKA,GAAOv0C,KAAKm0C,SACvB,OAAO,KACX,MAAMmL,EAAet/C,KAAKkwC,SAAS0D,GAAc/D,KAAK0E,GACtD,OAAoB,GAAhB+K,EACO,KACJt/C,KAAKkwC,SAAS0D,GAAchE,SAAS0P,EAAe,EACnE,CACI,iBAAAkF,GACI,OAAOxkD,KAAKmxC,KACpB,CACI,oBAAOqE,CAAciP,GACjB,OAAO,GAAK/4C,KAAKwC,MAAMxC,KAAKoV,KAAK2jC,EAAW,GAAK,EACzD,CACI,sBAAA/H,GACI18C,KAAKuwC,iBAAmB,EACxBvwC,KAAKwwC,WAAa,EAClBxwC,KAAKowC,UAAY,IACjBpwC,KAAKmwC,WAAa,EAClBnwC,KAAKswC,eAAiB,EACtBtwC,KAAKqwC,qBAAuB,EAC5BrwC,KAAKywC,WAAa,CAC1B,EAEAV,GAAKsS,EAAU3/C,EAAOoP,WACtBi+B,GAAKwI,EAAwB,EAC7BxI,GAAKuI,EAAwB,EAC7BvI,GAAK0I,EAAwB,EAC7B1I,GAAKyI,EAAwB,EAC7BzI,GAAK4I,EAAwB,EAC7B5I,GAAK2I,EAAwB,EAC7B3I,GAAK8I,EAAyB,EAC9B9I,GAAK6I,EAAyB,EAC9B7I,GAAK+I,EAA4B,EACjC/I,GAAK4E,EAA4B,EACjC5E,GAAK2E,EAAW,IAChB,MAAMgQ,GACF,WAAAtjD,GACIpB,KAAK2kD,UAAY,KACjB3kD,KAAK4kD,SAAW,EAChB5kD,KAAK6kD,cAAgB,EACrB7kD,KAAK8kD,gBAAkB,EACvB9kD,KAAK+kD,qBAAuB,EAC5B/kD,KAAKglD,gBAAkB,EACvBhlD,KAAKilD,qBAAuB,EAC5BjlD,KAAKklD,gBAAkB,EACvBllD,KAAKmlD,qBAAuB,EAC5BnlD,KAAKolD,gBAAkB,EACvBplD,KAAKqlD,qBAAuB,EAC5BrlD,KAAKslD,gBAAkB,EACvBtlD,KAAKulD,qBAAuB,EAC5BvlD,KAAKs6B,OACb,CACI,KAAAA,GACIt6B,KAAKwlD,YAAc,EACnBxlD,KAAKylD,cAAgB,EACrBzlD,KAAK0lD,iBAAmB,EACxB1lD,KAAK2lD,oBAAsB,EAC3B3lD,KAAK4lD,yBAA2B,EAChC5lD,KAAK6lD,wBAA0B,EAC/B7lD,KAAK8lD,wBAA0B,EAC/B9lD,KAAK+lD,sBAAwB,EAC7B/lD,KAAKgmD,iBAAmB,EACxBhmD,KAAKimD,iBAAmB,CAChC,CACI,MAAAC,CAAOxZ,EAAOyZ,EAAiBC,EAAMC,EAAaC,EAAuBC,EAAkBC,EAAgBC,GACvG,MAAMC,EAAgB,EAAMh7C,KAAKE,GAAKlJ,EAAOic,iCAAmC+tB,EAAMia,iBAChFX,EAAkBhmD,KAAKgmD,gBACvBY,EAAkBR,EAAKS,YAAYR,GACnCS,EAAkBV,EAAKW,iBAAiBV,GACxCW,EAAgBJ,EAAkBl7C,KAAKuC,IAAI64C,EAAiBR,GAC5DW,EAAkC,EAAVv7C,KAAKE,GAAWg7C,EACxCM,EAAgC,EAAVx7C,KAAKE,GAAWo7C,EACtCG,EAA8C,EAAxBF,EACtBG,EAA0C,EAAtBF,EACpBG,EAAsB37C,KAAKQ,IAAIR,KAAKE,GAAIq7C,EAAwBvkD,EAAOmc,+BAAiCnT,KAAKuC,IAAIy4C,EAAgBO,EAAuBvkD,EAAOkc,kCAC/J0oC,EAAoB57C,KAAKQ,IAAIR,KAAKE,GAAIs7C,EAAsBxkD,EAAOmc,+BAAiCnT,KAAKuC,IAAIy4C,EAAgBQ,EAAqBxkD,EAAOkc,kCACzJ2oC,EAAe,EAAM77C,KAAKE,GAAKlJ,EAAOoc,oBAAsB4tB,EAAMia,iBAClEa,GAAmB97C,KAAKuC,IAAI,IAAOs4C,GAAoB,GAAO,GAC9DkB,GAAiB/7C,KAAKuC,IAAI,IAAOu4C,GAAkB,GAAO,GAC1DkB,EAA0B,GAAfjB,EAAmB,IAAO,EACrCkB,EAAsB,KACtBC,EAAwB,EAAMlb,EAAMia,iBAAmB,KACvDkB,EAAiBn8C,KAAKuC,IAAI,GAAKu5C,EAAkB97C,KAAKuC,IAAIs5C,GAAgBN,EAAwBU,GAAuB,EAAM,EAAMD,GAAaC,GAClJG,EAAep8C,KAAKuC,IAAI,GAAKw5C,EAAgB/7C,KAAKuC,IAAIs5C,GAAgBL,EAAsBS,GAAuB,EAAM,EAAMD,GAAaC,GAC5II,EAAuBr8C,KAAKuC,IAAI45C,EAAgB,MAChDG,EAAqBt8C,KAAKuC,IAAI65C,EAAc,MAClDrqB,GAAMwqB,4BAA4Bx3B,gCAAgC42B,GAClE3a,EAAMwb,sBAAsBn2B,QAAQ0L,GAAMwqB,4BAA6Bd,GACvE,MAAMgB,EAAgB1qB,GAAMwqB,4BAA4Br4B,EAAE,GACpDw4B,GAA0B1b,EAAMwb,sBAAsBr1B,QAAUs0B,EACtE1pB,GAAM4qB,0BAA0B53B,gCAAgC62B,GAChE5a,EAAMwb,sBAAsBn2B,QAAQ0L,GAAM4qB,0BAA2BjB,GACrE,MAAMkB,EAAc7qB,GAAM4qB,0BAA0Bz4B,EAAE,GAChD24B,GAAwB7b,EAAMwb,sBAAsBr1B,QAAUu0B,EAC9DoB,EAAgC,GAAf/B,EAAmB,EAAI,EAC9C,GAAsB,GAAlB+B,EAAqB,CACrB,MAAMC,EAAiB/8C,KAAKuC,IAAI45C,EAAgBnlD,EAAOuc,iBACjDypC,EAAeh9C,KAAKuC,IAAI65C,EAAcplD,EAAOuc,iBACnDwe,GAAMwqB,4BAA4B/2B,kBAAkBq2B,EAAckB,EAAgB,IAClFhrB,GAAM4qB,0BAA0Bn3B,kBAAkBq2B,EAAcmB,EAAc,GAC1F,KACa,CACD,MAAMC,EAAiBj9C,KAAKuC,IAAsB,GAAlBu6C,EAAsB,EAAM,EAAK,KAC3DI,EAAoCl9C,KAAKuC,IAAI25C,EAAwBA,EAAwBX,EAAwB,IAAM,KAAQva,EAAMia,iBAAkB,GAAMe,GAAYE,EAAwBl8C,KAAKuC,IAAIu5C,EAAiB,IAC/NqB,EAAkCn9C,KAAKuC,IAAI25C,EAAwBA,EAAwBV,EAAsB,IAAM,KAAQxa,EAAMia,iBAAkB,GAAMe,GAAYE,EAAwBl8C,KAAKuC,IAAIw5C,EAAe,IACzNqB,EAAoCF,EAAoCl9C,KAAKuC,IAAI,EAAK,GAAM,MAAQ,EAAMvC,KAAKuC,IAAI,EAAM06C,EAAgB,OACzII,EAAkCF,EAAkCn9C,KAAKuC,IAAI,EAAK,GAAM,MAAQ,EAAMvC,KAAKuC,IAAI,EAAM06C,EAAgB,OACrIK,EAA2Bt9C,KAAKuC,IAAI,GAAMvC,KAAKuC,IAAI,GAAMvC,KAAKuC,IAAI06C,EAAgB,MAClFM,EAAyBv9C,KAAKuC,IAAI,GAAMvC,KAAKuC,IAAI,GAAMvC,KAAKuC,IAAI06C,EAAgB,MACtFlrB,GAAMwqB,4BAA4Br3B,2BAA2BmD,EAAsB+0B,GAAoCE,GACvHvrB,GAAM4qB,0BAA0Bz3B,2BAA2BmD,EAAsBg1B,GAAkCE,EAC/H,CACQvc,EAAMwb,sBAAsBn2B,QAAQ0L,GAAMwqB,4BAA6Bd,GACvE,MAAM+B,EAAuBzrB,GAAMwqB,4BAA4Bt4B,EAAE,GAC3Dw5B,EAAuB1rB,GAAMwqB,4BAA4Bt4B,EAAE,GAC3Dy5B,EAAuB3rB,GAAMwqB,4BAA4Br4B,EAAE,GAAKm4B,EAChEsB,EAAuB5rB,GAAMwqB,4BAA4Br4B,EAAE,GAAKm4B,EAChEuB,EAAuB7rB,GAAMwqB,4BAA4Br4B,EAAE,GAAKm4B,EAChEwB,GAAgC7c,EAAMwb,sBAAsBr1B,QAAUs0B,EAC5Eza,EAAMwb,sBAAsBn2B,QAAQ0L,GAAM4qB,0BAA2BjB,GACrE,MAAMoC,EAAqB/rB,GAAM4qB,0BAA0B14B,EAAE,GACvD85B,EAAqBhsB,GAAM4qB,0BAA0B14B,EAAE,GACvD+5B,EAAqBjsB,GAAM4qB,0BAA0Bz4B,EAAE,GAAKo4B,EAC5D2B,EAAqBlsB,GAAM4qB,0BAA0Bz4B,EAAE,GAAKo4B,EAC5D4B,EAAqBnsB,GAAM4qB,0BAA0Bz4B,EAAE,GAAKo4B,EAC5D6B,GAA8Bnd,EAAMwb,sBAAsBr1B,QAAUu0B,EACpE0C,EAAoB,EAAMlD,EAC1BmD,EAAkB,EAAM/C,EACxBgD,EAAkBt+C,KAAKoV,KAAoD,EAA/CpV,KAAKO,IAAI69C,EAAmBC,IACxDE,EAAcH,EAAoB1B,EAAyBmB,EAC3DW,EAAiBH,EAAkBxB,EAAuBsB,EAChE7pD,KAAKgmD,gBAAkBiE,EACvBjqD,KAAKmqD,kBAAoBD,EAAiBD,GAAe3D,EACzDtmD,KAAK4kD,SAAWuD,EAChBnoD,KAAK8kD,gBAAkBoE,EACvBlpD,KAAKglD,gBAAkBmE,EACvBnpD,KAAKklD,gBAAkBkE,EACvBppD,KAAKolD,gBAAkBiE,EACvBrpD,KAAKslD,gBAAkBgE,EACvBtpD,KAAK6kD,eAAiByD,EAAcH,GAAiB7B,EACrDtmD,KAAK+kD,sBAAwByE,EAAqBN,GAAwB5C,EAC1EtmD,KAAKilD,sBAAwBwE,EAAqBN,GAAwB7C,EAC1EtmD,KAAKmlD,sBAAwBuE,EAAqBN,GAAwB9C,EAC1EtmD,KAAKqlD,sBAAwBsE,EAAqBN,GAAwB/C,EAC1EtmD,KAAKulD,sBAAwBqE,EAAqBN,GAAwBhD,EAC1E,MAAM8D,EAAe1+C,KAAKY,IAAIZ,KAAK6D,KAAK06C,EAAcjE,IAAoB,IACpEqE,IAA2C,GAApBrqD,KAAKwlD,YAAoB4E,EACtD,GAAsB,MAAlBpqD,KAAK2kD,WAAqB3kD,KAAK2kD,UAAU7gD,QAAUkmD,EAAiB,CACpE,MAAMM,EAAsB5+C,KAAKoV,KAAK,EAAI4rB,EAAMia,iBAAmB7hB,GAAWkK,mBAAmB,KAC3Fub,EAAe,IAAIh/C,aAAakyB,GAAMC,kBAAkBhyB,KAAKO,IAAIq+C,EAAqBN,KAC5F,IAAKK,IAAyC,MAAlBrqD,KAAK2kD,UAAmB,CAChD,MAAM6F,EAAsBxqD,KAAK2kD,UAAU7gD,OAAS,GAAM,EACpD2mD,EAAwBzqD,KAAKwlD,WAAaxlD,KAAKimD,iBACrDjmD,KAAKwlD,WAAaxlD,KAAK2kD,UAAU7gD,OAAS9D,KAAKimD,iBAC/C,IAAK,IAAIx6C,EAAI,EAAGA,EAAIzL,KAAK2kD,UAAU7gD,OAAQ2H,IACvC8+C,EAAa9+C,GAAKzL,KAAK2kD,UAAW8F,EAAwBh/C,EAAK++C,EAEnF,CACYxqD,KAAK2kD,UAAY4F,CAC7B,CACQ,MAAM5F,GAAY3kD,KAAK2kD,UACjB+F,GAAmB/F,GAAU7gD,OAAS,GAAM,EAClD,GAAIumD,GAAqB,CACrBrqD,KAAKwlD,WAAa,EAClBxlD,KAAKylD,cAAgB,EACrBzlD,KAAK0lD,iBAAmB,EACxB1lD,KAAK2lD,oBAAsB,EAC3B3lD,KAAK4lD,yBAA2B,EAChC5lD,KAAK6lD,wBAA0B,EAC/B7lD,KAAK8lD,wBAA0B,EAC/B9lD,KAAK+lD,sBAAwB,EAC7B,MAAM4E,GAAoBV,EACpBW,EAAiBl/C,KAAK4F,MAAMq5C,EAAmBb,EAAoB,GACnEe,EAAcn/C,KAAKoV,KAAK8pC,EAAqC,EAApBd,GAC/C9pD,KAAKimD,iBAAmB4E,EACxB,IAAK,IAAIp/C,EAAIm/C,EAAgBn/C,GAAKo/C,EAAap/C,IAC3Ck5C,GAAUl5C,EAAIi/C,IAAmB,EAErC,MAAMI,EAAc3E,EAAgB76C,KAC9By/C,EAAoBD,EAAYhnD,OAAS,EACzCknD,EAAoBD,EAAoBjB,EACxCmB,EAAev/C,KAAKQ,IAAwB,GAApB49C,EAAkD,KAAzBpd,EAAMia,kBACvDuE,EAAyBx/C,KAAKoV,KAAK6pC,GACnCQ,EAAgBR,EAAmBb,EAAoBmB,EACvDG,EAAsBD,EAC5B,IAAIE,GAAgBH,EAAyBP,GAAoBK,EAC7DM,EAAmB,EACvB,IAAK,IAAI7/C,EAAIy/C,EAAwBz/C,GAAK2/C,EAAqB3/C,IAAK,CAChE,MAAM8/C,EAAiC,EAAfF,EAClB7lD,EAAQ+lD,EAAkBR,EAChC,IAAIS,EAAmBV,EAAYtlD,GACnC,MAAMimD,EAAaJ,EAAeE,EAClCC,IAAqBV,EAAYtlD,EAAQ,GAAKgmD,GAAoBC,EAClE,MAAMC,GAAUF,EAAmBF,GAAoBN,EAGjDW,EAFSjgD,KAAKQ,IAAI,GAAMT,EAAIk/C,GAAoBM,GACtCv/C,KAAKQ,IAAI,GAAMi/C,EAAgB1/C,GAAKw/C,GAE9CW,EAAaD,EAAeA,GAAgB,EAAM,EAAMA,GAC9DhH,GAAUl5C,EAAIi/C,KAAoBgB,EAASE,EAC3CN,EAAmBE,EACnBH,GAAgBL,CAChC,CACA,CACA,EAEA,MAAMa,GACF,WAAAzqD,GACIpB,KAAK8rD,iBAAmB,GACxB9rD,KAAK+rD,yBAA2B,EAChC/rD,KAAKgsD,eAAiB,GACtBhsD,KAAKisD,uBAAyB,EAC9BjsD,KAAKksD,eAAiB,EACtBlsD,KAAKmsD,aAAe,EACpBnsD,KAAKosD,cAAgB1pD,EAAOoV,YAC5B9X,KAAKqsD,YAAc3pD,EAAOoV,YAC1B9X,KAAKssD,aAAe5pD,EAAOoV,YAC3B9X,KAAKusD,aAAe7pD,EAAOoV,YAC3B9X,KAAKwsD,EAAiB9pD,EAAOoV,YAC7B9X,KAAKysD,qBAAuB,GAC5BzsD,KAAK0sD,6BAA+B,EACpC1sD,KAAK2sD,mBAAqB,GAC1B3sD,KAAK4sD,2BAA6B,EAClC5sD,KAAK6sD,mBAAqB,EAC1B7sD,KAAK8sD,iBAAmB,EACxB9sD,KAAK+sD,EAAqBrqD,EAAOoV,YACjC9X,KAAKgtD,YAAc,GACnBhtD,KAAKitD,2BAA6B,EAClCjtD,KAAKktD,yBAA2B,EAChCltD,KAAKmtD,gBAAiB,EACtBntD,KAAKotD,cAAe,EACpBptD,KAAKqtD,gBAAiB,EACtBrtD,KAAKstD,cAAe,EACpBttD,KAAKutD,oBAAsB,EAC3BvtD,KAAKwtD,kBAAoB,EACzBxtD,KAAKytD,oBAAsB,EAC3BztD,KAAK0tD,kBAAoB,EACzB1tD,KAAK2tD,qBAAuB,KAC5B3tD,KAAK4tD,yBAA2B,KAChC5tD,KAAK6tD,kBAAoB,KACzB7tD,KAAK8tD,eAAiB,GACtB9tD,KAAK+tD,aAAe,GACpB/tD,KAAKguD,EAA2B,GAChChuD,KAAKiuD,EAAyB,EAC9BjuD,KAAKkuD,qCAAuC,EAE5C,IAAK,IAAIziD,EAAI,EAAGA,EADD,GACaA,IACxBzL,KAAK8tD,eAAeriD,GAAK,EACzBzL,KAAK+tD,aAAatiD,GAAK,EAE3BzL,KAAKs6B,OACb,CACI,KAAAA,GACI,IAAK,IAAIiV,EAAgB,EAAGA,EAAgB7sC,EAAO6c,iBAAmB,EAAGgwB,IACrEvvC,KAAKgsD,eAAezc,GAAiB,EACrCvvC,KAAK2sD,mBAAmBpd,GAAiB,EAE7CvvC,KAAKisD,uBAAyB,EAC9BjsD,KAAKmsD,aAAe,EACpBnsD,KAAKwsD,EAAiB9pD,EAAOoV,YAC7B9X,KAAK4sD,2BAA6B,EAClC5sD,KAAK8sD,iBAAmB,EACxB9sD,KAAK+sD,EAAqBrqD,EAAOoV,YACjC9X,KAAKiuD,EAAyB,EAC9BjuD,KAAKitD,2BAA6B,EAClCjtD,KAAKktD,yBAA2B,EAChCltD,KAAK2tD,qBAAuB,KAC5B3tD,KAAK4tD,yBAA2B,KAChC5tD,KAAK6tD,kBAAoB,IACjC,CACI,gBAAAM,CAAiBhsC,EAAYisC,EAAaC,EAAeC,EAAmBC,EAAgBnI,EAAMoI,EAAWrI,EAAiBzZ,EAAOkH,EAAcf,GAC/I,MAAM4b,EAAyBF,EACzB1oC,EAAa1D,EAAWqtB,gBAC9B,GAAY,MAAR4W,GAAgBA,EAAKsI,cAAgB7oC,EAAWjP,YAAcwvC,EAAKuI,qBAAsB,CACzF3uD,KAAK4sD,2BAA6B5sD,KAAKisD,uBACvCjsD,KAAK8sD,iBAAmB9sD,KAAKmsD,aAC7BnsD,KAAK+sD,EAAqB/sD,KAAKwsD,EAC/BxsD,KAAKisD,uBAAyB,EAC9BjsD,KAAKmsD,aAAe,EACpB,IAAK,IAAI5c,EAAgB,EAAGA,EAAgB7sC,EAAO6c,iBAAmB,EAAGgwB,IACrEvvC,KAAK2sD,mBAAmBpd,GAAiBvvC,KAAKgsD,eAAezc,GAC7DvvC,KAAKgsD,eAAezc,GAAiB,CAErD,CACoB,MAAR6W,IACiB,MAAbA,EAAK/rB,KACLr6B,KAAKwsD,EAAiBpG,EAAK/rB,KAAKpB,KAAKmtB,EAAK/rB,KAAKpB,KAAKn1B,OAAS,GAAG4qB,KAGhE1uB,KAAKwsD,EAAiB9pD,EAAOoV,aAGrC,MAAMk1C,EAAc,GACd4B,EAAkBN,EAAoB,EACtCxC,EAAmB,GACnBC,EAA2B/rD,KAAKisD,uBAChCD,EAAiB,GACjBC,EAAyBF,EAA2B0C,EACpDvC,EAAiBlsD,KAAKmsD,aACtBA,EAAeD,EAAiB,EAChCO,EAAuB,GACvBE,EAAqB,GACrBD,EAA+B1sD,KAAK4sD,2BACpCA,EAA6BF,EAA+B+B,EAC5D5B,EAAqB7sD,KAAK8sD,iBAC1BA,EAAmBD,EAAqB,EACxCgC,EAAe,GAAOnsD,EAAOkR,aAAelR,EAAOiR,cACnDm7C,EAAgB,GAChBC,EAAc,GACpB,IAAI3C,EAAgBpsD,KAAKwsD,EACrBH,EAAcrsD,KAAKwsD,EACnBF,EAAetsD,KAAK+sD,EACpBR,EAAe,EACfY,GAAiB,EACjBC,GAAe,EACfC,GAAiB,EACjBC,GAAe,EACfC,EAAsB,EACtBC,EAAoB,EACpBC,EAAsB,EACtBC,EAAoB,EAKxB,GAJY,MAARtH,IACApmD,KAAK2tD,qBAAuB,KAC5B3tD,KAAK4tD,yBAA2B,MAExB,MAARxH,GAA6B,MAAbA,EAAK/rB,OAAiB+rB,EAAK4I,gBAAiB,CAC5D,MAAMh1B,EAAcosB,EAAK/rB,KAAKP,eAAes0B,GACvCa,EAAW7I,EAAK/rB,KAAKpB,KAAKe,EAAc,GACxCk1B,EAAS9I,EAAK/rB,KAAKpB,KAAKe,GACxBm1B,GAAgB/I,EAAK/rB,KAAKzG,MAAQq7B,EAASr2B,MAAQl2B,EAAOkR,cAC/B,MAA7B5T,KAAK2tD,uBAAmC9nC,EAAWjP,YAAaiP,EAAWhP,QAAYuvC,EAAK4I,mBAC5FhvD,KAAK2tD,qBAAuBwB,EAAeziB,EAAM0iB,wBAAuB,KACvC,MAAjCpvD,KAAK4tD,0BAAoCxH,EAAK4I,mBAC9ChvD,KAAK4tD,yBAA2B5tD,KAAKqvD,cAAcltC,EAAYikC,EAAMD,GAAiB,IACrFC,EAAK4I,kBACNhvD,KAAK6tD,kBAAoB7tD,KAAKqvD,cAAcltC,EAAYikC,EAAMD,GAAiB,IACnF,MAAMmJ,GAAclJ,EAAK/rB,KAAKzG,MAAQs7B,EAAOt2B,MAAQl2B,EAAOkR,aACtD27C,GAAcjB,EAAoBa,IAAiBG,EAAaH,GAChEK,GAAYZ,EAAkBO,IAAiBG,EAAaH,GAGlE,GAFA/C,EAAgB6C,EAASvgC,MAAQwgC,EAAOxgC,KAAOugC,EAASvgC,MAAQ6gC,EAChElD,EAAc4C,EAASvgC,MAAQwgC,EAAOxgC,KAAOugC,EAASvgC,MAAQ8gC,EAC1D3pC,EAAWhP,OAAQ,CACnB,MAAM44C,EAAgBrJ,EAAKsJ,cAAgBhtD,EAAOkR,aAC5C+7C,EAAcvJ,EAAKwJ,YAAcltD,EAAOkR,aAExCi8C,EAAsC,IADpBF,EAAcF,GAEhC34C,EAAapL,KAAKQ,IAAI2jD,EAAmBhqC,EAAW/O,YACrC,MAAjBsvC,EAAK0J,UAAqB1J,EAAKuI,uBAC3BL,EAAoBmB,EAAgB34C,IACpCq2C,GAAiB,EACjBI,EAAsB,IAAO,GAAOe,EAAoBmB,GAAiB34C,IAEzE83C,EAAkBa,EAAgB34C,IAClCs2C,GAAe,EACfI,EAAoB,IAAO,GAAOoB,EAAkBa,GAAiB34C,KAGxD,MAAjBsvC,EAAK2J,UAAqB3J,EAAK4J,qBAC/BzD,EAAenG,EAAK2J,SAAS92B,KAAK,GAAGvK,KACjCihC,EAAcrB,EAAoBx3C,IAClCu2C,GAAiB,EACjBI,EAAsB,IAAO,GAAOkC,EAAcrB,GAAqBx3C,IAEvE64C,EAAcf,EAAkB93C,IAChCw2C,GAAe,EACfI,EAAoB,IAAO,GAAOiC,EAAcf,GAAmB93C,IAG3F,CACA,CACQ,IAAIo3C,EAAuC,EACvC+B,GAAe,EACnB,IAAK,IAAI1gB,EAAgB,EAAGA,GAAiBptB,EAAWqjB,cAAe+J,IAAiB,CACpF,IAAIH,EACA8gB,EACAjpC,EACAza,GAAU,EACV2jD,GAAa,EACb5nC,EAAmB,EACnB6nC,EAAsB,EACtB/oC,EAAgBkB,EAAmB6nC,EACnC5nC,EAAwB,EACxBC,EAAwB,EACxB4nC,EAAiB,EACjB3jC,EAAQ,EACRC,EAAO,EACPnF,EAAW,EACXmmC,EAAuB3tD,KAAK2tD,sBAAwB,EACpD2C,EAAetwD,KAAK4tD,0BAA4B,EACpD,GAAIre,GAAiBptB,EAAWqjB,cAAe,CAC3C,GAAIyqB,EACA,MACJ7gB,EAAmB1sC,EAAO+c,4BAA4B/Z,WAAuB,WAC7EwqD,EAAc,EACdjpC,EAAWvkB,EAAOoY,aAAapV,WAAW,YAC1D,KACiB,CACD,IAAIypC,EAAmBhtB,EAAWvH,UAAU20B,GAC5CH,EAAmB1sC,EAAO+c,4BAA4B0vB,EAAiBnoB,QACvEkpC,EAAc/gB,EAAiB3pC,MAC/ByhB,EAAWvkB,EAAOoY,aAAaq0B,EAAiBloB,UAChDza,EAAU2V,EAAWvH,UAAU20B,GAAe/iC,QAC9C2jD,EAAahuC,EAAWvH,UAAU20B,GAAeviB,SACjDzE,EAAmBpG,EAAWvH,UAAU20B,GAAehnB,iBACvD6nC,EAAsB1kD,KAAKuC,IAAIkU,EAAWkF,cAAe,GAAK,IAC9DA,EAAgBkB,EAAmB6nC,EACnC5nC,EAAwBrG,EAAWvH,UAAU20B,GAAe/mB,sBAC5DC,EAAwBtG,EAAWvH,UAAU20B,GAAe9mB,sBACxDikB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,mCAAmCF,MAAOouC,EAAcf,IAAkF,MAA9D1wB,EAAWvH,UAAU20B,GAAe9K,yBAC/Jjc,EAAwBrG,EAAWvH,UAAU20B,GAAe9K,wBAE5DiI,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,mCAAmCF,MAAOouC,EAAcf,IAAkF,MAA9D1wB,EAAWvH,UAAU20B,GAAe7K,yBAC/Jjc,EAAwBtG,EAAWvH,UAAU20B,GAAe7K,wBAE1Dlc,GAAyBC,IAC3BD,EAAwB,EACxBC,EAAwB,GAE5B4nC,EAAiB3jB,EAAM0iB,yBACvB1iC,EAAQvK,EAAWvH,UAAU20B,GAAe7iB,MAC5CC,EAAOxK,EAAWvH,UAAU20B,GAAe5iB,KACvCxK,EAAWvH,UAAU20B,GAAe/nB,WAA8B,OAAjBP,EAAS/hB,KAAgB,EAAI,KAC9Eid,EAAWvH,UAAU20B,GAAe/nB,SAAW,GAEnDA,EAAWrF,EAAWvH,UAAU20B,GAAe/nB,SAC1CgnC,EAAUjf,KACXif,EAAUjf,GAAiB,GAC/B,MAAMihB,EAAuBjC,EAAiBC,EAAUjf,GACnD8e,EAAc9e,KACf8e,EAAc9e,GAAiB,GACnCyd,EAAYzd,GAAiB8e,EAAc9e,GAAiB8e,EAAc9e,GAAiBif,EAAUjf,GAAiBif,EAAUjf,GAChIuc,EAAiBvc,GAAiBvvC,KAAKgsD,eAAezc,GAAiBvvC,KAAKgsD,eAAezc,GAAiB,EAC5Gkd,EAAqBld,GAAiBvvC,KAAK2sD,mBAAmBpd,GAAiBvvC,KAAK2sD,mBAAmBpd,GAAiB,EACxHyc,EAAezc,GAAiBuc,EAAiBvc,GAAiBuc,EAAiBvc,GAAiBihB,EAAuBA,EAC3H7D,EAAmBpd,GAAiBkd,EAAqBld,GAAiBkd,EAAqBld,GAAiBihB,EAAuBA,EACvI1B,EAAcvf,GAAiB8e,EAAc9e,GAAiBsf,EAAeR,EAAc9e,GAAiBsf,EAC5GE,EAAYxf,GAAiByd,EAAYzd,GAAiBsf,EAAe7B,EAAYzd,GAAiBsf,EACjF,GAAjB5nC,EAAShQ,OACTg5C,GAAe,EACnC,CACY,MAAMn3B,EAA0B,GAAjB7R,EAAShQ,KAAajX,KAAKywD,qBAAqBtuC,EAAYotB,EAAgBvvC,KAAK6tD,mBAAqB7tD,KAAKqvD,cAAcltC,EAAYikC,EAAMD,GAAiB,IAAU,EACrL,GAAqC,MAAjC/W,EAAiB1vB,aAAsB,CACvC,MAAMA,EAAe0vB,EAAiB1vB,aAAewwC,EACrD,IAAIQ,EAAgB7E,GAAiB8E,gBAAgB1pC,EAAUI,EAAe+oC,EAAqBrE,EAA0BD,EAAiBvc,GAAgBuf,EAAcvf,GAAgB8gB,EAAgBjE,EAAetzB,EAAOtsB,EAASgc,EAAuBC,GAAuB,EAAOiE,EAAOC,EAAMnF,EAAU8oC,EAAc3C,GACrU,GAAIR,EAAgB,CAEhBuD,IADc7E,GAAiB8E,gBAAgB1pC,EAAUI,EAAe+oC,EAAqB1D,EAA8BD,EAAqBld,GAAgBuf,EAAcvf,GAAgB8gB,EAAgB/D,EAAcxzB,EAAOtsB,EAASgc,EAAuBC,GAAuB,EAAOiE,EAAOC,EAAMnF,EAAU8oC,EAAc3C,GAC5S+C,GAAiBnD,CAC/D,CACgB,GAAIF,EAAgB,CAEhBqD,IADc7E,GAAiB8E,gBAAgB1pC,EAAUI,EAAe+oC,EAAqB,EAAK,EAAKtB,EAAcvf,GAAgB8gB,EAAgB9D,EAAczzB,EAAOtsB,EAASgc,EAAuBC,GAAuB,EAAOiE,EAAOC,EAAMnF,EAAU8oC,EAAc3C,GACnP+C,GAAiBjD,CAC/D,CACgB,IAAImD,EAAcF,EAClB,GAAkB,GAAdP,EAAqB,CAErB,GADAS,EAAc/E,GAAiB8E,gBAAgB1pC,EAAUI,EAAe+oC,EAAqBnE,EAAwBD,EAAezc,GAAgBwf,EAAYxf,GAAgB8gB,EAAgBhE,EAAavzB,EAAOtsB,EAASgc,EAAuBC,GAAuB,EAAOiE,EAAOC,EAAMnF,EAAU8oC,EAAc3C,GACnTP,EAAc,CAEdwD,IADc/E,GAAiB8E,gBAAgB1pC,EAAUI,EAAe+oC,EAAqBxD,EAA4BD,EAAmBpd,GAAgBwf,EAAYxf,GAAgB8gB,EAAgB/D,EAAcxzB,EAAOtsB,EAASgc,EAAuBC,GAAuB,EAAOiE,EAAOC,EAAMnF,EAAU8oC,EAAc3C,GACxSiD,GAAepD,CAC/D,CACoB,GAAIF,EAAc,CAEdsD,IADc/E,GAAiB8E,gBAAgB1pC,EAAUI,EAAe+oC,EAAqB,EAAK,EAAKrB,EAAYxf,GAAgB8gB,EAAgB9D,EAAczzB,EAAOtsB,EAASgc,EAAuBC,GAAuB,EAAOiE,EAAOC,EAAMnF,EAAU8oC,EAAc3C,GACnPiD,GAAelD,CAC/D,CACA,CAIgB,GAHA1tD,KAAK8tD,eAAepuC,IAAiBgxC,EACrC1wD,KAAK+tD,aAAaruC,IAAiBkxC,EACnC5wD,KAAKguD,EAAyBhuD,KAAKiuD,KAA4BvuC,EAC3D0vB,EAAiBvvB,SAAU,CAC3B,MAAMgxC,EAAmD,MAAjC1uC,EAAW2uC,mBAA8B3uC,EAAW2uC,mBAAqB3uC,EAAWuF,WACxGmpC,EAAe/uB,kBAAoBouB,GAAiE,GAAlDW,EAAehvB,cAAcquB,GAAaj5C,OAC5Fi3C,EAAuCxiD,KAAKO,IAAIiiD,EAAsCrC,GAAiBkF,wCAAwC9pC,EAAUsB,IAEjL,CACA,CACA,CACQvoB,KAAK+rD,yBAA2BA,EAChC/rD,KAAKisD,uBAAyBA,EAC9BjsD,KAAKksD,eAAiBA,EACtBlsD,KAAKmsD,aAAeA,EACpBnsD,KAAK0sD,6BAA+BA,EACpC1sD,KAAK4sD,2BAA6BA,EAClC5sD,KAAK6sD,mBAAqBA,EAC1B7sD,KAAK8sD,iBAAmBA,EACxB,IAAK,IAAIvd,EAAgB,EAAGA,EAAgB7sC,EAAO6c,iBAAmB,EAAGgwB,IACrEvvC,KAAK8rD,iBAAiBvc,GAAiBuc,EAAiBvc,GACxDvvC,KAAKgsD,eAAezc,GAAiByc,EAAezc,GACpDvvC,KAAKysD,qBAAqBld,GAAiBkd,EAAqBld,GAChEvvC,KAAK2sD,mBAAmBpd,GAAiBod,EAAmBpd,GAEhEvvC,KAAKssD,aAAeA,EACpBtsD,KAAKusD,aAAeA,EACpBvsD,KAAKosD,cAAgBA,EACrBpsD,KAAKqsD,YAAcA,EACnBrsD,KAAKmtD,eAAiBA,EACtBntD,KAAKotD,aAAeA,EACpBptD,KAAKqtD,eAAiBA,EACtBrtD,KAAKstD,aAAeA,EACpBttD,KAAKutD,oBAAsBA,EAC3BvtD,KAAKwtD,kBAAoBA,EACzBxtD,KAAKytD,oBAAsBA,EAC3BztD,KAAK0tD,kBAAoBA,EACzB1tD,KAAKkuD,qCAAuCA,CACpD,CACI,cAAA8C,GACI,IAAK,IAAIzhB,EAAgB,EAAGA,EAAgBvvC,KAAKiuD,EAAwB1e,IAAiB,CACtF,MAAM7vB,EAAe1f,KAAKguD,EAAyBze,GACnDvvC,KAAK8tD,eAAepuC,GAAgB,EACpC1f,KAAK+tD,aAAaruC,GAAgB,CAC9C,CACQ1f,KAAKiuD,EAAyB,CACtC,CACI,sBAAO0C,CAAgB1pC,EAAUsB,EAAkB6nC,EAAqBa,EAAYr4B,EAAMs4B,EAAOb,EAAgBc,EAAUr4B,EAAOtsB,EAASgc,EAAuBC,EAAuB2oC,GAAY,EAAO1kC,EAAOC,EAAMnF,EAAU8oC,EAAce,GAC7O,MAAMhqC,EAAgB+pC,EAAYnqC,EAASpM,MAAQ,EAC7Cy2C,EAAe7oC,EAAwBD,EAC7C,OAAQvB,EAAShQ,MACb,KAAK,EAAG,OAAOwR,EACf,KAAK,EACD,OAAKjc,EAIMic,EAAwBgV,GAAM8zB,qBAAqBJ,GAAS,EAH5D1zB,GAAM8zB,qBAAqBJ,GAAS,EAAmB3oC,EAKtE,KAAK,EACD,OAAOsQ,EACX,KAAK,EACD,MAAM04B,EAAU,WACV9wD,EAAOgsB,EACb,OAAQlF,GACJ,KAAK,EACD,GAAI9mB,GAAQ,EACR,OAAO,EACX,MAAM+wD,EAAWl9B,GAA8B,GAApBhM,EAAwB,EAAI7c,KAAK4F,MAAO++C,EAAiB9nC,EAAgB,MAAc,GAAIoE,GACtH,OAAIngB,EACOic,EAAwB6oC,GAAe5wD,GAAQA,EAAO,IAAMgL,KAAK4F,MAAMmgD,EAAW/wD,GAAQ8wD,EAAU,IAAM9wD,EAG1G4wD,GAAe5wD,GAAQA,EAAO,IAAMgL,KAAK4F,MAAMmgD,EAAQ,GAAaD,EAAU,IAAM9wD,EAAO8nB,EAE1G,KAAK,EACD,MAAMkpC,EAAYn9B,EAAS+7B,EAAe,GAAI3jC,GAC9C,OAAIngB,EACOic,EAAwB6oC,EAAcI,GAAaF,EAAU,GAG7DF,EAAcI,GAAaF,EAAU,GAAKhpC,EAEzD,KAAK,EACD,GAAI9nB,GAAQ,EACR,OAAO,EACX,MAAMixD,EAAWp9B,EAAS88B,EAAe,GAAI1kC,GAC7C,OAAIngB,EACOic,EAAwB6oC,GAAe5wD,GAAQA,EAAO,IAAMgL,KAAK4F,MAAMqgD,EAAWjxD,GAAQ8wD,EAAU,IAAM9wD,EAG1G4wD,GAAe5wD,GAAQA,EAAO,IAAMgL,KAAK4F,MAAMqgD,EAAQ,GAAaH,EAAU,IAAM9wD,EAAO8nB,EAE1G,KAAK,EACD,MAEMopC,EAFYr9B,GAA8B,GAApBhM,EAAwB,EAAI7c,KAAK4F,MAAO++C,EAAiB9nC,EAAgB,MAAc,GAAIoE,IAElF,EAAM0jC,EAAiB9nC,EAAgB,IAAa,GADvEgM,GAA8B,GAApBhM,EAAwB,EAAI7c,KAAK4F,OAAO++C,EAAiB9nC,EAAmB,KAAG,MAAc,GAAIoE,IAChB0jC,EAAiB9nC,EAAgB,IAAa,GAC3J,OAAI/b,EACOic,EAAwB6oC,EAAcM,GAAmBJ,EAAU,GAGnEF,EAAcM,GAAmBJ,EAAU,GAAKhpC,EAE/D,QAAS,MAAM,IAAIplB,MAAM,iDAAmDokB,GAEpF,KAAK,EACD,OAAIhb,EACOic,EAAwB6oC,GAAe,GAAO,EAAM14B,EAAOvR,IAG3DiqC,GAAe,EAAM14B,EAAOvR,GAAiBmB,EAE5D,KAAK,EACD,OAAIhc,EACO8kD,GAAe,EAAM14B,EAAOvR,GAAiBmB,EAG7CC,EAAwB6oC,GAAe,EAAM14B,EAAOvR,GAEnE,KAAK,EACD,OAAQG,GACJ,KAAK,EACD,OAAIhb,EACQic,EAAwB,EAAK6oC,EAAc5lD,KAAKgE,IAAY,EAARwhD,EAAcxlD,KAAKE,GAAKyb,GAAiB,GAAOmB,EAAwB,EAG5HC,EAAwB,EAAK6oC,EAAc5lD,KAAKgE,IAAY,EAARwhD,EAAcxlD,KAAKE,GAAKyb,GAAiB,GAAOmB,EAAwB,EAE5I,KAAK,EACD,OAAIhc,EACQd,KAAKgE,IAAY,EAARwhD,EAAcxlD,KAAKE,GAAKyb,EAAgB,EAAI3b,KAAKE,GAAK,GAAK,EAAK6c,EAAwBD,EAGjG9c,KAAKgE,IAAY,EAARwhD,EAAcxlD,KAAKE,GAAKyb,EAAgB,EAAI3b,KAAKE,GAAK,GAAK,EAAK4c,EAAwBC,EAEjH,KAAK,EACD,OAAIjc,EACQic,EAAwB,EAAM6oC,EAAc5lD,KAAKE,GAAMF,KAAKI,KAAKJ,KAAKC,IAAKD,KAAKE,GAAK,EAAKslD,EAAQxlD,KAAKE,GAAK,EAAMyb,IAAmBmB,EAAwB,EAG7JC,EAAwB,EAAM6oC,EAAc5lD,KAAKE,GAAMF,KAAKI,KAAKJ,KAAKC,IAAKD,KAAKE,GAAK,EAAKslD,EAAQxlD,KAAKE,GAAK,EAAMyb,IAAmBmB,EAAwB,EAE7K,KAAK,EACD,OAAIhc,EACOic,EAAyByoC,EAAQ7pC,EAAiB,EAAIiqC,EAGrDJ,EAAQ7pC,EAAiB,EAAIiqC,EAAc9oC,EAE3D,KAAK,EACD,IAAIqpC,EAAO,EAOX,OALIA,EADArlD,EACQic,EAAwB,EAAoB,EAAd6oC,EAAkB5lD,KAAKE,GAAMF,KAAKI,KAAKJ,KAAKC,IAAKD,KAAKE,GAAK,EAAKslD,EAAQxlD,KAAKE,GAAK,EAAMyb,IAAmBmB,EAAwB,EAGjKC,EAAwB,EAAoB,EAAd6oC,EAAkB5lD,KAAKE,GAAMF,KAAKI,KAAKJ,KAAKC,IAAKD,KAAKE,GAAK,EAAKslD,EAAQxlD,KAAKE,GAAK,EAAMyb,IAAmBmB,EAAwB,EAEtK9c,KAAKO,IAAIuc,EAAuB9c,KAAKQ,IAAIuc,EAAuBopC,IAC3E,KAAK,EACD,GAAInlC,GAAS,EACT,OAAO,EACX,IAAIolC,EAAOZ,EAAQ7pC,EAAiB,EACpC,OAAI7a,EACOic,EAAwB/c,KAAK4F,MAAMwgD,EAAMplC,GAAS4kC,GAAe5kC,EAAQ,GAGzEhhB,KAAK4F,MAAMwgD,EAAMplC,GAAS4kC,GAAe5kC,EAAQ,GAAKlE,EAErE,KAAK,EACD,GAAIkE,GAAS,EACT,OAAO,EACX,IAAIqlC,EAAM,IAAOvlD,GAAW,EAAI,IAAM,EAAId,KAAKE,IAAMF,KAAKI,KAAKJ,KAAKC,IAAKD,KAAKE,GAAK,EAAKslD,EAAQxlD,KAAKE,GAAK,EAAMyb,IAChH,OAAO3b,KAAKgB,MAAMqlD,GAAOrlC,EAAQ,IAAM4kC,GAAe5kC,EAAQ,GAAKlE,EACvE,QAAS,MAAM,IAAIplB,MAAM,iDAAmDokB,GAEpF,KAAK,EACD,OAAIhb,EACQic,EAAwB,EAAK6oC,EAAc5lD,KAAKgE,IAAY,EAARwhD,EAAcxlD,KAAKE,GAAKyb,GAAiB,IAAQmB,EAAwB,EAG9H,GAAOC,EAAwB,EAAK6oC,EAAc5lD,KAAKgE,IAAY,EAARwhD,EAAcxlD,KAAKE,GAAKyb,GAAiB,IAAQmB,EAAwB,EAEnJ,KAAK,EACD,OAAIhc,EACOd,KAAKO,IAAI,EAAGwc,EAAwB,EAAM/c,KAAKO,IAAI,EAAMuc,EAAuB,EAAMC,EAAwBwoC,EAAab,EAAsB,KAGjJ1kD,KAAKO,IAAI,EAAMuc,EAAuB,EAAMC,EAAwBwoC,EAAab,EAAsB,IAEtH,KAAK,EACD,MAAM4B,EAAS,IAAOtmD,KAAKqC,KAAKsZ,EAAgBkB,GAChD,OAAI/b,EACOic,EAAwB6oC,GAAeL,EAAae,EAASf,EAAae,EAAS,GAAO,GAAOf,EAAae,GAAU3qC,EAAgBkB,IAGxI+oC,GAAeL,EAAae,EAASf,EAAae,EAAS,GAAO,GAAOf,EAAae,GAAU3qC,EAAgBkB,IAAqBC,EAEpJ,KAAK,GACD,OAAIhc,EACOic,EAAwB6oC,EAAc5lD,KAAKuC,IAAI,GAAIoZ,EAAgBuR,GAGnE04B,EAAc5lD,KAAKuC,IAAI,GAAIoZ,EAAgBuR,GAAQpQ,EAElE,KAAK,GACD,OAAIhc,EACOic,EAAwB6oC,IAAgBL,EAAc,IAAOvlD,KAAKqC,KAAKsZ,EAAgBkB,IAGvF+oC,IAAgBL,EAAc,IAAOvlD,KAAKqC,KAAKsZ,EAAgBkB,IAAsBC,EAEpG,KAAK,GACD,IAAIvD,EAAO,GAAwC,GAAlCvZ,KAAKgE,IAAIwhD,EAAQ7pC,GAGlC,OAFApC,EAAO,GAAO,EAAM2T,GAAQvR,EAAiBpC,GAAQ,IAAMoC,KAC3DpC,EAAOA,EAAO,EAAMA,EAAO,EACvBzY,EACOic,EAAwB6oC,EAAcrsC,EAGtCqsC,EAAcrsC,EAAOuD,EAEpC,KAAK,GAAI,CACL,IAAIypC,EAAO,EAAOr5B,GAAQ,GAAKvR,GAE/B,OADA4qC,EAAMA,EAAM,EAAMA,EAAM,EACpBzlD,EACOic,EAAwB6oC,EAAcW,EAGtCX,EAAcW,EAAMzpC,CAE/C,CACY,KAAK,GAAI,CACL,IAAIypC,EAAOr5B,GAAQ,GAAKvR,GAExB,OADA4qC,EAAMA,EAAM,EAAMA,EAAM,EACpBzlD,EACOic,EAAwB6oC,EAAcW,EAGtCX,EAAcW,EAAMzpC,CAE/C,CACY,KAAK,GACD,OAAIhc,EACOd,KAAKQ,IAAIR,KAAKO,IAAIuc,EAAuBC,EAAwB6oC,EAAc5lD,KAAKqC,KAAKrC,KAAKO,IAAI,EAAMob,EAAgBuR,EAAO,EAAG,KAAMnQ,GAGxI/c,KAAKO,IAAIuc,EAAuB8oC,EAAc5lD,KAAKqC,KAAKrC,KAAKO,IAAI,EAAMob,EAAgBuR,EAAO,EAAG,IAAMpQ,GAGtH,QAAS,MAAM,IAAIplB,MAAM,wCAErC,CACI,aAAAisD,CAAcltC,EAAYikC,EAAMD,EAAiB+L,GAAiB,GAC9D,GAAI9L,GAAQA,EAAKx2C,YAAc,EAAG,CAC9B,MAAMmW,EAAQ5D,EAAW6lB,WACnBruB,EAAcoM,EAAMpM,YACpBw4C,EAA2B,cAAdpsC,EAAM7gB,KACnB4K,EAAWpE,KAAK4F,MAAM60C,EAAgBiM,QAAU1vD,EAAOmR,kBACvDw+C,EAAYjM,EAAKptB,QAAQrf,EAAchK,EAAsBy2C,EAAKx2C,WAAYuS,EAAW6F,eAAgBlY,GAAYqiD,EAAahwC,EAAW8K,cAAgB,GACnK,OAAIilC,GACO9L,EAAKkM,cAAgBD,EAAYA,EAAYjM,EAAKkM,aAGlDD,CAEvB,CACQ,OAAO,CACf,CACI,oBAAA5B,CAAqBtuC,EAAY3c,EAAOszB,EAAQ,GAC5C,IAAIy5B,EAAY,EACZC,EAAU9vD,EAAOoa,SACjBtQ,GAAU,EACVimD,EAAqB,EACrBC,EAAqB,EACrBvwC,EAAW4kB,oBACXyrB,EAAU9vD,EAAOia,UAAY,GAE7BnX,EAAQ2c,EAAWqjB,gBAA4B,IAAXhgC,IACpC+sD,EAAYpwC,EAAWvH,UAAUpV,GAAO6iB,mBACxCmqC,EAAUrwC,EAAWvH,UAAUpV,GAAO8iB,iBACtC9b,EAAU2V,EAAWvH,UAAUpV,GAAOgH,QACtCimD,EAAqBtwC,EAAWvH,UAAUpV,GAAOgjB,sBACjDkqC,EAAqBvwC,EAAWvH,UAAUpV,GAAOijB,uBAEjD8pC,EAAYC,IACZD,EAAY,EACZC,EAAUrwC,EAAW4kB,kBAAoBrkC,EAAOia,UAAY,EAAIja,EAAOoa,UAE3E,MAAM61C,EAAQH,EAAUD,EAAY,EACpC,OAAK/lD,EAYGssB,GAASy5B,EACFG,EAEF55B,GAAS05B,EACPC,EAGAC,GAAsB55B,EAAQy5B,IAAcG,EAAqBD,GAAsBE,EAlB9F75B,GAASy5B,EACFE,EAEF35B,GAAS05B,EACPE,GAGC55B,EAAQy5B,IAAcG,EAAqBD,GAAsBE,EAAQF,CAcjG,CACI,8CAAO1B,CAAwC9pC,EAAUsB,EAAmB,GACxE,OAAqB,IAAjBtB,EAAShQ,KACF,KAAO,KAAQsR,EACL,GAAjBtB,EAAShQ,KACF,EAAM,IAAOsR,EACjB,CACf,CACI,uBAAAqqC,CAAwBzwC,EAAY0wC,EAAuBC,EAAcC,EAAeC,GAEpF,SAASC,EAAuBhC,EAAYr4B,EAAMs4B,EAAOC,GACrD,OAAOtF,GAAiB8E,gBAAgBkC,EAAuB,EAAG,EAAG5B,EAAYr4B,EAAMs4B,EAAO,EAAGC,EAFvF,GAEwG,EAAO,EAAG,GAAG,EAAM,EAAG,EAAG,EAFjI,EAE2I,EACjK,CACQ,IAAIlE,EAA6BgG,EAAuBjzD,KAAK+rD,yBAA0B/rD,KAAK+rD,yBAA0B+G,EAAeC,EAAe/yD,KAAKosD,eACzJ,GAAIpsD,KAAKmtD,eAAgB,CAErBF,IADcgG,EAAuBjzD,KAAK0sD,6BAA8B1sD,KAAK0sD,6BAA8BoG,EAAeC,EAAe/yD,KAAKssD,cACvGW,GAA8BjtD,KAAKutD,mBACtF,CACQ,GAAIvtD,KAAKqtD,eAAgB,CAErBJ,IADcgG,EAAuB,EAAK,EAAKH,EAAeC,EAAe/yD,KAAKusD,cAC3CU,GAA8BjtD,KAAKytD,mBACtF,CACQ,IAAIP,EAA2BD,EAE/B,GADAC,EAA2B+F,EAAuBjzD,KAAKisD,uBAAwBjsD,KAAKisD,uBAAwB6G,EAAeE,EAAahzD,KAAKqsD,aACzIrsD,KAAKotD,aAAc,CAEnBF,IADc+F,EAAuBjzD,KAAK4sD,2BAA4B5sD,KAAK4sD,2BAA4BkG,EAAeE,EAAahzD,KAAKssD,cACnGY,GAA4BltD,KAAKwtD,iBAClF,CACQ,GAAIxtD,KAAKstD,aAAc,CAEnBJ,IADc+F,EAAuB,EAAK,EAAKH,EAAeE,EAAahzD,KAAKusD,cAC3CW,GAA4BltD,KAAK0tD,iBAClF,CACQ1tD,KAAKitD,2BAA6BA,EAClCjtD,KAAKktD,yBAA2BA,CACxC,EAEA,MAAMgG,GACF,WAAA9xD,GACIpB,KAAKg5B,QAAUv1B,MAAMf,EAAOoX,aAAe,GAAGq5C,KAAK,GACnDnzD,KAAK4P,WAAa,EAClB5P,KAAKozD,UAAY,EACjBpzD,KAAKqzD,aAAe,KACpBrzD,KAAKq6B,KAAO,KACZr6B,KAAK8vD,SAAW,KAChB9vD,KAAK+vD,SAAW,KAChB/vD,KAAKszD,mBAAqB,EAC1BtzD,KAAKuzD,mBAAqB,EAC1BvzD,KAAKwzD,kBAAmB,EACxBxzD,KAAK0uD,aAAc,EACnB1uD,KAAKyzD,cAAe,EACpBzzD,KAAKgvD,iBAAkB,EACvBhvD,KAAK2uD,sBAAuB,EAC5B3uD,KAAKgwD,oBAAqB,EAC1BhwD,KAAK0vD,cAAgB,EACrB1vD,KAAK4vD,YAAc,EACnB5vD,KAAK0zD,mBAAqB,EAC1B1zD,KAAK2zD,qBAAuB,EAC5B3zD,KAAKsyD,aAAe,EACpBtyD,KAAK4zD,mBAAqB,EAC1B5zD,KAAK6zD,iBAAmB,EACxB7zD,KAAK8zD,aAAe,GACpB9zD,KAAK+zD,OAAS,GACd/zD,KAAKigB,cAAgB,GACrBjgB,KAAK6mD,YAAc,GACnB7mD,KAAKg0D,WAAa,GAClBh0D,KAAKi0D,oBAAsB,GAC3Bj0D,KAAKk0D,kBAAoB,GACzBl0D,KAAKm0D,4BAA8B,GACnCn0D,KAAK+mD,iBAAmB,GACxB/mD,KAAKmF,WAAa,EAClBnF,KAAKo0D,gBAAkB,EACvBp0D,KAAKq0D,oBAAsB,GAC3Br0D,KAAKs0D,yBAA2B,GAChCt0D,KAAKu0D,qBAAuB9wD,MAAMf,EAAOsX,yBAAyBm5C,KAAK,MACvEnzD,KAAKw0D,YAAc,KACnBx0D,KAAKy0D,gBAAkB,KACvBz0D,KAAKoN,WAAa,EAClBpN,KAAK00D,gBAAkB,EACvB10D,KAAKorB,cAAgB,EACrBprB,KAAK4lC,iBAAmB,EACxB5lC,KAAK20D,sBAAwB,EAC7B30D,KAAK40D,sBAAwB,GAC7B50D,KAAK8lC,cAAgB,EACrB9lC,KAAK60D,mBAAqB,EAC1B70D,KAAK80D,oBAAsB,EAC3B90D,KAAK+0D,yBAA2B,EAChC/0D,KAAKg1D,kBAAoB,KACzBh1D,KAAKi1D,oBAAsB,EAC3Bj1D,KAAKk1D,uBAAyB,KAC9Bl1D,KAAKm1D,cAAgB,GACrBn1D,KAAKo1D,YAAc,GACnBp1D,KAAKq1D,gBAAkB,EACvBr1D,KAAKs1D,wBAA0B,EAC/Bt1D,KAAKu1D,wBAA0B,EAC/Bv1D,KAAKw1D,8BAAgC,EACrCx1D,KAAKy1D,gBAAkB,GACvBz1D,KAAK01D,aAAe,EACpB11D,KAAK21D,cAAgB,EACrB31D,KAAK41D,mBAAqB,EAC1B51D,KAAK61D,mBAAqB,EAC1B71D,KAAK81D,mBAAqB,EAC1B91D,KAAK+1D,mBAAqB,EAC1B/1D,KAAKg2D,iBAAmB,EACxBh2D,KAAKi2D,eAAiB,EACtBj2D,KAAKk2D,iBAAmB,EACxBl2D,KAAKm2D,kBAAoB,EACzBn2D,KAAKo2D,gBAAkB,EACvBp2D,KAAKq2D,qBAAuB,EAC5Br2D,KAAKs2D,qBAAuB,EAC5Bt2D,KAAKu2D,cAAe,EACpBv2D,KAAKw2D,iBAAmB,IAAI3K,GAC5B7rD,KAAKs6B,OACb,CACI,KAAAA,GACI,IAAK,IAAI7uB,EAAI,EAAGA,EAAI/I,EAAOgb,gBAAiBjS,IACxCzL,KAAK8zD,aAAaroD,GAAK,EAE3B,IAAK,IAAIA,EAAI,EAAGA,EAAI/I,EAAOsX,wBAAyBvO,IAChDzL,KAAK+zD,OAAOtoD,GAAK,EACjBzL,KAAKg0D,WAAWvoD,GAAK,EACrBzL,KAAKi0D,oBAAoBxoD,GAAK,EAC9BzL,KAAKk0D,kBAAkBzoD,GAAK,EAC5BzL,KAAKm0D,4BAA4B1oD,GAAK,EACtCzL,KAAKigB,cAAcxU,GAAK/I,EAAOud,cAAc,GAC7CjgB,KAAKy1D,gBAAgBhqD,GAAK,EAC1BzL,KAAKu0D,qBAAqB9oD,GAAK,KAEnC,IAAK,IAAIA,EAAI,EAAGA,EAAIzL,KAAKq1D,gBAAiB5pD,IACtCzL,KAAKo1D,YAAY3pD,GAAGioB,cAExB1zB,KAAKq1D,gBAAkB,EACvBr1D,KAAKs1D,wBAA0B,EAC/Bt1D,KAAKu1D,wBAA0B,EAC/Bv1D,KAAK2zD,qBAAuB,EAC5B3zD,KAAKi1D,oBAAsB,EAC3B,IAAK,MAAMwB,KAAgBz2D,KAAKm1D,cAC5BsB,EAAan8B,QAEjBt6B,KAAKw2D,iBAAiBl8B,QACtBt6B,KAAKw0D,YAAc,KACnBx0D,KAAKy0D,gBAAkB,KACvBz0D,KAAKk1D,uBAAyB,KAC9Bl1D,KAAKqzD,aAAe,IAC5B,EAEA,MAAMqD,GACF,WAAAt1D,GACIpB,KAAK22D,OAAQ,EACb32D,KAAK42D,UAAW,EAChB52D,KAAK62D,sBAAuB,EAC5B72D,KAAK82D,oBAAqB,EAC1B92D,KAAK+2D,yBAA0B,EAC/B/2D,KAAKg3D,qBAAuB,EAC5Bh3D,KAAKi3D,eAAiB,EACtBj3D,KAAKk3D,YAAc,IAAI3pC,EACvBvtB,KAAKm3D,eAAiB,IAAI5pC,EAC1BvtB,KAAKo3D,cAAgB,IAAI7pC,EACzBvtB,KAAKq3D,eAAiB,IAAI9pC,EAC1BvtB,KAAKiX,KAAO,EACZjX,KAAKs3D,YAAc,KACnBt3D,KAAKsL,KAAO,KACZtL,KAAKwqB,6BAA8B,EACnCxqB,KAAKyqB,kBAAoB,EACzBzqB,KAAK0qB,gBAAkB,EACvB1qB,KAAK2qB,iBAAmB,EACxB3qB,KAAK4qB,uBAAwB,EAC7B5qB,KAAK6qB,oBAAsB,EAC3B7qB,KAAKu3D,qBAAuB,EAC5Bv3D,KAAKgmB,OAAS,KACdhmB,KAAK+qB,aAAe,EACpB/qB,KAAKgrB,aAAe,EACpBhrB,KAAKirB,aAAe,EACpBjrB,KAAKkrB,iBAAmB,IACxBlrB,KAAKmrB,WAAa,EAClBnrB,KAAK+lB,MAAQ,KACb/lB,KAAKoQ,QAAU,EACfpQ,KAAKw3D,YAAc,EACnBx3D,KAAK8qB,SAAU,EACf9qB,KAAKoyD,QAAU,EACfpyD,KAAKy3D,YAAc,EACnBz3D,KAAK03D,gBAAkB,EACvB13D,KAAK23D,aAAe,GACpB33D,KAAK43D,eAAiB,EACtB53D,KAAK63D,oBAAsB,EAC3B73D,KAAK83D,UAAY,EACjB93D,KAAK+3D,eAAiB,EACtB/3D,KAAKg4D,eAAiB,EACtBh4D,KAAKi4D,oBAAsB,EAC3Bj4D,KAAKk4D,YAAc,EACnBl4D,KAAKm4D,iBAAmB,EACxBn4D,KAAKo4D,kBAAoB,KACzBp4D,KAAKq4D,uBAAyB,EAC9Br4D,KAAKs4D,kCAAoC,EACzCt4D,KAAKu4D,yBAA0B,EAC/Bv4D,KAAKw4D,wBAAyB,EAC9Bx4D,KAAKy4D,eAAgB,EACrBz4D,KAAK04D,WAAa,EAClB14D,KAAK24D,gBAAkB,EACvB34D,KAAK44D,aAAe,EACpB54D,KAAK64D,kBAAoB,EACzB74D,KAAK84D,uBAAyB,EAC9B94D,KAAKktB,qBAAuB,EAC5BltB,KAAKkmC,kBAAoB,EACzBlmC,KAAKmmC,gBAAkB,EACvBnmC,KAAK+4D,eAAiB,EACtB/4D,KAAKg5D,oBAAsB,EAC3Bh5D,KAAK+oB,WAAa,EAClB/oB,KAAKi5D,gBAAkB,EACvBj5D,KAAKk5D,gBAAkB,EACvBl5D,KAAKm5D,qBAAuB,EAC5Bn5D,KAAKo5D,2BAA6B,EAClCp5D,KAAKq5D,2BAA6B,EAClCr5D,KAAKs5D,2BAA6B,EAClCt5D,KAAKu5D,oBAAsB,EAC3Bv5D,KAAKw5D,qBAAuB,EAC5Bx5D,KAAKy5D,oBAAsB,EAC3Bz5D,KAAK05D,wBAA0B,EAC/B15D,KAAK25D,gBAAkB,EACvB35D,KAAK45D,qBAAuB,EAC5B55D,KAAK65D,0BAA4B,EACjC75D,KAAK85D,gBAAkB,EACvB95D,KAAK+5D,qBAAuB,EAC5B/5D,KAAKg6D,oBAAsB,EAC3Bh6D,KAAKi6D,yBAA2B,EAChCj6D,KAAKk6D,UAAY,GACjBl6D,KAAKm6D,cAAgB,EACrBn6D,KAAKo6D,sBAAwB,EAC7Bp6D,KAAKq6D,sBAAwB,EAC7Br6D,KAAKs6D,iBAAmB,KACxBt6D,KAAKu6D,gBAAkB,EACvBv6D,KAAKw6D,eAAiB,EACtBx6D,KAAKy6D,eAAiB,EACtBz6D,KAAK06D,oBAAsB,EAC3B16D,KAAK26D,oBAAsB,EAC3B36D,KAAK46D,eAAiB,EACtB56D,KAAK66D,eAAiB,EACtB76D,KAAK86D,oBAAsB,EAC3B96D,KAAK+6D,oBAAsB,EAC3B/6D,KAAKg7D,iBAAmB,KACxBh7D,KAAKi7D,iBAAmB,KACxBj7D,KAAKk7D,sBAAuB,EAC5Bl7D,KAAKm7D,eAAiB,EACtBn7D,KAAKo7D,YAAc,EACnBp7D,KAAKq7D,gBAAkB,EACvBr7D,KAAKs7D,qBAAuB,EAC5Bt7D,KAAKu7D,mBAAqB,EAC1Bv7D,KAAKw7D,wBAA0B,EAC/Bx7D,KAAKy7D,eAAiB,KACtBz7D,KAAK07D,eAAiB,KACtB17D,KAAK27D,oBAAqB,EAC1B37D,KAAK47D,aAAe,EACpB57D,KAAK67D,qBAAuB,EAC5B77D,KAAK87D,mBAAqB,KAC1B97D,KAAK+7D,qBAAuB,EAC5B/7D,KAAKg8D,0BAA4B,EACjCh8D,KAAKi8D,SAAW,EAChBj8D,KAAKk8D,cAAgB,EACrBl8D,KAAKm8D,YAAc,EACnBn8D,KAAKo8D,YAAc,EACnBp8D,KAAKq8D,YAAc,EACnBr8D,KAAKs8D,iBAAmB,EACxBt8D,KAAKu8D,iBAAmB,EACxBv8D,KAAKw8D,oBAAsB,EAC3Bx8D,KAAKy8D,oBAAsB,EAC3Bz8D,KAAK08D,gBAAkB,KACvB18D,KAAK28D,sBAAuB,EAC5B38D,KAAK48D,eAAiB,EACtB58D,KAAK68D,WAAa,EAClB78D,KAAK88D,gBAAkB,EACvB98D,KAAK+8D,cAAgB,EACrB/8D,KAAKg9D,cAAgB,EACrBh9D,KAAKi9D,cAAgB,EACrBj9D,KAAKk9D,mBAAqB,EAC1Bl9D,KAAKm9D,mBAAqB,EAC1Bn9D,KAAKo9D,mBAAqB,EAC1Bp9D,KAAKq9D,mBAAqB,EAC1Br9D,KAAKs9D,sBAAwB,EAC7Bt9D,KAAKu9D,sBAAwB,EAC7Bv9D,KAAKw9D,sBAAwB,EAC7Bx9D,KAAKy9D,sBAAwB,EAC7Bz9D,KAAKgnC,aAAe,IAAIpJ,GACxB59B,KAAKwmC,cAAgB,IAAIjI,GACzBv+B,KAAK0mC,qBAAuB,GAC5B1mC,KAAKw2D,iBAAmB,IAAI3K,GAC5B,IAAK,IAAIpgD,EAAI,EAAGA,EAAI/I,EAAOia,UAAWlR,IAClCzL,KAAK0mC,qBAAqBj7B,GAAK,IAAImyB,GAEvC59B,KAAK09D,eAAiB,GACtB19D,KAAK29D,sBAAwB,IAC7B,IAAK,IAAIlyD,EAAI,EAAGA,EAAIzL,KAAK29D,sBAAuBlyD,IAC5CzL,KAAK09D,eAAe7wD,KAAK,IAAImyB,IAEjCh/B,KAAK49D,qBAAuB,CACpC,CACI,wBAAAC,CAAyBnxB,EAAOvqB,EAAY27C,GAsBxC,GArBIltD,EAAsBuR,EAAW/R,WACJ,MAAzBpQ,KAAKs6D,kBAA4Bt6D,KAAKs6D,iBAAiBx2D,OAAS4oC,EAAMqxB,0BACtE/9D,KAAKs6D,iBAAmB,IAAI/uD,aAAamhC,EAAMqxB,yBAGnDltD,EAAqBsR,EAAW/R,YACH,MAAzBpQ,KAAKg7D,kBAA4Bh7D,KAAKg7D,iBAAiBl3D,OAAS4oC,EAAMsxB,yBACtEh+D,KAAKg7D,iBAAmB,IAAIzvD,aAAamhC,EAAMsxB,yBAEtB,MAAzBh+D,KAAKi7D,kBAA4Bj7D,KAAKi7D,iBAAiBn3D,OAAS4oC,EAAMsxB,yBACtEh+D,KAAKi7D,iBAAmB,IAAI1vD,aAAamhC,EAAMsxB,yBAGnDltD,EAAmBqR,EAAW/R,UAC9BpQ,KAAKi+D,oBAAoBH,EAAgB37C,EAAWikB,WAEpDr1B,EAAqBoR,EAAW/R,UACJ,MAAxBpQ,KAAK08D,kBACL18D,KAAK08D,gBAAkB,IAAInxD,aAAa7I,EAAOwQ,wBAGnDjC,EAAuBkR,EAAW/R,SAAU,CAC5C,MACM8tD,EADsC,KACiC,IAC7El+D,KAAKs4D,kCAAoC4F,EACzC,MAAMC,EAAiC1gC,GAAMC,kBAAkBhyB,KAAK4F,MAAM4sD,EAAiCxxB,EAAMia,mBACnF,MAA1B3mD,KAAKo4D,mBAA6Bp4D,KAAKo4D,kBAAkBt0D,QAAUq6D,IACnEn+D,KAAKo4D,kBAAoB,IAAI7sD,aAAa4yD,GAC1Cn+D,KAAKq4D,uBAAyB,GAElC,MAAM+F,EAAkBp+D,KAAK09D,eAAe55D,OAC5C,GAAI9D,KAAK29D,sBAAwBS,EAC7B,IAAK,IAAI3yD,EAAI2yD,EAAiB3yD,EAAIzL,KAAK29D,sBAAwB,EAAGlyD,IAC9DzL,KAAK09D,eAAe7wD,KAAK,IAAImyB,IAGjCh/B,KAAK29D,sBAAwB39D,KAAK49D,uBAClC59D,KAAK49D,qBAAuBlyD,KAAKgB,MAAM1M,KAAK29D,uBAE5D,CACA,CACI,mBAAAM,CAAoBH,EAAgB13B,GAChC,MAAMi4B,EAAqB3yD,KAAKO,IAAIvJ,EAAOgQ,gBAAkB,EAAI0zB,EAAY,GAEvEk4B,EAAoD,EAD1B7gC,GAAMC,kBAAkB2gC,EAAqB37D,EAAOiQ,mBAAqBmrD,GAEzG,GAA2B,MAAvB99D,KAAKy7D,gBAAiD,MAAvBz7D,KAAK07D,eACpC17D,KAAKy7D,eAAiB,IAAIlwD,aAAa+yD,GACvCt+D,KAAK07D,eAAiB,IAAInwD,aAAa+yD,QAEtC,GAAIt+D,KAAKy7D,eAAe33D,OAASw6D,GAA2Bt+D,KAAK07D,eAAe53D,OAASw6D,EAAyB,CACnH,MAAMC,EAAgB,IAAIhzD,aAAa+yD,GACjCE,EAAgB,IAAIjzD,aAAa+yD,GACjCG,EAAUz+D,KAAKy7D,eAAe33D,OAAS,EAC7C,IAAK,IAAI2H,EAAI,EAAGA,EAAIzL,KAAKy7D,eAAe33D,OAAQ2H,IAC5C8yD,EAAc9yD,GAAKzL,KAAKy7D,eAAgBz7D,KAAK47D,aAAenwD,EAAKgzD,GACjED,EAAc/yD,GAAKzL,KAAKy7D,eAAgBz7D,KAAK47D,aAAenwD,EAAKgzD,GAErEz+D,KAAK47D,aAAe57D,KAAKy7D,eAAe33D,OACxC9D,KAAKy7D,eAAiB8C,EACtBv+D,KAAK07D,eAAiB8C,CAClC,CACA,CACI,UAAAE,GACI1+D,KAAKy5D,oBAAsB,EAC3Bz5D,KAAK05D,wBAA0B,EAC/B15D,KAAK25D,gBAAkB,EACvB,IAAK,IAAIluD,EAAI,EAAGA,EAAIzL,KAAKm6D,cAAe1uD,IACpCzL,KAAKk6D,UAAUzuD,GAAGioB,cAWtB,GATA1zB,KAAKm6D,cAAgB,EACrBn6D,KAAKo6D,sBAAwB,EAC7Bp6D,KAAKq6D,sBAAwB,EAC7Br6D,KAAKo5D,2BAA6B,EAClCp5D,KAAKq5D,2BAA6B,EAClCr5D,KAAKs5D,2BAA6B,EAClCt5D,KAAKu5D,oBAAsB,EAC3Bv5D,KAAKw5D,qBAAuB,EAC5Bx5D,KAAKu6D,gBAAkB,EACM,MAAzBv6D,KAAKs6D,iBACL,IAAK,IAAI7uD,EAAI,EAAGA,EAAIzL,KAAKs6D,iBAAiBx2D,OAAQ2H,IAC9CzL,KAAKs6D,iBAAiB7uD,GAAK,EACnCzL,KAAK87D,mBAAqB,KAC1B97D,KAAKs8D,iBAAmB,EACxBt8D,KAAKu8D,iBAAmB,EACxBv8D,KAAKw8D,oBAAsB,EAC3Bx8D,KAAKy8D,oBAAsB,EAC3Bz8D,KAAKk9D,mBAAqB,EAC1Bl9D,KAAKm9D,mBAAqB,EAC1Bn9D,KAAKo9D,mBAAqB,EAC1Bp9D,KAAKq9D,mBAAqB,EAC1Br9D,KAAKs9D,sBAAwB,EAC7Bt9D,KAAKu9D,sBAAwB,EAC7Bv9D,KAAKw9D,sBAAwB,EAC7Bx9D,KAAKy9D,sBAAwB,EAC7Bz9D,KAAKw3D,YAAc,EACnBx3D,KAAK8qB,SAAU,EACf9qB,KAAK22D,OAAQ,EACb32D,KAAK82D,oBAAqB,EAC1B92D,KAAK+2D,yBAA0B,EAC/B/2D,KAAKg3D,qBAAuB,EAC5Bh3D,KAAKi3D,eAAiB,CAC9B,CACI,eAAA0H,GACI3+D,KAAK0+D,aACL1+D,KAAKy3D,YAAc,EACnBz3D,KAAK03D,gBAAkB,EACvB13D,KAAKoyD,QAAU,EACf,IAAK,IAAI7iB,EAAgB,EAAGA,EAAgB7sC,EAAO6c,iBAAmB,EAAGgwB,IACrEvvC,KAAK23D,aAAapoB,GAAiB,EAEvC,GADAvvC,KAAKw2D,iBAAiBl8B,QAClBt6B,KAAKk7D,qBAAsB,CAC3B,IAAK,IAAIzvD,EAAI,EAAGA,EAAIzL,KAAKg7D,iBAAiBl3D,OAAQ2H,IAC9CzL,KAAKg7D,iBAAiBvvD,GAAK,EAC/B,IAAK,IAAIA,EAAI,EAAGA,EAAIzL,KAAKi7D,iBAAiBn3D,OAAQ2H,IAC9CzL,KAAKi7D,iBAAiBxvD,GAAK,CAC3C,CACQ,GAAIzL,KAAK27D,mBAAoB,CACzB,IAAK,IAAIlwD,EAAI,EAAGA,EAAIzL,KAAKy7D,eAAe33D,OAAQ2H,IAC5CzL,KAAKy7D,eAAehwD,GAAK,EAC7B,IAAK,IAAIA,EAAI,EAAGA,EAAIzL,KAAK07D,eAAe53D,OAAQ2H,IAC5CzL,KAAK07D,eAAejwD,GAAK,CACzC,CACQ,GAAIzL,KAAK28D,qBACL,IAAK,IAAIlxD,EAAI,EAAGA,EAAIzL,KAAK08D,gBAAgB54D,OAAQ2H,IAC7CzL,KAAK08D,gBAAgBjxD,GAAK,EAElC,GAAIzL,KAAKw4D,uBACL,IAAK,IAAI/sD,EAAI,EAAGA,EAAIzL,KAAKo4D,kBAAkBt0D,OAAQ2H,IAC/CzL,KAAKo4D,kBAAkB3sD,GAAK,EAEpCzL,KAAKo7D,YAAc,EACnBp7D,KAAK44D,aAAe,EACpB54D,KAAK+4D,eAAiB,CAC9B,CACI,OAAA6F,CAAQlyB,EAAOvqB,EAAY27C,EAAgBxX,EAAuBF,EAAMxS,EAAcf,GAClF7yC,KAAK42D,UAAW,EAChB52D,KAAKiX,KAAOkL,EAAWlL,KACvBjX,KAAKs3D,YAAc75B,GAAMohC,2BAA2B18C,GACpDniB,KAAKgmB,OAAStjB,EAAO6U,QAAQ4K,EAAW6D,QACxChmB,KAAK+lB,MAAQ5D,EAAW6lB,WACxBhoC,KAAKu3D,qBAAuB70D,EAAO+K,WAAW0U,EAAW4iB,WAAWzvB,gBACpEtV,KAAKoQ,QAAU+R,EAAW/R,QAC1BpQ,KAAK8qB,QAAU3I,EAAW2I,QAC1B9qB,KAAKw3D,YAAc,EACnB,MAAM7Q,EAAmBja,EAAMia,iBAC/B3mD,KAAK8+D,YAAY38C,EAAYwkC,GAC7B,MACM0H,EADe3hB,EAAMqyB,kBAErBxQ,EAAiBuP,EAAiBpxB,EAAMia,iBACxCyH,EAAc1hB,EAAMsyB,iBACpBC,EAAiB,GACvB,IAAK,IAAIxzD,EAAI,EAAGA,EAAI/I,EAAO6c,iBAAkB9T,IACzCwzD,EAAexzD,GAAK,EAExB,IAAIyzD,EAAmBx8D,EAAO4U,cAAc6K,EAAWkF,eACnDqlB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcf,KACtFqsB,EAAmBxzD,KAAKO,IAAI,EAAGP,KAAKQ,IAAIxJ,EAAO4U,cAAcxT,OAAS,EAAG4oC,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcf,GAAiB,KAE5KqsB,EADAtpC,OAAOwpC,UAAUF,GACEx8D,EAAO4U,cAAc4nD,IAGnB,EAAKA,EAAmB,GAAMx8D,EAAO4U,cAAc5L,KAAK4F,MAAM4tD,IAAsBA,EAAmB,EAAKx8D,EAAO4U,cAAc5L,KAAKoV,KAAKo+C,KAGxK,IAAK,IAAI3vB,EAAgB,EAAGA,EAAgBptB,EAAWqjB,cAAe+J,IAAiB,CACnF,IAAIhnB,EAAmBpG,EAAWvH,UAAU20B,GAAehnB,iBACvDmkB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,6BAA6BF,MAAOouC,EAAcf,IAA6E,MAAzD1wB,EAAWvH,UAAU20B,GAAe/K,oBACzJjc,EAAmBpG,EAAWvH,UAAU20B,GAAe/K,mBAE3Dy6B,EAAe1vB,GAAiB2vB,EAAmB32C,CAC/D,CACQvoB,KAAKw2D,iBAAiBrI,iBAAiBhsC,EAAYisC,EAAapuD,KAAK23D,aAActJ,EAAeE,EAAgBnI,EAAM6Y,EAAgBj/D,KAAM0sC,EAAOkH,EAAcf,GACnK,MAAMib,EAAiB9tD,KAAKw2D,iBAAiB1I,eACvCC,EAAe/tD,KAAKw2D,iBAAiBzI,aACrCsR,EAAepuD,EAAuBjR,KAAKoQ,SAC3CkvD,EAAqBtuD,EAA6BhR,KAAKoQ,SACvDmvD,EAAiB7uD,EAAyB1Q,KAAKoQ,SAC/CovD,EAAiB7uD,EAAyB3Q,KAAKoQ,SAC/CqvD,EAAc7uD,EAAsB5Q,KAAKoQ,SACzCsvD,EAAa7uD,EAAqB7Q,KAAKoQ,SACvCuvD,EAAW7uD,EAAmB9Q,KAAKoQ,SACnCwvD,EAAa7uD,EAAqB/Q,KAAKoQ,SAC7C,IAAIyvD,EAAiB,EAYrB,GAXIR,IACAQ,EAAkB19C,EAAW2K,aAAe,EAC5C9sB,KAAK29D,sBAAwBx7C,EAAW2K,aACpC4f,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,KAClF7yC,KAAK29D,sBAAwBjxB,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,GAChIgtB,EAAkBnzB,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,GAAS,GAElI7yC,KAAK29D,sBAAwBjyD,KAAK4F,MAAM5F,KAAKuC,IAAI,EAAGjO,KAAK29D,sBAAwB7P,EAAe,MAChG+R,GAAkC/R,EAAe,KAErD9tD,KAAK69D,yBAAyBnxB,EAAOvqB,EAAY27C,GAC7CuB,EAAc,CACdr/D,KAAKk4D,YAAc/1C,EAAWyK,SAAWlqB,EAAO8V,cAChDxY,KAAKy4D,eAAgB,EACrB,IAAIqH,EAAiB9/D,KAAKk4D,YACtBxrB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAqB,SAAEF,MAAOouC,EAAcf,KAChF7yC,KAAKk4D,YAAcxrB,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAqB,SAAEF,MAAOouC,EAAcf,GAAiB,GAASnwC,EAAO8V,cACpIsnD,EAAiBpzB,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAqB,SAAEF,MAAOouC,EAAcf,GAAiB,GAAQnwC,EAAO8V,eAErIxY,KAAKk4D,aAAepK,EAAe,IACnCgS,GAAkB/R,EAAa,IAC/B/tD,KAAKm4D,kBAAoB2H,EAAiB9/D,KAAKk4D,aAAe5R,EAC9D,IAAK,IAAIyZ,EAAa,EAAGA,EAAar0D,KAAKoV,KAAKpV,KAAKmC,SAAWnC,KAAKmC,SAAW,IAAKkyD,IACjF,GAAI//D,KAAK49D,qBAAuB59D,KAAK29D,uBAAyBjyD,KAAKmC,UAAYgyD,EAAgB,CAC3F,IAAIG,EAAqC79C,EAAW0K,UAChD6f,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,KAClFmtB,EAAqCtzB,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,IAE5ImtB,GAAsClS,EAAe,IACrD,IAAI/gC,EAAa5K,EAAW4K,WACxB2f,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcf,KACnF9lB,EAAa2f,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcf,GAAiB,IAErH9lB,GAAc+gC,EAAe,IAC7B,MAEMmS,GADkCD,GADGA,EAAqCjzC,EACmCizC,GAAsCt0D,KAAKmC,UACzF,IAC/DqyD,EAA6Bx0D,KAAK4F,MAAM2uD,EAA6BtZ,GACrEwZ,EAA0BngE,KAAKo4D,kBAAkBt0D,OACjDs8D,EAAapgE,KAAK49D,qBACxB59D,KAAK49D,uBACL,MAAMyC,EAAQrgE,KAAK09D,eAAe0C,GAClCC,EAAMnhC,aAAe,EACrBmhC,EAAMlhC,gBAAkB+gC,EACxB,MAAMI,EAAwB,IACxBC,EAAwB,IAC9BF,EAAMphC,kBAAoBj/B,KAAKu4D,yBAA2B+H,GAAyBC,EAAwBD,GAAyB50D,KAAKmC,SAAWnC,KAAKmC,SAAW84C,IAAqBwZ,EAA0B,GAAKG,EACrL,GAA/B59D,EAAOoW,qBACPunD,EAAM1gC,4BAA4B0gC,EAAMlhC,gBAAiB,GAErB,GAA/Bz8B,EAAOoW,sBACZunD,EAAMrgC,sBAAsBqgC,EAAMlhC,gBAAiB,GAEvDkhC,EAAMngC,SAASx0B,KAAKmC,SAAWiwD,EAAiB,EACpE,CAEA,CACQ,GAAIyB,EAAgB,CAChB,IAAIiB,EAAqBr+C,EAAW4G,WAChC03C,EAAmBt+C,EAAW4G,WAC9B2jB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAuB,WAAEF,MAAOouC,EAAcf,KAClF2tB,EAAqB9zB,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAuB,WAAEF,MAAOouC,EAAcf,GAAiB,GACxH4tB,EAAmB/zB,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAuB,WAAEF,MAAOouC,EAAcf,GAAiB,IAE1H,MAAM6tB,EAAwBh1D,KAAKQ,IAAI,EAAK4hD,EAAe,IAAM0S,GAAsB99D,EAAOqc,gBAAkB,IAC1G4hD,EAAsBj1D,KAAKQ,IAAI,EAAK6hD,EAAa,IAAM0S,GAAoB/9D,EAAOqc,gBAAkB,IACpG6hD,EAAkBl1D,KAAKuC,IAAI,EAAM,MAASvC,KAAKuC,IAAI,GAAMyyD,GAAyB,GAAO,GAAM,GAC/FG,EAAgBn1D,KAAKuC,IAAI,EAAM,MAASvC,KAAKuC,IAAI,GAAM0yD,GAAuB,GAAO,GAAM,GAC3FG,GAAwB,EAAM,EAAMJ,GAAyBh+D,EAAOkS,qBACpEmsD,GAAsB,EAAM,EAAMJ,GAAuBj+D,EAAOkS,qBACtE5U,KAAK+oB,WAAa63C,EAClB5gE,KAAKi5D,iBAAmB4H,EAAgBD,GAAmBta,EAC3DtmD,KAAKk5D,gBAAkB4H,EACvB9gE,KAAKm5D,sBAAwB4H,EAAqBD,GAAwBxa,CACtF,CACQ,GAAIkZ,EAAgB,CAChB,IAAIwB,EAAmB7+C,EAAW4jB,eAAiBr6B,KAAKqC,KAAK+/C,EAAe,KACxEmT,EAAiB9+C,EAAW4jB,eAAiBr6B,KAAKqC,KAAKggD,EAAa,KACpErhB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,KAClFmuB,EAAmBt0B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,GAASnnC,KAAKqC,KAAK+/C,EAAe,KACxJmT,EAAiBv0B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,GAAQnnC,KAAKqC,KAAKggD,EAAa,MAEvJ,IAAImT,EAA2B/+C,EAAW2G,uBAAyBpd,KAAKqC,KAAK+/C,EAAe,KACxFqT,EAAyBh/C,EAAW2G,uBAAyBpd,KAAKqC,KAAKggD,EAAa,KACpFrhB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcf,KACjFquB,EAA2Bx0B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcf,GAAiB,GAASnnC,KAAKqC,KAAK+/C,EAAe,KAC/JqT,EAAyBz0B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcf,GAAiB,GAAQnnC,KAAKqC,KAAKggD,EAAa,MAE9J,MAAM37C,EAAY1P,EAAOwP,KAAKw6B,EAAMlS,KAAKrlB,KAAK/C,UAAa1P,EAAOga,iBAAmBgwB,EAAMlS,KAAKtD,OAC1FkqC,EAAYt8B,GAAWkK,mBAAmB58B,EAAY,IAAM1G,KAAKuC,IAAI,GAAMvL,EAAO0c,oBAAsB,EAAI4hD,GAAoBt+D,EAAO2c,sBACvIgiD,EAAUv8B,GAAWkK,mBAAmB58B,EAAY,IAAM1G,KAAKuC,IAAI,GAAMvL,EAAO0c,oBAAsB,EAAI6hD,GAAkBv+D,EAAO2c,sBACnIunC,EAAkBl7C,KAAKQ,IAAI,EAAKk1D,EAAYza,GAC5CK,EAAgBt7C,KAAKQ,IAAI,EAAKm1D,EAAU1a,GAC9C3mD,KAAK45D,qBAAuBhT,EAC5B5mD,KAAK65D,0BAA4BnuD,KAAKuC,IAAI+4C,EAAgBJ,EAAiB,EAAMN,GACjF,MAAMgb,EAAa,EAAM5+D,EAAOmS,qBAAuBnJ,KAAKuC,IAAI,EAAK,EAAMvC,KAAKuC,IAAI,EAA2E,IAArEvL,EAAO4c,4BAA8B,EAAI4hD,KAC7HK,EAAW,EAAM7+D,EAAOmS,qBAAuBnJ,KAAKuC,IAAI,EAAK,EAAMvC,KAAKuC,IAAI,EAAyE,IAAnEvL,EAAO4c,4BAA8B,EAAI6hD,KACjInhE,KAAK85D,gBAAkBwH,EACvBthE,KAAK+5D,qBAAuBruD,KAAKuC,IAAIszD,EAAWD,EAAY,EAAMhb,GAClE,MAAMkb,EAAiB,EAAM9+D,EAAOmS,qBAAuBnJ,KAAKuC,IAAI,IAAKvL,EAAO4c,4BAA8B,EAAI4hD,GAC5GO,EAAe,EAAM/+D,EAAOmS,qBAAuBnJ,KAAKuC,IAAI,IAAKvL,EAAO4c,4BAA8B,EAAI6hD,GAChHnhE,KAAKg6D,oBAAsBwH,EAC3BxhE,KAAKi6D,yBAA2BvuD,KAAKuC,IAAIwzD,EAAeD,EAAgB,EAAMlb,EAC1F,CACQ,IAAIsR,EAAiB,EACrB,GAAIz1C,EAAW+E,aAAc,CACzB,MAAMw6C,EAAwBv/C,EAAWyD,SACP,MAA9BzD,EAAWijB,aAAa,KACxBjjB,EAAWijB,aAAa,GAAK,IAAIxD,IACrC,MAAM+/B,EAAsBx/C,EAAWijB,aAAa,GACpD,IAeIw8B,EAfAC,EAAkB1/C,EAAW6iB,kBAC7B88B,EAAkB3/C,EAAW8iB,mBAC7B88B,EAAgB5/C,EAAW6iB,kBAC3Bg9B,EAAgB7/C,EAAW8iB,mBAC3Bg9B,GAAgB,EAYpB,GAXIv1B,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcf,KACnFgvB,EAAkBn1B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcf,GAAiB,GACtHkvB,EAAgBr1B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcf,GAAiB,GACpHovB,GAAgB,GAEhBv1B,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,gBAAgBF,MAAOouC,EAAcf,KACpFivB,EAAkBp1B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,gBAAgBF,MAAOouC,EAAcf,GAAiB,GACvHmvB,EAAgBt1B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,gBAAgBF,MAAOouC,EAAcf,GAAiB,GACrHovB,GAAgB,GAGhBA,EAAe,CACfP,EAAsBt9B,8BAA8By9B,EAAiBC,GACrEH,EAAoBv9B,8BAA8B29B,EAAeC,GACjEJ,EAAaF,EAAsB7/B,cAAc,GACjD,IAAIqgC,EAAWP,EAAoB9/B,cAAc,GACjD+/B,EAAWzgC,eAAe1D,GAAMwqB,4BAA6BtB,EAAkB,EAAK,GACpFub,EAAS/gC,eAAe1D,GAAM4qB,0BAA2B1B,EAAkB,EAAK,GAC5E3mD,KAAKk6D,UAAUp2D,OAAS,IACxB9D,KAAKk6D,UAAU,GAAK,IAAInnC,GAC5B/yB,KAAKk6D,UAAU,GAAGvmC,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAM4qB,0BAA2B,EAAM/B,EAA0C,GAAnBsb,EAAW3qD,KAC3K,MAEgByqD,EAAsBt9B,8BAA8By9B,EAAiBC,GAAiB,GACtFF,EAAaF,EAAsB7/B,cAAc,GACjD+/B,EAAWzgC,eAAe1D,GAAMwqB,4BAA6BtB,EAAkB,EAAK,GAChF3mD,KAAKk6D,UAAUp2D,OAAS,IACxB9D,KAAKk6D,UAAU,GAAK,IAAInnC,GAC5B/yB,KAAKk6D,UAAU,GAAGvmC,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAMwqB,4BAA6B,EAAM3B,EAA0C,GAAnBsb,EAAW3qD,MAEjK2gD,GAAkBgK,EAAWvgC,4BAC7BrhC,KAAKm6D,cAAgB,EACrBvC,EAAiBlsD,KAAKQ,IAAI,EAAK0rD,EAC3C,KACa,CACD,MAAMuK,EAAmD,MAA/BhgD,EAAWigD,iBAA4BjgD,EAAWigD,iBAAmBjgD,EAAWyD,SAC1G,IAAK,IAAIna,EAAI,EAAGA,EAAI02D,EAAiBrgC,kBAAmBr2B,IAAK,CACzD,IAAIm2D,EAAaO,EAAiBtgC,cAAcp2B,GAC5Cy2D,EAAyC,MAA7B//C,EAAWkgD,gBAAwE,MAA9ClgD,EAAWkgD,eAAexgC,cAAcp2B,GAAc0W,EAAWkgD,eAAexgC,cAAcp2B,GAAK02D,EAAiBtgC,cAAcp2B,GACnLm2D,EAAW3qD,MAAQirD,EAASjrD,OAC5B2qD,EAAaM,GAEjBN,EAAWzgC,eAAe1D,GAAMwqB,4BAA6BtB,EAAkB,EAAK,GACpFub,EAAS/gC,eAAe1D,GAAM4qB,0BAA2B1B,EAAkB,EAAK,GAC5E3mD,KAAKk6D,UAAUp2D,QAAU2H,IACzBzL,KAAKk6D,UAAUzuD,GAAK,IAAIsnB,GAC5B/yB,KAAKk6D,UAAUzuD,GAAGkoB,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAM4qB,0BAA2B,EAAM/B,EAA0C,GAAnBsb,EAAW3qD,MAC3J2gD,GAAkBgK,EAAWvgC,2BAC7C,CACYrhC,KAAKm6D,cAAgBgI,EAAiBrgC,kBACtC81B,EAAiBlsD,KAAKQ,IAAI,EAAK0rD,EAC3C,CACQ,MAAM0K,EAAuB7kC,GAAM8kC,6BAA6BpgD,EAAW4F,QAC3E/nB,KAAK83D,UAAYwK,EACjB,IAAIE,EAAeF,EACnB,GAAI51B,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAkB,CACpG,MAAM4vB,EAAW/1B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,GAC9G6vB,EAASh2B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,GAClH7yC,KAAK83D,WAAe2K,GAAY,GAAOA,EAAW//D,EAAOqV,YAAc,IAAMrV,EAAOqV,YAAc,GAAM0lB,GAAM8kC,6BAA6BE,GAC3ID,GAAkBE,GAAU,GAAOA,EAAShgE,EAAOqV,YAAc,IAAMrV,EAAOqV,YAAc,GAAM0lB,GAAM8kC,6BAA6BG,EACjJ,CACYh2B,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,SAC9DxF,KAAK83D,WAAcprB,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,WAAOkoB,OAAWA,GAAW,GAAU,IACxH80C,GAAiB91B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,WAAOkoB,OAAWA,GAAW,GAAS,KAEzH1tB,KAAK+3D,gBAAkByK,EAAexiE,KAAK83D,WAAaxR,EACxD,IAAIqc,EAAsB/K,EACtBgL,EAAoBhL,EACpBiL,EAAsB,EACtBC,EAAoB,EACxB,GAAIrD,EAAa,CACb,MAAMsD,EAAwC,EAArBjV,EAAe,IAAY,EAC9CkV,EAAoC,EAAnBjV,EAAa,IAAY,EAChD,IAAIkV,EAAc9gD,EAAW6H,IACzBk5C,EAAY/gD,EAAW6H,IACvB0iB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAgB,IAAEF,MAAOouC,EAAcf,KAC3EowB,EAAcv2B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAgB,IAAEF,MAAOouC,EAAcf,GAAiB,GAC1GqwB,EAAYx2B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAgB,IAAEF,MAAOouC,EAAcf,GAAiB,IAE5G,IAAIswB,EAAWz3D,KAAKO,KAAK,EAAKP,KAAKQ,IAAI,GAAM+2D,EAAcvgE,EAAOuV,WAAavV,EAAOuV,UAAY8qD,IAC9FK,EAAS13D,KAAKO,KAAK,EAAKP,KAAKQ,IAAI,GAAMg3D,EAAYxgE,EAAOuV,WAAavV,EAAOuV,UAAY+qD,IAC9F,MAAMK,EAA2D,MAA5C33D,KAAKgE,KAAK,EAAIyzD,GAAYz3D,KAAKE,GAAK,KACnD03D,EAA2D,MAA5C53D,KAAKgE,KAAK,EAAIyzD,GAAYz3D,KAAKE,GAAK,KACnD23D,EAAuD,MAA1C73D,KAAKgE,KAAK,EAAI0zD,GAAU13D,KAAKE,GAAK,KAC/C43D,EAAuD,MAA1C93D,KAAKgE,KAAK,EAAI0zD,GAAU13D,KAAKE,GAAK,KAC/C63D,EAAkB9c,EAAmBjkD,EAAOyV,mBAClD,IAAIurD,EAAmBvhD,EAAWoF,SAC9Bo8C,EAAiBxhD,EAAWoF,SAC5BmlB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcf,KACjF6wB,EAAmBh3B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcf,GAAiB,GACrH8wB,EAAiBj3B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcf,GAAiB,IAEvH,MAAM+wB,EAAaT,EAAWO,EAAmBD,EAAkB,GAC7DI,EAAWT,EAASO,EAAiBF,EAAkB,GACvDK,EAAcp4D,KAAKO,IAAI,EAAK23D,GAC5BG,EAAcr4D,KAAKO,IAAI,GAAM23D,GAC7BI,EAAYt4D,KAAKO,IAAI,EAAK43D,GAC1BI,EAAYv4D,KAAKO,IAAI,GAAM43D,GACjC7jE,KAAKw6D,eAAiB6I,EACtBrjE,KAAKy6D,eAAiB6I,EACtBtjE,KAAK06D,qBAAuB6I,EAAaF,GAAgB/c,EACzDtmD,KAAK26D,qBAAuB6I,EAAaF,GAAgBhd,EACzDtmD,KAAK46D,eAAiB56D,KAAKu6D,gBAAkBuJ,EAAcp3B,EAAMqxB,uBACjE/9D,KAAK66D,eAAiB76D,KAAKu6D,gBAAkBwJ,EAAcr3B,EAAMqxB,uBACjE/9D,KAAK86D,qBAAuBkJ,EAAYF,GAAexd,EACvDtmD,KAAK+6D,qBAAuBkJ,EAAYF,GAAezd,CACnE,CACQ,GAAIoZ,EAAY,CACZ,MAAMwE,EAAsBpW,EAAe,IACrCqW,EAAoBpW,EAAa,IACvC,IAAIqW,EAAiBjiD,EAAWiH,OAC5Bi7C,EAAeliD,EAAWiH,OAC1BsjB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcf,KAC9EuxB,EAAiB13B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcf,GAAiB,GAChHwxB,EAAe33B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcf,GAAiB,IAElH,IAAIyxB,EAAc54D,KAAKQ,IAAI,EAAKg4D,EAAsBE,GAAkB1hE,EAAOqW,YAAc,IACzFwrD,EAAY74D,KAAKQ,IAAI,EAAKi4D,EAAoBE,GAAgB3hE,EAAOqW,YAAc,IACvFurD,EAA4B,GAAdA,EAAmD,GAA9B54D,KAAKuC,IAAIq2D,EAAa,GACzDC,EAAwB,GAAZA,EAA+C,GAA5B74D,KAAKuC,IAAIs2D,EAAW,GACnD,MAAMC,EAA0B,EAAM94D,KAAKqC,KAAK,EAAMu2D,EAAcA,EAAc,GAC5EG,EAAwB,EAAM/4D,KAAKqC,KAAK,EAAMw2D,EAAYA,EAAY,GAC5EvkE,KAAKq7D,gBAAkBiJ,EACvBtkE,KAAKs7D,sBAAwBiJ,EAAYD,GAAehe,EACxDtmD,KAAKu7D,mBAAqBiJ,EAC1BxkE,KAAKw7D,yBAA2BiJ,EAAwBD,GAA2Ble,CAC/F,CACQ,GAAIgZ,EAAoB,CACpB,IAAIoF,EAAkBviD,EAAW6jB,eAC7B2+B,EAAgBxiD,EAAW6jB,eAC3B4+B,EAA0B9W,EAAe,IACzC+W,EAAwB9W,EAAa,IACrC+W,EAAoBp5D,KAAKQ,IAAI,EAAKiW,EAAW8jB,kBAAoBvjC,EAAO2O,eAAiB,IACzF0zD,EAAkBr5D,KAAKQ,IAAI,EAAKiW,EAAW8jB,kBAAoBvjC,EAAO2O,eAAiB,IACvF2zD,EAA4BlX,EAAe,IAC3CmX,EAA0BlX,EAAa,IACvCrhB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,mBAAmBF,MAAOouC,EAAcf,KACvF6xB,EAAmBh4B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,mBAAmBF,MAAOouC,EAAcf,GAAiB,GAC3H8xB,EAAiBj4B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,mBAAmBF,MAAOouC,EAAcf,GAAiB,IAEzHnG,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcf,KACtFiyB,EAAoBp5D,KAAKQ,IAAI,EAAKR,KAAKO,IAAI,EAAMygC,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcf,GAAiB,IAAWnwC,EAAO2O,eAAiB,KAC3L0zD,EAAkBr5D,KAAKQ,IAAI,EAAKR,KAAKO,IAAI,EAAMygC,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcf,GAAiB,IAAWnwC,EAAO2O,eAAiB,MAE7LyzD,GAAqBE,EACrBD,GAAmBE,EACnB,IAAIC,EAAex5D,KAAKQ,IAAI,EAAMw4D,EAAkBE,GAA4BliE,EAAO0V,aAAe,IAClG+sD,EAAaz5D,KAAKQ,IAAI,EAAMy4D,EAAgBE,GAA0BniE,EAAO0V,aAAe,IAChGpY,KAAK04D,WAAawM,EAClBllE,KAAK24D,iBAAmBwM,EAAaD,GAAgB5e,EACrDtmD,KAAKmmC,gBAAkBhkB,EAAWgkB,gBAClC,IAAIi/B,EAA0B15D,KAAKO,IAAI,EAAGiF,EAAsB4zD,IAAuBp4B,EAAMia,iBACzF0e,EAAwB35D,KAAKO,IAAI,EAAGiF,EAAsB6zD,IAAqBr4B,EAAMia,kBACrFme,EAAoB,GAAKpiE,EAAO2O,eAAiB,IAAM0zD,EAAkB,GAAKriE,EAAO2O,eAAiB,MACtG+zD,GAA0BN,GAAqBpiE,EAAO2O,eAAiB,GACvEg0D,GAAwBN,GAAmBriE,EAAO2O,eAAiB,IAEvErR,KAAKg5D,oBAAsB,EACvBh5D,KAAK+4D,eAAiB,IACtB/4D,KAAK+4D,eAAiB,GACtBqM,GAA0B,GAAKC,GAAwB,GAA4B,GAAvBrlE,KAAK+4D,eACjE/4D,KAAKg5D,oBAAsBh5D,KAAK+4D,gBAAkB,GAE7CqM,EAAyB,GAAKC,EAAuB,IAC1DrlE,KAAK+4D,eAAiB,GAE1B/4D,KAAK64D,kBAAoBuM,EACzBplE,KAAK84D,uBAAmD,GAA1BsM,EAA8B,EAAI15D,KAAKuC,IAAIo3D,EAAuBD,EAAwB,EAAM9e,GAC9HtmD,KAAKktB,qBAAuB/K,EAAW+K,qBACvCltB,KAAKkmC,kBAAoB/jB,EAAW+jB,iBAChD,CACQ,IAAIo/B,EAAc,EACdC,EAA0B,EAC9B,GAAI5F,EAAU,CACV,MAAM6F,EAA2B1X,EAAe,IAC1C2X,EAAyB1X,EAAa,IAC5C,IAAI2X,EAAsBvjD,EAAW2H,YACjC67C,EAAoBxjD,EAAW2H,YAC/B4iB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAiB,KAAEF,MAAOouC,EAAcf,KAC5E6yB,EAAsBh6D,KAAKO,IAAI,EAAKygC,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAiB,KAAEF,MAAOouC,EAAcf,GAAiB,IACjI8yB,EAAoBj6D,KAAKO,IAAI,EAAKygC,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAiB,KAAEF,MAAOouC,EAAcf,GAAiB,KAEnI,MAAM+yB,EAAyH,GAAzGl6D,KAAKQ,IAAI,EAAKR,KAAKuC,IAAIu3D,EAA2BE,EAAsBhjE,EAAOkQ,iBAAkB,MACjHizD,EAAmH,GAArGn6D,KAAKQ,IAAI,EAAKR,KAAKuC,IAAIw3D,EAAyBE,EAAoBjjE,EAAOkQ,iBAAkB,MACjH5S,KAAKi8D,SAAW2J,EAChB5lE,KAAKk8D,cAAgBxwD,KAAKO,IAAI,GAAM45D,EAAcD,GAAiBtf,GACnEgf,EAAc55D,KAAKO,IAAI25D,EAAeC,GACtC,MAAMC,EAAyBhY,EAAe,IACxCiY,EAAuBhY,EAAa,IAC1C,IAAIiY,EAAoB7jD,EAAWikB,UAAY0/B,EAC3CG,EAAkB9jD,EAAWikB,UAAY2/B,EACzCr5B,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,KAClFmzB,EAAoBt5B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,GAASizB,EAChIG,EAAkBv5B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,cAAcF,MAAOouC,EAAcf,GAAiB,GAAQkzB,GAEjI,MAAMG,EAA0Bx6D,KAAKgB,OAAOs5D,EAAoB,GAAKtjE,EAAOiQ,mBAAqBmrD,GAC3FqI,EAAwBz6D,KAAKgB,OAAOu5D,EAAkB,GAAKvjE,EAAOiQ,mBAAqBmrD,GAC9D,MAA3B99D,KAAK87D,mBACL97D,KAAK67D,qBAAuB77D,KAAK87D,mBAGjC97D,KAAK67D,qBAAuBqK,EAEhClmE,KAAK87D,mBAAqBqK,EAC1BZ,EAAkF,IAAvDvlE,KAAK67D,qBAAuB77D,KAAK87D,oBAA4BnV,EACxF3mD,KAAK+7D,qBAAuB,EAC5B/7D,KAAKg8D,0BAA4B,EAAM1V,EACvC,MAAMiB,EAAe,EAAM77C,KAAKE,GAAKlJ,EAAOmQ,YAAc65B,EAAMia,iBAChElpB,GAAMwqB,4BAA4B33B,kBAAkBi3B,EAAc7kD,EAAOoQ,eACzE9S,KAAKm8D,YAAc1+B,GAAMwqB,4BAA4Bt4B,EAAE,GACvD3vB,KAAKo8D,YAAc3+B,GAAMwqB,4BAA4Br4B,EAAE,GACvD5vB,KAAKq8D,YAAc5+B,GAAMwqB,4BAA4Br4B,EAAE,EACnE,CACQ,IAAIw2C,EAAgB,EACpB,GAAIxG,EAAY,CACZ,MAAMyG,EAAsBvY,EAAe,IACrCwY,EAAoBvY,EAAa,IACvC,IAAIwY,EAAiBpkD,EAAWqE,OAC5BggD,EAAerkD,EAAWqE,OAC1BkmB,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcf,KAC9E0zB,EAAiB75B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcf,GAAiB,GAChH2zB,EAAe95B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcf,GAAiB,IAE9GnG,EAAM6jB,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcf,KACnF0zB,IAAmB75B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,WAAOkoB,OAAWA,GAAW,GAAShrB,EAAO0d,WAAW1a,WAAW,eAAe+a,mBAAqB/d,EAAOuQ,YAC/LuzD,IAAiB95B,EAAMyyB,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,WAAOkoB,OAAWA,GAAW,GAAQhrB,EAAO0d,WAAW1a,WAAW,eAAe+a,mBAAqB/d,EAAOuQ,aAEhM,MAAMwzD,EAA0G,KAA5F/6D,KAAKQ,IAAI,EAAKR,KAAKuC,IAAIo4D,EAAsBE,EAAiB7jE,EAAOuQ,YAAa,OAChGyzD,EAAoG,KAAxFh7D,KAAKQ,IAAI,EAAKR,KAAKuC,IAAIq4D,EAAoBE,EAAe9jE,EAAOuQ,YAAa,OAChGjT,KAAK68D,WAAa4J,EAClBzmE,KAAK88D,iBAAmB4J,EAAYD,GAAengB,EACnD8f,EAAgB16D,KAAKO,IAAIw6D,EAAaC,GACtC,MAAMnf,EAAe,EAAM77C,KAAKE,GAAKlJ,EAAOqQ,cAAgB25B,EAAMia,iBAClElpB,GAAMwqB,4BAA4B33B,kBAAkBi3B,EAAc7kD,EAAOsQ,iBACzEhT,KAAK+8D,cAAgBt/B,GAAMwqB,4BAA4Bt4B,EAAE,GACzD3vB,KAAKg9D,cAAgBv/B,GAAMwqB,4BAA4Br4B,EAAE,GACzD5vB,KAAKi9D,cAAgBx/B,GAAMwqB,4BAA4Br4B,EAAE,EACrE,CACQ,GAAI5vB,KAAK62D,qBACL72D,KAAKg3D,qBAAuB,EAC5Bh3D,KAAKi3D,eAAiB,EACtBj3D,KAAK82D,oBAAqB,OAEzB,GAAK92D,KAAK82D,mBA0CV,CACD6L,EAAsB,EACtBC,EAAoB,EACpBC,EAAsB,EACtBC,EAAoB,EACpB,IAAI6D,EAAoB,EACpBjH,IACAiH,GAAqBj6B,EAAMsxB,uBAC3B2B,IACAgH,GAAqB3mE,KAAKy7D,eAAe33D,QACzC87D,IACA+G,GAAqBjkE,EAAOwQ,uBAC5BmsD,IACAsH,GAAqB3mE,KAAKs4D,mCAC9Bt4D,KAAKi3D,gBAAkB3Q,EACnBtmD,KAAKi3D,gBAAkB0P,IACvB3mE,KAAK+2D,yBAA0B,EAE/C,KA5D2C,CACE,GAA7B/2D,KAAKg3D,uBAIL2L,EAAsB,GAHtBC,EAAoB,EAMxB,MAAMgE,EAAuB,EAAM,IAC7BC,GAAgBn7D,KAAK6D,KAAKq3D,GAChC,IAAIE,EAAgB,EAIpB,GAHIpH,IACAoH,GAAiBpkE,EAAO0W,gBAExBumD,EAAU,CACV,MAAMoH,EAAuBr7D,KAAKuC,IAAIq3D,EAAa,EAAMC,GAGzDuB,IAFkB,EAAMp7D,KAAK6D,KAAKw3D,GACFF,CAEhD,CACY,GAAIjH,EAAY,CACZ,MAAMoH,EAA8B,EAAhBZ,EACda,EAA6BvkE,EAAOwQ,sBAAwB,EAAOyzC,EACnEogB,EAAuBr7D,KAAKuC,IAAI+4D,EAAa,EAAMC,GAGzDH,IAFkB,EAAMp7D,KAAK6D,KAAKw3D,GACAF,CAElD,CACgBxH,IACAr/D,KAAKy4D,eAAgB,GAEzB,MACMyO,EADgBpJ,EAAiBnX,EACAmgB,EACjCK,EAAsBnnE,KAAKg3D,qBAAuBkQ,EACpDC,GAAuB,IACvBrE,EAAoB,GAExB9iE,KAAKg3D,qBAAuBmQ,EACxBnnE,KAAKg3D,sBAAwB,IAC7Bh3D,KAAK82D,oBAAqB,EAE1C,CAoBQ92D,KAAK43D,eAAiB+K,EACtB3iE,KAAK63D,qBAAuB+K,EAAoBD,GAAuBrc,EACvEtmD,KAAKg4D,eAAiB6K,EACtB7iE,KAAKi4D,qBAAuB6K,EAAoBD,GAAuBvc,EACvEtmD,KAAKw2D,iBAAiBxF,gBAC9B,CACI,WAAA8N,CAAY38C,EAAYwkC,GAEpB,GADA3mD,KAAKw3D,YAAc,EACI,GAAnBr1C,EAAWlL,KACXjX,KAAKsL,KAAQtL,KAAY,QAAI0C,EAAOG,aAAasf,EAAW1f,UAAUc,QAAUb,EAAOC,UAAUwf,EAAW1f,UAAUc,QACtHvD,KAAKwqB,4BAA8BrI,EAAWqI,4BAC9CxqB,KAAKyqB,kBAAoBtI,EAAWsI,kBACpCzqB,KAAK0qB,gBAAkBvI,EAAWuI,gBAClC1qB,KAAK2qB,iBAAmBxI,EAAWwI,iBACnC3qB,KAAK4qB,sBAAwBzI,EAAWyI,sBACxC5qB,KAAK6qB,oBAAsB1I,EAAW0I,oBACtC7qB,KAAK+qB,aAAe5I,EAAW4I,aAC/B/qB,KAAKgrB,aAAe7I,EAAW6I,aAC/BhrB,KAAKirB,aAAe9I,EAAW8I,aAC/BjrB,KAAKkrB,iBAAmB/I,EAAW+I,iBACnClrB,KAAKmrB,WAAahJ,EAAWgJ,gBAE5B,GAAuB,GAAnBhJ,EAAWlL,KAChBjX,KAAK+qB,aAAe5I,EAAW4I,aAC/B/qB,KAAKgrB,aAAe7I,EAAW6I,aAC/BhrB,KAAKirB,aAAe9I,EAAW8I,aAC/BjrB,KAAKkrB,iBAAmB/I,EAAW+I,iBACnClrB,KAAKmrB,WAAahJ,EAAWgJ,gBAE5B,GAAuB,GAAnBhJ,EAAWlL,KAChBjX,KAAKsL,KAAQtL,KAAY,QAAImiB,EAAWsF,eAAiBtF,EAAW8H,uBACpEjqB,KAAKw3D,YAAc,IACnBx3D,KAAK+qB,aAAe5I,EAAW4I,aAC/B/qB,KAAKgrB,aAAe7I,EAAW6I,aAC/BhrB,KAAKirB,aAAe9I,EAAW8I,aAC/BjrB,KAAKkrB,iBAAmB/I,EAAW+I,iBACnClrB,KAAKmrB,WAAahJ,EAAWgJ,gBAE5B,GAAuB,GAAnBhJ,EAAWlL,KAChBjX,KAAKsL,KAAOgC,EAAY6U,EAAW4iB,UAAWx3B,EAA6BC,GAC3ExN,KAAK+qB,aAAe5I,EAAW4I,aAC/B/qB,KAAKgrB,aAAe7I,EAAW6I,aAC/BhrB,KAAKirB,aAAe9I,EAAW8I,aAC/BjrB,KAAKkrB,iBAAmB/I,EAAW+I,iBACnClrB,KAAKmrB,WAAahJ,EAAWgJ,gBAE5B,GAAuB,GAAnBhJ,EAAWlL,KAChBjX,KAAKsL,KAAOtL,KAAKwmC,cAAc1I,cAAc3b,EAAWqkB,cAAerkB,EAAWlL,MAClFjX,KAAK+qB,aAAe5I,EAAW4I,aAC/B/qB,KAAKgrB,aAAe7I,EAAW6I,aAC/BhrB,KAAKirB,aAAe9I,EAAW8I,aAC/BjrB,KAAKkrB,iBAAmB/I,EAAW+I,iBACnClrB,KAAKmrB,WAAahJ,EAAWgJ,gBAE5B,GAAuB,GAAnBhJ,EAAWlL,KAChBjX,KAAKsL,KAAOtL,KAAKwmC,cAAc1I,cAAc3b,EAAWqkB,cAAerkB,EAAWlL,MAClFjX,KAAK+qB,aAAe5I,EAAW4I,aAC/B/qB,KAAKgrB,aAAe7I,EAAW6I,aAC/BhrB,KAAKirB,aAAe9I,EAAW8I,aAC/BjrB,KAAKkrB,iBAAmB/I,EAAW+I,iBACnClrB,KAAKmrB,WAAahJ,EAAWgJ,gBAE5B,GAAuB,GAAnBhJ,EAAWlL,KAChBjX,KAAKsL,KAAOtL,KAAKgnC,aAAalJ,cAAc3b,EAAW6kB,aAAc,GACrEhnC,KAAK+qB,aAAe5I,EAAW4I,aAC/B/qB,KAAKgrB,aAAe7I,EAAW6I,aAC/BhrB,KAAKirB,aAAe9I,EAAW8I,aAC/BjrB,KAAKkrB,iBAAmB/I,EAAW+I,iBACnClrB,KAAKmrB,WAAahJ,EAAWgJ,gBAE5B,GAAuB,GAAnBhJ,EAAWlL,KAAW,CAC3B,IAAK,IAAIxL,EAAI,EAAGA,EAAI/I,EAAOia,UAAWlR,IAClCzL,KAAK0mC,qBAAqBj7B,GAAGqyB,cAAc3b,EAAWukB,qBAAqBj7B,GAAIirD,GAAgB0Q,GAA8B37D,IAEjIzL,KAAKsL,KAAO,KACZtL,KAAK+qB,aAAe5I,EAAW4I,aAC/B/qB,KAAKgrB,aAAe7I,EAAW6I,aAC/BhrB,KAAKirB,aAAe9I,EAAW8I,aAC/BjrB,KAAKkrB,iBAAmB/I,EAAW+I,iBACnClrB,KAAKmrB,WAAahJ,EAAWgJ,UACzC,MAEYnrB,KAAKsL,KAAO,IAExB,CACI,cAAA+7D,CAAevuC,GACX,GAAiB,GAAb94B,KAAKiX,KACL,OAAOjX,KAAK0mC,qBAAqB5N,GAAOxtB,KAGxC,MAAM,IAAIlI,MAAM,8CAE5B,CACI,iCAAOkkE,CAA2B9hE,GAC9B,OAAOs/B,GAAWkK,mBAAmBtsC,EAAOyY,kBAA4B,EAAR3V,GAAa,KACrF,CACI,SAAO4hE,CAA8B5hE,GACjC,OAAO,GAAKkG,KAAK6D,KAAKmnD,GAAgB4Q,2BAA2B9hE,GACzE,EAEA,MAAM+hE,GACF,WAAAnmE,GACIpB,KAAKm6B,YAAc,GACnBn6B,KAAK8vC,OAAQ,EACb9vC,KAAKwnE,yBAA2B,IACxC,EAEO,MAAM/pC,GACT,aAAAgqC,GACI,MAAM7sB,EAAe56C,KAAKw6B,KAAK6Y,kBAC/B,IAAK,IAAI5nC,EAAIzL,KAAKkwC,SAASpsC,OAAQ2H,EAAImvC,EAAcnvC,IACjDzL,KAAKkwC,SAASzkC,GAAK,IAAI87D,GAE3BvnE,KAAKkwC,SAASpsC,OAAS82C,EACvB,IAAK,IAAInvC,EAAI,EAAGA,EAAImvC,EAAcnvC,IAAK,CACnC,MAAMgvB,EAAUz6B,KAAKw6B,KAAK0V,SAASzkC,GAC7Bi8D,EAAe1nE,KAAKkwC,SAASzkC,GACnC,IAAK,IAAIuZ,EAAI0iD,EAAavtC,YAAYr2B,OAAQkhB,EAAIyV,EAAQN,YAAYr2B,OAAQkhB,IAC1E0iD,EAAavtC,YAAYnV,GAAK,IAAI0xC,GAGtC,GADAgR,EAAavtC,YAAYr2B,OAAS22B,EAAQN,YAAYr2B,OAClD4jE,EAAa53B,OAASrV,EAAQqV,QAC9B43B,EAAa53B,MAAQrV,EAAQqV,MACzB43B,EAAa53B,OACb,IAAK,MAAMqW,KAAmBuhB,EAAavtC,YACvCgsB,EAAgBwY,iBAIxC,CACA,CACI,cAAAgJ,CAAentC,GACX,GAAY,MAARA,EAAc,CACdA,EAAK4nC,iBAAmB5nC,EAAK5U,SAC7B4U,EAAK6nC,eAAiB,KACtB,IAAK,IAAIzuB,EAAe,EAAGA,EAAepZ,EAAK6Y,kBAAmBO,IAC9D,IAAK,IAAIf,EAAkB,EAAGA,EAAkBrY,EAAK0V,SAAS0D,GAAczZ,YAAYr2B,OAAQ+uC,IAAmB,CAC/G,MAAM1wB,EAAaqY,EAAK0V,SAAS0D,GAAczZ,YAAY0Y,GAC3D1wB,EAAWigD,iBAAmBjgD,EAAWyD,SACzCzD,EAAWkgD,eAAiB,KAC5BlgD,EAAW2uC,mBAAqB3uC,EAAWuF,WAC3CvF,EAAWylD,iBAAmB,IAClD,CAEA,CACA,CACI,iBAAAC,CAAkBrtC,GACd,GAAY,MAARA,EAAc,CACdx6B,KAAKynE,gBACL,MAAM3J,EAAiB99D,KAAK8nE,oBAC5B,IAAK,IAAIl0B,EAAe,EAAGA,EAAepZ,EAAK6Y,kBAAmBO,IAC9D,IAAK,IAAIf,EAAkB,EAAGA,EAAkBrY,EAAK0V,SAAS0D,GAAczZ,YAAYr2B,OAAQ+uC,IAAmB,CAC/G,MAAM1wB,EAAaqY,EAAK0V,SAAS0D,GAAczZ,YAAY0Y,GACrDsT,EAAkBnmD,KAAKkwC,SAAS0D,GAAczZ,YAAY0Y,GAChEpV,GAAMohC,2BAA2B18C,GACjCgkC,EAAgBsR,YAAc,EAC9BtR,EAAgBuR,gBAAkB,EAClC,IAAK,IAAInoB,EAAgB,EAAGA,EAAgB7sC,EAAO6c,iBAAmB,EAAGgwB,IACrE4W,EAAgBwR,aAAapoB,GAAiB,EAClD4W,EAAgBiM,QAAU,EAC1BjM,EAAgB2Y,YAAY38C,EAAYniB,KAAK2mD,kBAC7CR,EAAgB0X,yBAAyB79D,KAAMmiB,EAAY27C,EAC/E,CAEA,CACQ,IAAIiK,EAAa,IAAIx8D,aAAa,GAClCvL,KAAKgoE,eAAgB,EACrBhoE,KAAKioE,WAAWF,EAAYA,EAAY,GAAG,GAC3C/nE,KAAKgoE,eAAgB,CAC7B,CACI,sBAAAE,GACI,GAAiB,MAAbloE,KAAKw6B,MAAgBx6B,KAAKw6B,KAAKgZ,gBAAkB,EAAG,CACpD,IAAI20B,EAAiB,GACjBC,EAAoB,GACxBpoE,KAAKqoE,UAAY,GACjBroE,KAAKsoE,cAAgB,GACrBtoE,KAAKuoE,aAAe,GACpBvoE,KAAKwoE,iBAAmB,GACxBxoE,KAAKyoE,SAAW,GAChB,IAAK,IAAIhuC,EAAU,EAAGA,EAAUz6B,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmB9Y,IAAW,CAClG2tC,EAAkB3tC,GAAW,GAC7Bz6B,KAAKuoE,aAAa9tC,GAAW,GAC7Bz6B,KAAKwoE,iBAAiB/tC,GAAW,GACjC,IAAK,IAAItY,EAAa,EAAGA,EAAaniB,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYr2B,OAAQqe,IAClFniB,KAAKuoE,aAAa9tC,GAAStY,GAAc,GACzCniB,KAAKwoE,iBAAiB/tC,GAAStY,GAAc,GAC7CimD,EAAkB3tC,GAAStY,GAAc,EAE7D,CACY,IAAIisC,EAAcpuD,KAAK0oE,KAAOhmE,EAAOiR,aAAe3T,KAAK+5B,KACzD,IAAK,IAAI6Z,EAAe5zC,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmBK,EAAe5zC,KAAKw6B,KAAK6Y,kBAAmBO,IAC3H,IAAM5zC,KAAKw6B,KAAK0V,SAAS0D,GAAmB,MAAG,CAC3C,IAAIU,EACJ,IAAK,IAAIq0B,EAAa3oE,KAAKu0C,IAAKo0B,GAAc,EAAGA,IAE7C,GADAr0B,EAAUt0C,KAAKw6B,KAAK+pB,WAAW3Q,EAAc+0B,GAC9B,MAAXr0B,EAAiB,CACjB,IAAIs0B,EAAgBt0B,EAAQna,YAAY,GACpChY,EAAaniB,KAAKw6B,KAAK0V,SAAS0D,GAAczZ,YAAYyuC,GAC1DC,EAAiB,GACjBC,EAAkB,GAClBC,EAAcJ,GAAc3oE,KAAKu0C,IAC/B6Z,EACApuD,KAAKgpE,eAAeL,GAC1B,IAAK,MAAMtuC,KAAQia,EAAQpa,MACvB,GAAIG,EAAKzG,OAASm1C,IAAwE,MAAzDF,EAAenmE,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,KAAeqB,EAAKxG,IAAMg1C,EAAenmE,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,KAK3J,GAJIqB,EAAKzG,OAASm1C,IACdF,EAAenmE,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,IAAMqB,EAAKzG,MAC7Dk1C,EAAgBpmE,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,IAAMqB,EAAKpB,KAAK,GAAGvK,MAEtE2L,EAAKxG,KAAOk1C,EACZF,EAAenmE,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,IAAMqB,EAAKxG,IAC7Di1C,EAAgBpmE,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,IAAMqB,EAAKpB,KAAKoB,EAAKpB,KAAKn1B,OAAS,GAAG4qB,SAExF,CACDm6C,EAAenmE,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,IAAM+vC,EACxD,IAAK,IAAIE,EAAS,EAAGA,EAAS5uC,EAAKpB,KAAKn1B,OAAQmlE,IAC5C,GAAI5uC,EAAKpB,KAAKgwC,GAAQrwC,KAAOyB,EAAKzG,MAAQm1C,EAAY,CAClD,MAAMG,EAAmB7uC,EAAKpB,KAAKgwC,GAAQrwC,KAAOyB,EAAKpB,KAAKgwC,EAAS,GAAGrwC,KAClEuwC,EAAkBJ,EAAa1uC,EAAKzG,MAAQyG,EAAKpB,KAAKgwC,EAAS,GAAGrwC,KAClEwwC,EAAc/uC,EAAKpB,KAAKgwC,GAAQv6C,KAAO2L,EAAKpB,KAAKgwC,EAAS,GAAGv6C,KACnEo6C,EAAgBpmE,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,IAAMttB,KAAKgB,MAAM2tB,EAAKpB,KAAKgwC,EAAS,GAAGv6C,KAAO06C,EAAcD,EAAkBD,GACjID,EAAS5uC,EAAKpB,KAAKn1B,MACnE,CAEA,CAG4B,IAAK,IAAI82B,EAAM,EAAGA,EAAMl4B,EAAOma,SAAU+d,IACrC,GAA2B,MAAvBiuC,EAAejuC,GACf,GAAIl4B,EAAO0d,WAAW+B,EAAW/B,WAAWwa,IAAMpa,QAAS,CACvD,MAAM6oD,EAAkBlnD,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,WAAWF,MAC9F,GAAkD,MAA9C2iE,EAAehmD,EAAW/B,WAAWwa,KAAiB+tC,EAAajmE,EAAOiR,aAAe3T,KAAKw6B,KAAK2B,YAAc0sC,EAAejuC,GAAOutC,EAAehmD,EAAW/B,WAAWwa,IAAO,CACnL,GAAIyuC,EAAiB,CACjB,IAAIC,EAAUtpE,KAAKw6B,KACnB,GAAsC,GAAlCrY,EAAW4Y,eAAeH,GAC1B0uC,EAAQlH,iBAAmBkH,EAAQlkC,aAAa0jC,EAAgBluC,QAE/D,CACD,IAAK,IAAInvB,EAAI,EAAGA,EAAI/I,EAAOyT,iBAAkB1K,IACT,MAA5B69D,EAAQlH,kBAA4BkH,EAAQlH,kBAAoBkH,EAAQlkC,aAAa35B,KACrF69D,EAAQlH,iBAAmB,IAAIxgC,GAC/B0nC,EAAQlH,iBAAiB1mC,eAAe4tC,EAAQlkC,aAAa35B,GAAG8uB,gBAChE9uB,EAAI/I,EAAOyT,kBAGa,MAA5BmzD,EAAQlH,kBAA4B12D,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,GAAK0uC,EAAQlH,iBAAiBtgC,oBAChH3f,EAAW4Y,eAAeH,GAAO,EACjC0uC,EAAQlH,iBAAiBvgC,cAAcn2B,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,IAAIwF,KAAO0oC,EAAgBluC,GAEpH0uC,EAAQlH,iBAAiBvgC,cAAcn2B,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,IAAIyF,KAAOyoC,EAAgBluC,GAEhL,CACgD0uC,EAAQjH,eAAiBiH,EAAQlH,gBACjF,CAC4CpiE,KAAKupE,YAAYT,EAAgBluC,GAAMkuC,EAAgBluC,GAAMzY,EAAWwkB,YAAY/L,GAAMzY,EAAWykB,eAAehM,GAAMzY,EAAW/B,WAAWwa,IAChJutC,EAAehmD,EAAW/B,WAAWwa,IAAQ+tC,EAAajmE,EAAOiR,aAAe3T,KAAKw6B,KAAK2B,YAAc0sC,EAAejuC,EACnK,CACA,KACyC,CACD,IAAI4uC,EAAkB,GACtB,GAAIrnD,EAAWykB,eAAehM,IAAQ56B,KAAKw6B,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYr2B,OAC9F,IAAK,IAAI2H,EAAI,EAAGA,EAAIzL,KAAKw6B,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYr2B,OAAQ2H,IACpF+9D,EAAgB38D,KAAKpB,QAGxB,GAAI0W,EAAWykB,eAAehM,GAAO56B,KAAKw6B,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYr2B,OAAQ,CAC1G,MAAM2lE,EAAazpE,KAAKw6B,KAAK+pB,WAAWpiC,EAAWwkB,YAAY/L,GAAM+tC,GACnD,MAAdc,IACAD,EAAkBC,EAAWtvC,YAC7E,MAE4CqvC,EAAgB38D,KAAKsV,EAAWykB,eAAehM,IAEnD,IAAK,IAAIiY,EAAkB,EAAGA,EAAkB22B,EAAgB1lE,OAAQ+uC,IAAmB,CACvF,MAAM62B,EAAgBvnD,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,aAAaF,MACxFmkE,EAAkBxnD,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,eAAeF,MAClG,IAAIokE,EAAkBznD,EAAW/B,WAAWwa,GAO5C,GANI8uC,EACAE,EAAkBlnE,EAAO0d,WAAWtc,QAA2C,EAAjCqe,EAAW4Y,eAAeH,IAEnE+uC,IACLC,EAAkBlnE,EAAO0d,WAAWtc,OAAS,EAAK,EAAIpB,EAAOuT,iBAAqD,EAAjCkM,EAAW4Y,eAAeH,KAEN,MAArGwtC,EAAkBjmD,EAAWwkB,YAAY/L,IAAM4uC,EAAgB32B,IAAkB+2B,IAC9EjB,EAAajmE,EAAOiR,aAAe3T,KAAKw6B,KAAK2B,YAAc0sC,EAAejuC,GAAOwtC,EAAkBjmD,EAAWwkB,YAAY/L,IAAM4uC,EAAgB32B,IAAkB+2B,GAAkB,CACvL,GAAIF,EAAe,CACf,IAAIG,EAAgB7pE,KAAKw6B,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IAChG,GAAsC,GAAlC1wB,EAAW4Y,eAAeH,GAC1BivC,EAAczH,iBAAmByH,EAAczkC,aAAa0jC,EAAgBluC,QAE3E,CACD,IAAK,IAAInvB,EAAI,EAAGA,EAAI/I,EAAOyT,iBAAkB1K,IACH,MAAlCo+D,EAAczH,kBAA4ByH,EAAczH,kBAAoByH,EAAczkC,aAAa35B,KACvGo+D,EAAczH,iBAAmB,IAAIxgC,GACrCioC,EAAczH,iBAAiB1mC,eAAemuC,EAAczkC,aAAa35B,GAAG8uB,gBAC5E9uB,EAAI/I,EAAOyT,kBAGmB,MAAlC0zD,EAAczH,kBAA4B12D,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,GAAKivC,EAAczH,iBAAiBtgC,oBAC5H3f,EAAW4Y,eAAeH,GAAO,EACjCivC,EAAczH,iBAAiBvgC,cAAcn2B,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,IAAIwF,KAAO0oC,EAAgBluC,GAE1HivC,EAAczH,iBAAiBvgC,cAAcn2B,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,IAAIyF,KAAOyoC,EAAgBluC,GAE1L,CACoDivC,EAAcxH,eAAiBwH,EAAczH,gBACjG,MACqD,GAAIuH,EAAiB,CACtB,IAAIE,EAAgB7pE,KAAKw6B,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IAChG,GAAsC,GAAlC1wB,EAAW4Y,eAAeH,GAC1BivC,EAAc/Y,mBAAqB+Y,EAAcxkC,eAAeyjC,EAAgBluC,QAE/E,CACD,IAAK,IAAInvB,EAAI,EAAGA,EAAI/I,EAAOyT,iBAAkB1K,IACD,MAApCo+D,EAAc/Y,oBAA8B+Y,EAAc/Y,oBAAsB+Y,EAAcxkC,eAAe55B,KAC7Go+D,EAAc/Y,mBAAqB,IAAIlvB,GACvCioC,EAAc/Y,mBAAmBp1B,eAAemuC,EAAcxkC,eAAe55B,GAAG8uB,gBAChF9uB,EAAI/I,EAAOyT,kBAGqB,MAApC0zD,EAAc/Y,oBAA8BplD,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,GAAKivC,EAAc/Y,mBAAmBhvB,oBAChI3f,EAAW4Y,eAAeH,GAAO,EACjCivC,EAAc/Y,mBAAmBjvB,cAAcn2B,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,IAAIwF,KAAO0oC,EAAgBluC,GAE5HivC,EAAc/Y,mBAAmBjvB,cAAcn2B,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,IAAIyF,KAAOyoC,EAAgBluC,GAE5L,CACoDivC,EAAcjC,iBAAmBiC,EAAc/Y,kBACnG,MAEoD9wD,KAAKupE,YAAYT,EAAgBluC,GAAMkuC,EAAgBluC,GAAMzY,EAAWwkB,YAAY/L,GAAM4uC,EAAgB32B,GAAkB+2B,GAChIxB,EAAkBjmD,EAAWwkB,YAAY/L,IAAM4uC,EAAgB32B,IAAkB+2B,GAAmBjB,EAAajmE,EAAOiR,aAAe3T,KAAKw6B,KAAK2B,YAAc0sC,EAAejuC,EAC9N,CACA,CACA,CAGA,CAEA,CAEA,CACA,CACI,0BAAAkvC,CAA2B3nD,GACvB,GAAiB,MAAbniB,KAAKw6B,KAET,IAAK,IAAII,EAAM,EAAGA,EAAMl4B,EAAOma,SAAU+d,IAAO,CAE5C,GADAzY,EAAW2kB,kBAAkBlM,IAAO,GACA,GAAhCzY,EAAWwkB,YAAY/L,GAAY,CACD,GAA9BzY,EAAW/B,WAAWwa,KACtBzY,EAAW2kB,kBAAkBlM,IAAO,GACxC,QAChB,CACY,MAAMH,EAAUz6B,KAAKw6B,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAC1D,GAAe,MAAXH,EACA,SACJ,IAAIsvC,EAAoB,GAEpBA,EADA5nD,EAAWykB,eAAehM,IAAQH,EAAQN,YAAYr2B,OAClC22B,EAAQN,YAGR,CAACM,EAAQN,YAAYhY,EAAWykB,eAAehM,KAEvE,IAAK,IAAInvB,EAAI,EAAGA,EAAIs+D,EAAkBjmE,OAAQ2H,IAAK,CAC/C,MAAMo+D,EAAgBE,EAAkBt+D,GACxC,GAAqB,MAAjBo+D,EACA,SACJ,MAAMG,EAAMtnE,EAAO0d,WAAW+B,EAAW/B,WAAWwa,IAAM11B,KACe,IAAlExC,EAAO0d,WAAW+B,EAAW/B,WAAWwa,IAAMla,oBAA4BmpD,EAAcz5D,QAAW,GAAK1N,EAAO0d,WAAW+B,EAAW/B,WAAWwa,IAAMla,mBAC9H,GAAtBmpD,EAAc5yD,MAAmC,IAAtB4yD,EAAc5yD,OAAuB,eAAP+yD,GAA+B,eAAPA,GAA+B,eAAPA,GAA+B,eAAPA,GAA+B,eAAPA,IACrI,IAAtBH,EAAc5yD,OAAsB,eAAP+yD,GAA+B,eAAPA,IAC7B,GAAtBH,EAAc5yD,MAAmC,GAAtB4yD,EAAc5yD,OAAsB,eAAP+yD,GAA+B,kBAAPA,IAC1D,GAAtBH,EAAc5yD,OAAsB,YAAP+yD,GAA4B,UAAPA,GAA0B,aAAPA,KACrEH,EAAc7hC,WAAWruB,cAAuB,aAAPqwD,GAA6B,aAAPA,IAChEH,EAAc3iD,cAAuB,aAAP8iD,IAC7BH,EAAc3iD,eAAwB,eAAP8iD,GAA+B,gBAAPA,IACjD,aAAPA,GAAsBt+D,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,GAAKivC,EAAch7B,6BAA4B,IACvHg7B,EAAc3hD,gBAAyB,eAAP8hD,IAC/BH,EAAc3hD,iBAA0B,iBAAP8hD,GAAiC,kBAAPA,IACrD,eAAPA,GAAwBt+D,KAAK4F,OAAO6Q,EAAW4Y,eAAeH,GAAO,GAAK,GAAKivC,EAAch7B,6BAA4B,KAC7H1sB,EAAW2kB,kBAAkBlM,IAAO,EACpCnvB,EAAIs+D,EAAkBjmE,OAE1C,CACA,CACA,CACI,6BAAOmmE,CAAuBz6D,GAC1B,OAAQ9D,KAAKuC,IAAI,GAAMuB,EAAY,IAAQ,GAAO,EAC1D,CACI,WAAI06D,GACA,OAAOlqE,KAAKgoE,aACpB,CACI,aAAImC,GACA,OAAOnqE,KAAKoqE,WACpB,CACI,YAAIC,GACA,OAAOrqE,KAAKsqE,gBACpB,CACI,YAAID,CAAS5pE,GACT,GAAiB,MAAbT,KAAKw6B,KAAc,CACnBx6B,KAAKsqE,iBAAmB5+D,KAAKO,IAAI,EAAGP,KAAKQ,IAAIlM,KAAKw6B,KAAK2Z,SAAU1zC,IACjE,IAAI8pE,EAAYvqE,KAAKsqE,iBACrBtqE,KAAKu0C,IAAM7oC,KAAK4F,MAAMi5D,GACtBA,EAAYvqE,KAAKw6B,KAAK2B,aAAeouC,EAAYvqE,KAAKu0C,KACtDv0C,KAAK0oE,KAAOh9D,KAAK4F,MAAMi5D,GACvBA,EAAY7nE,EAAOiR,cAAgB42D,EAAYvqE,KAAK0oE,MACpD1oE,KAAK+5B,KAAOruB,KAAK4F,MAAMi5D,GACvBA,EAAY7nE,EAAOkR,cAAgB22D,EAAYvqE,KAAK+5B,MACpD/5B,KAAKk7B,KAAOxvB,KAAK4F,MAAMi5D,GACvBvqE,KAAKwqE,oBAAsB,EAC3BxqE,KAAKyqE,iBAAkB,EACvBzqE,KAAK0qE,QAAU,IAC3B,CACA,CACI,gBAAAC,GACI,GAAiB,MAAb3qE,KAAKw6B,KACL,MAAM,IAAIp3B,MACd,OAAOpD,KAAK8nE,oBAAsBplE,EAAOkR,aAAelR,EAAOiR,aAAe3T,KAAKw6B,KAAK2B,WAChG,CACI,eAAA4iC,GACI,OAAQ/+D,KAAK0oE,KAAOhmE,EAAOiR,aAAe3T,KAAK+5B,MAAQr3B,EAAOkR,aAAe5T,KAAKk7B,IAC1F,CACI,cAAA8jC,GACI,OAAQh/D,KAAK0oE,KAAOhmE,EAAOiR,aAAe3T,KAAK+5B,IACvD,CACI,cAAAivC,CAAez0B,GACX,GAAiB,MAAbv0C,KAAKw6B,KACL,OAAO,EACX,IAAIuuC,EAAarmE,EAAOiR,aAAe3T,KAAKw6B,KAAK2B,YACjD,IAAK,IAAI1B,EAAUz6B,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmB9Y,EAAUz6B,KAAKw6B,KAAK6Y,kBAAmB5Y,IAAW,CAC5H,IAAI6Z,EAAUt0C,KAAKw6B,KAAK+pB,WAAW9pB,EAAS8Z,GAC5C,GAAe,MAAXD,EAAiB,CACjB,IAAInyB,EAAaniB,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYma,EAAQna,YAAY,IAC7E,IAAK,IAAIS,EAAM,EAAGA,EAAMl4B,EAAOma,SAAU+d,IACrC,GAAIzY,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,YAAYF,MACvE,IAAK,MAAM60B,KAAQia,EAAQpa,MACnBG,EAAKrB,QAAQ,IAAOt2B,EAAOma,SAAW,EAAI+d,GACtCmuC,EAAa1uC,EAAKzG,QAClBm1C,EAAa1uC,EAAKzG,MAKtD,CACA,CACQ,OAAOm1C,CACf,CACI,eAAA6B,CAAgBjpB,EAAaE,EAAagpB,GACtC,GAAiB,MAAb7qE,KAAKw6B,KACL,OAAQ,EACZ,IAAIswC,EAAWnpB,EAAc,EAAI3hD,KAAKw6B,KAAKyZ,UACvC82B,EAASlpB,EAAc7hD,KAAKw6B,KAAK2Z,SAAYn0C,KAAKw6B,KAAKyZ,UAAYj0C,KAAKw6B,KAAK0Z,WAC7E82B,GAAe,EACfC,GAAiB,EACjBC,EAAYlrE,KAAKw6B,KAAK2W,MAC1B,IAAK,IAAI1W,EAAUz6B,KAAKw6B,KAAK6Y,kBAAoB,EAAG5Y,GAAWz6B,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmB9Y,IACtH,IAAK,IAAI8Z,EAAMu2B,EAAUv2B,EAAMw2B,EAAQx2B,IAAO,CAC1C,IAAID,EAAUt0C,KAAKw6B,KAAK+pB,WAAW9pB,EAAS8Z,GAC5C,GAAe,MAAXD,EAAiB,CACjB,IAAInyB,EAAaniB,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYma,EAAQna,YAAY,IAC7E,IAAK,IAAIS,EAAM,EAAGA,EAAMl4B,EAAOma,SAAU+d,IACjCzY,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAkB,MAAEF,QACpEwlE,GAAe,GAEf7oD,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,YAAYF,QACvEylE,GAAiB,EAG7C,CACA,CAEQ,GAAIH,EAAW,EAAG,CACd,IAAIK,EAAiB,KACjBC,EAAmB,EACvB,IAAK,IAAI72B,EAAMu2B,EAAW,EAAGv2B,GAAO,EAAGA,IAAO,CAC1C,IAAK,IAAI9Z,EAAUz6B,KAAKw6B,KAAK6Y,kBAAoB,EAAG5Y,GAAWz6B,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmB9Y,IAAW,CACjI,IAAI6Z,EAAUt0C,KAAKw6B,KAAK+pB,WAAW9pB,EAAS8Z,GAC5C,GAAe,MAAXD,EAAiB,CACjB,IAAIs0B,EAAgBt0B,EAAQna,YAAY,GACpChY,EAAaniB,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYyuC,GACrDG,EAAa/oE,KAAKgpE,eAAez0B,GACrC,IAAK,MAAMla,KAAQia,EAAQpa,MACvB,GAAI/X,EAAW/B,WAAW1d,EAAOma,SAAW,EAAIwd,EAAKrB,QAAQ,KAAOt2B,EAAO0d,WAAW1a,WAAkB,MAAEF,OAClG60B,EAAKzG,MAAQm1C,IAAiC,MAAlBoC,GAA0B9wC,EAAKxG,IAAMs3C,GACjE,GAAI9wC,EAAKxG,KAAOk1C,EACZoC,EAAiB9wC,EAAKxG,IACtBu3C,EAAmB/wC,EAAKpB,KAAKoB,EAAKpB,KAAKn1B,OAAS,GAAG4qB,SAElD,CACDy8C,EAAiBpC,EACjB,IAAK,IAAIE,EAAS,EAAGA,EAAS5uC,EAAKpB,KAAKn1B,OAAQmlE,IAC5C,GAAI5uC,EAAKpB,KAAKgwC,GAAQrwC,KAAOyB,EAAKzG,MAAQm1C,EAAY,CAClD,MAAMG,EAAmB7uC,EAAKpB,KAAKgwC,GAAQrwC,KAAOyB,EAAKpB,KAAKgwC,EAAS,GAAGrwC,KAClEuwC,EAAkBJ,EAAa1uC,EAAKzG,MAAQyG,EAAKpB,KAAKgwC,EAAS,GAAGrwC,KAClEwwC,EAAc/uC,EAAKpB,KAAKgwC,GAAQv6C,KAAO2L,EAAKpB,KAAKgwC,EAAS,GAAGv6C,KACnE08C,EAAmB1/D,KAAKgB,MAAM2tB,EAAKpB,KAAKgwC,EAAS,GAAGv6C,KAAO06C,EAAcD,EAAkBD,GAC3FD,EAAS5uC,EAAKpB,KAAKn1B,MACnE,CAEA,CAIA,CACA,CACsC,MAAlBqnE,IACAD,EAAYE,EAAmB1oE,EAAO0d,WAAW1a,WAAkB,MAAE+a,kBACrE8zB,GAAO,EAE3B,CACA,CACQ,GAAIy2B,GAAgBC,EAAgB,CAChC,IAAI12B,EAAMu2B,EACNO,GAAQ,EACR9pE,EAAe,EACnB,MAAQ8pE,GAAO,CACX,IAAItC,EAAarmE,EAAOiR,aAAe3T,KAAKw6B,KAAK2B,YAC7CiyB,EAAc,EAIlB,GAHI6c,IACAlC,EAAa/oE,KAAKgpE,eAAez0B,IAEjCy2B,EAAc,CACd,IAAIM,GAAW,EACf,IAAK,IAAI7wC,EAAUz6B,KAAKw6B,KAAK6Y,kBAAoB,EAAG5Y,GAAWz6B,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmB9Y,IACtH,GAAgB,GAAZ6wC,EAAmB,CACnB,IAAIh3B,EAAUt0C,KAAKw6B,KAAK+pB,WAAW9pB,EAAS8Z,GAC5C,GAAe,MAAXD,EAAiB,CACjB,IAAInyB,EAAaniB,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYma,EAAQna,YAAY,IAC7E,IAAK,IAAIS,EAAM,EAAGA,EAAMl4B,EAAOma,SAAU+d,IACrC,GAAgB,GAAZ0wC,GAAqBnpD,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAkB,MAAEF,OACtF8uC,EAAQpa,MAAMqxC,MAAKjpD,GAAKA,EAAE0W,QAAQ,IAAOt2B,EAAOma,SAAW,EAAI+d,IAAO,CACzE0wC,GAAW,EACXh3B,EAAQpa,MAAMsxC,MAAK,SAAU77C,EAAGC,GAAK,OAAQD,EAAEiE,OAAShE,EAAEgE,MAASjE,EAAEqJ,QAAQ,GAAKpJ,EAAEoJ,QAAQ,GAAKrJ,EAAEiE,MAAQhE,EAAEgE,KAAM,IACnH,IAAK,MAAMyG,KAAQia,EAAQpa,MACvB,GAAIG,EAAKrB,QAAQ,IAAOt2B,EAAOma,SAAW,EAAI+d,IAC1Cr5B,GAAiBmK,KAAKQ,IAAI68D,EAAa3a,EAAa/zB,EAAKzG,MAAQw6B,GAAgB1rD,EAAOkR,aAAe5T,KAAKyrE,6BAA6BP,GACrI7wC,EAAKzG,MAAQm1C,GACb,IAAK,IAAIE,EAAS,EAAGA,EAAS5uC,EAAKpB,KAAKn1B,OAAQmlE,IAAU,CACtD,GAAI5uC,EAAKpB,KAAKgwC,EAAS,GAAGrwC,KAAOyB,EAAKzG,OAASm1C,EAAY,CACvD,MAAM2C,EAAahpE,EAAOkR,aAAelI,KAAKQ,IAAI68D,GAAc1uC,EAAKzG,MAAQyG,EAAKpB,KAAKgwC,EAAS,GAAGrwC,MAAOyB,EAAKpB,KAAKgwC,GAAQrwC,KAAOyB,EAAKpB,KAAKgwC,EAAS,GAAGrwC,MACnJ+yC,EAAetxC,EAAKpB,KAAKgwC,EAAS,GAAGv6C,KAAOhsB,EAAO0d,WAAW1a,WAAkB,MAAE+a,kBACxF,IAAImrD,EAAevxC,EAAKpB,KAAKgwC,GAAQv6C,KAAOhsB,EAAO0d,WAAW1a,WAAkB,MAAE+a,kBAC9E4Z,EAAKpB,KAAKgwC,GAAQrwC,KAAOyB,EAAKzG,MAAQm1C,IACtC6C,EAAevxC,EAAKpB,KAAKgwC,EAAS,GAAGv6C,MAAQ2L,EAAKpB,KAAKgwC,GAAQv6C,KAAO2L,EAAKpB,KAAKgwC,EAAS,GAAGv6C,OAASq6C,GAAc1uC,EAAKzG,MAAQyG,EAAKpB,KAAKgwC,EAAS,GAAGrwC,QAAUyB,EAAKpB,KAAKgwC,GAAQrwC,KAAOyB,EAAKpB,KAAKgwC,EAAS,GAAGrwC,MAAQl2B,EAAO0d,WAAW1a,WAAkB,MAAE+a,mBAEjQ,IAAIorD,EAAYnpE,EAAOiR,aAAejR,EAAOkR,aAAe,GAExDrS,GADAqqE,GAAgBD,GACC3rE,KAAK2mD,iBAAmB+kB,GAAchgE,KAAKN,IAAIygE,EAAYD,EAAeF,GAAchgE,KAAKN,IAAIygE,EAAYF,EAAeD,KAAgBG,GAAaF,EAAeC,IAGzKF,EAAa1rE,KAAKyrE,6BAA6BG,GAEnEV,EAAYU,CACxE,CACwDxd,EAAc1iD,KAAKQ,IAAImuB,EAAKzG,MAAQyG,EAAKpB,KAAKgwC,GAAQrwC,KAAMmwC,EACpH,CAIA,CAEA,CACA,CAEA,CACgBxnE,IAAiBwnE,EAAa3a,GAAe1rD,EAAOkR,aAAe5T,KAAKyrE,6BAA6BP,GACrG32B,IACY,GAARs2B,GAAat2B,GAAOv0C,KAAKw6B,KAAKyZ,UAAYj0C,KAAKw6B,KAAK0Z,aACpDK,EAAMv0C,KAAKw6B,KAAKyZ,UACZ42B,EAAO,GACPA,KAEJt2B,GAAOw2B,IACPM,GAAQ,EAE5B,CACY,OAAO3/D,KAAKoV,KAAKvf,EAC7B,CAEY,OAAOvB,KAAK2qE,mBAAqB3qE,KAAK8rE,aAAanqB,EAAaE,EAAagpB,EAEzF,CACI,YAAAiB,CAAanqB,EAAaE,EAAakqB,EAAe/rE,KAAKgsE,iBACvD,GAAiB,MAAbhsE,KAAKw6B,KACL,MAAM,IAAIp3B,MACd,IAAIysC,EAAO7vC,KAAKw6B,KAAK0Z,YAAc63B,EAAe,GAKlD,OAJIpqB,IACA9R,GAAQ7vC,KAAKw6B,KAAKyZ,WAClB4N,IACAhS,GAAQ7vC,KAAKw6B,KAAK2Z,UAAYn0C,KAAKw6B,KAAKyZ,UAAYj0C,KAAKw6B,KAAK0Z,aAC3DrE,CACf,CACI,WAAAzuC,CAAYo5B,EAAO,MACfx6B,KAAK2mD,iBAAmB,MACxB3mD,KAAKw6B,KAAO,KACZx6B,KAAKisE,oBAAqB,EAC1BjsE,KAAKksE,2BAA4B,EACjClsE,KAAKmsE,kBAAoB,EACzBnsE,KAAKosE,sBAAwB,EAC7BpsE,KAAKqsE,kBAAmB,EACxBrsE,KAAKssE,sBAAuB,EAC5BtsE,KAAKusE,iBAAmB,GACxBvsE,KAAKwsE,qBAAuB,GAC5BxsE,KAAKysE,iBAAmB,EACxBzsE,KAAK0sE,qBAAuB,EAC5B1sE,KAAK2sE,qBAAuB,GAC5B3sE,KAAK4sE,yBAA2B,GAChC5sE,KAAKgsE,iBAAmB,EACxBhsE,KAAK+nB,OAAS,EACd/nB,KAAK6sE,qBAAuB,EAC5B7sE,KAAK8sE,YAAa,EAClB9sE,KAAK+sE,iBAAkB,EACvB/sE,KAAKgtE,kBAAmB,EACxBhtE,KAAKitE,eAAgB,EACrBjtE,KAAKyoE,SAAW,GAChBzoE,KAAKktE,YAAa,EAClBltE,KAAKsqE,iBAAmB,EACxBtqE,KAAKu0C,IAAM,EACXv0C,KAAK0qE,QAAU,KACf1qE,KAAKmtE,QAAU,KACfntE,KAAK0oE,KAAO,EACZ1oE,KAAK+5B,KAAO,EACZ/5B,KAAKk7B,KAAO,EACZl7B,KAAKyqE,iBAAkB,EACvBzqE,KAAKotE,eAAgB,EACrBptE,KAAKwqE,oBAAsB,EAC3BxqE,KAAKqoE,UAAY,GACjBroE,KAAKuoE,aAAe,GACpBvoE,KAAKsoE,cAAgB,GACrBtoE,KAAKwoE,iBAAmB,GACxBxoE,KAAKgoE,eAAgB,EACrBhoE,KAAKoqE,aAAc,EACnBpqE,KAAKqtE,iBAAmB,EACxBrtE,KAAKstE,uCAAwC,EAC7CttE,KAAKutE,wBAA0B,IAAIptC,GACnCngC,KAAKkoD,sBAAwB,IAAIv2B,EACjC3xB,KAAKwtE,cAAgB,EACrBxtE,KAAKytE,YAAc,EACnBztE,KAAKkwC,SAAW,GAChBlwC,KAAK0tE,SAAW,IAAIngD,EACpBvtB,KAAK2tE,sBAAwBlqE,MAAMf,EAAOoX,cAAcq5C,KAAK,MAC7DnzD,KAAK4tE,kBAAmB,EACxB5tE,KAAK6tE,2BAA6B,EAClC7tE,KAAK8tE,mBAAqB,EAC1B9tE,KAAK+tE,uBAAyB,EAC9B/tE,KAAKguE,gBAAkB,EACvBhuE,KAAK80B,MAAQ,EACb90B,KAAKiuE,mBAAqB,EAC1BjuE,KAAKkuE,wBAA0B,EAC/BluE,KAAKmuE,eAAiB,GACtBnuE,KAAKouE,eAAiB,GACtBpuE,KAAKquE,kBAAoB,EACzBruE,KAAKsuE,2BAA6B,EAClCtuE,KAAKuuE,2BAA6B,EAClCvuE,KAAKwuE,2BAA6B,EAClCxuE,KAAKyuE,2BAA6B,EAClCzuE,KAAK0uE,+BAAiC,KACtC1uE,KAAK2uE,SAAW,KAChB3uE,KAAK4uE,WAAa,KAClB5uE,KAAK6uE,qBAAwBC,IACzB,MAAMC,EAAeD,EAAqBC,aACpCC,EAAcD,EAAaprE,eAAe,GAC1CsrE,EAAcF,EAAaprE,eAAe,GAIhD,IAHI3D,KAAKstE,uCAA4D,GAAlB0B,EAAY,IAA+B,GAAlBC,EAAY,IAAqD,GAAxCD,EAAYD,EAAajrE,OAAS,IAAqD,GAAxCmrE,EAAYF,EAAajrE,OAAS,KAClL9D,KAAKstE,uCAAwC,IAE5CttE,KAAKstE,sCAAuC,CAC7C,MAAMxpE,EAASirE,EAAajrE,OAC5B,IAAK,IAAI2H,EAAI,EAAGA,EAAI3H,EAAQ2H,IACxBujE,EAAYvjE,GAAK,EACjBwjE,EAAYxjE,GAAK,CAErC,EACiBzL,KAAKgoE,eAAiBkH,YAAYC,OAASnvE,KAAKqtE,iBACjDrtE,KAAKovE,mBAGLpvE,KAAKioE,WAAW+G,EAAaC,EAAaF,EAAajrE,OAAQ9D,KAAKgoE,eAChEhoE,KAAK8sE,aACD9sE,KAAK6sE,sBAAwB,GAC7Bl+C,EAAOG,MAAM,qBAAsBkgD,EAAaC,GAChDjvE,KAAK6sE,qBAAuB,GAG5B7sE,KAAK6sE,wBAG7B,EAEQ7sE,KAAKqvE,0BACO,MAAR70C,GACAx6B,KAAKsvE,QAAQ90C,EACzB,CACI,OAAA80C,CAAQ90C,GACiB,iBAAjB,EACAx6B,KAAKw6B,KAAO,IAAIuV,GAAKvV,GAEhBA,aAAgBuV,KACrB/vC,KAAKw6B,KAAOA,GAEhBx6B,KAAK0qE,QAAU,IACvB,CACI,uBAAA2E,GACIrvE,KAAK+9D,uBAAyBtgC,GAAMC,kBAAkB19B,KAAK2mD,iBAAmBjkD,EAAOyV,oBACrFnY,KAAKuvE,uBAAyBvvE,KAAK+9D,uBAAyB,EAC5D/9D,KAAKg+D,sBAAwBvgC,GAAMC,kBAAkB19B,KAAK2mD,iBAAmBjkD,EAAO0W,gBACpFpZ,KAAKwvE,sBAAwBxvE,KAAKg+D,sBAAwB,CAClE,CACI,aAAAyR,GACI,MAAMC,EAAa1vE,KAAKksE,0BAA6BlsE,KAAKisE,mBAAqB,KAAO,KAASjsE,KAAKisE,mBAAqB,IAAM,KAC/H,GAAqB,MAAjBjsE,KAAK2uE,UAAuC,MAAnB3uE,KAAK4uE,YAAsB5uE,KAAK4uE,WAAWc,YAAcA,EAAY,CACvE,MAAnB1vE,KAAK4uE,YACL5uE,KAAKovE,kBACT,MAAMO,EAAc3vE,KAAKksE,0BAA6BlsE,KAAKisE,mBAAqB,WAAa,WAAejsE,KAAKisE,mBAAqB,cAAgB,WACtJjsE,KAAK2uE,SAAW3uE,KAAK2uE,UAAY,IAAKlvB,OAAOn9C,cAAgBm9C,OAAOmwB,oBAAoB,CAAED,YAAaA,IACvG3vE,KAAK2mD,iBAAmB3mD,KAAK2uE,SAASpsE,WACtCvC,KAAK4uE,WAAa5uE,KAAK2uE,SAASkB,sBAAwB7vE,KAAK2uE,SAASkB,sBAAsBH,EAAY,EAAG,GAAK1vE,KAAK2uE,SAASmB,qBAAqBJ,EAAY,EAAG,GAClK1vE,KAAK4uE,WAAWmB,eAAiB/vE,KAAK6uE,qBACtC7uE,KAAK4uE,WAAWoB,iBAAmB,WACnChwE,KAAK4uE,WAAWqB,sBAAwB,WACxCjwE,KAAK4uE,WAAWsB,QAAQlwE,KAAK2uE,SAASwB,aACtCnwE,KAAKqvE,yBACjB,CACQrvE,KAAK2uE,SAASyB,QACtB,CACI,eAAAhB,GACyB,MAAjBpvE,KAAK2uE,UAAuC,MAAnB3uE,KAAK4uE,aAC9B5uE,KAAK4uE,WAAWyB,WAAWrwE,KAAK2uE,SAASwB,aACzCnwE,KAAK4uE,WAAa,KACd5uE,KAAK2uE,SAAS3qE,OACdhE,KAAK2uE,SAAS3qE,QAClBhE,KAAK2uE,SAAW,KAE5B,CACI,iBAAA2B,GACItwE,KAAKyvE,gBACLzvE,KAAKqtE,iBAAmB6B,YAAYC,MAAQ,GACpD,CACI,IAAAoB,GACQvwE,KAAKgoE,gBAEThoE,KAAK2nE,eAAe3nE,KAAKw6B,MACzBx6B,KAAKkoE,yBACLloE,KAAKyvE,gBACLzvE,KAAK6nE,kBAAkB7nE,KAAKw6B,MAC5Bx6B,KAAKgoE,eAAgB,EAC7B,CACI,KAAAwI,GACI,GAAKxwE,KAAKgoE,gBAEVhoE,KAAKgoE,eAAgB,EACrBhoE,KAAKoqE,aAAc,EACnBpqE,KAAKisE,oBAAqB,EAC1BjsE,KAAKqoE,UAAY,GACjBroE,KAAKsoE,cAAgB,GACrBtoE,KAAKyoE,SAAW,GACC,MAAbzoE,KAAKw6B,MAAc,CACnBx6B,KAAKw6B,KAAKkW,YAAc,EACxB1wC,KAAKw6B,KAAKmW,aAAe,EACzB3wC,KAAKw6B,KAAK4nC,iBAAmB,KAC7BpiE,KAAKw6B,KAAK6nC,eAAiB,KAC3B,IAAK,IAAIzuB,EAAe,EAAGA,EAAe5zC,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmBK,IACjG5zC,KAAKuoE,aAAa30B,GAAgB,GAClC5zC,KAAKwoE,iBAAiB50B,GAAgB,EAEtD,CACA,CACI,cAAA68B,GACIzwE,KAAKisE,oBAAqB,EAC1BjsE,KAAKoqE,aAAc,EACnBpqE,KAAKuwE,MACb,CACI,YAAAG,GAGI,GAFA1wE,KAAK80B,MAAQ,EACb90B,KAAK2wE,eACY,MAAb3wE,KAAKw6B,KACL,IAAK,MAAMktC,KAAgB1nE,KAAKkwC,SAC5B,IAAK,MAAMiW,KAAmBuhB,EAAavtC,YACvCgsB,EAAgBwY,iBAIpC,CACI,WAAA4K,CAAYqH,EAAaC,EAAWj9B,EAAcf,EAAiBi+B,GAC/D,IAAIv7C,EAAMq7C,EAAcluE,EAAO0d,WAAW0wD,GAASrwD,kBAC/CswD,EAAUF,EAAYnuE,EAAO0d,WAAW0wD,GAASrwD,kBAerD,OAdI/d,EAAO0d,WAAW0wD,GAAStwD,QACI,MAA3BxgB,KAAKqoE,UAAUyI,IAAoB9wE,KAAKqoE,UAAUyI,IAAYv7C,GAAOv1B,KAAKsoE,cAAcwI,IAAYC,IACpG/wE,KAAKqoE,UAAUyI,GAAWv7C,EAC1Bv1B,KAAKsoE,cAAcwI,GAAWC,GAI+B,MAA7D/wE,KAAKuoE,aAAa30B,GAAcf,GAAiBi+B,IAC9C9wE,KAAKuoE,aAAa30B,GAAcf,GAAiBi+B,IAAYv7C,GAC7Dv1B,KAAKwoE,iBAAiB50B,GAAcf,GAAiBi+B,IAAYC,IACpE/wE,KAAKuoE,aAAa30B,GAAcf,GAAiBi+B,GAAWv7C,EAC5Dv1B,KAAKwoE,iBAAiB50B,GAAcf,GAAiBi+B,GAAWC,GAGjEx7C,CACf,CACI,WAAA4pC,CAAY2R,EAASr2C,EAAStY,EAAY4uD,GAEtC,GADgBruE,EAAO0d,WAAW0wD,GAAStwD,SAEvC,GAA+B,MAA3BxgB,KAAKqoE,UAAUyI,IAAmD,MAA/B9wE,KAAKsoE,cAAcwI,GACtD,OAAOC,EAAU/wE,KAAKsoE,cAAcwI,GAAW9wE,KAAKqoE,UAAUyI,QAGjE,GAAepjD,MAAX+M,GAAsC/M,MAAdvL,GAC0B,MAAnDniB,KAAKuoE,aAAa9tC,GAAStY,GAAY2uD,IAA2E,MAAvD9wE,KAAKwoE,iBAAiB/tC,GAAStY,GAAY2uD,GACtG,OAAOC,EAAU/wE,KAAKwoE,iBAAiB/tC,GAAStY,GAAY2uD,GAAW9wE,KAAKuoE,aAAa9tC,GAAStY,GAAY2uD,GAGtH,OAAQ,CAChB,CACI,cAAAE,CAAev2C,EAAStY,GACpB,IAAK,IAAI2uD,EAAU,EAAGA,EAAUpuE,EAAO0d,WAAWtc,OAAQgtE,IACtD,GAAuBpjD,MAAlB1tB,KAAKqoE,WAAqD,MAA3BroE,KAAKqoE,UAAUyI,IACtBpjD,MAArB1tB,KAAKuoE,cAA2D76C,MAA9B1tB,KAAKuoE,aAAa9tC,IAAmE/M,MAA1C1tB,KAAKuoE,aAAa9tC,GAAStY,IAA+E,MAAnDniB,KAAKuoE,aAAa9tC,GAAStY,GAAY2uD,GAC/K,OAAO,EAGf,OAAO,CACf,CACI,QAAAG,CAASH,EAASr2C,EAAStY,GACvB,GAAIniB,KAAKuwD,YAAYugB,IAAwBpjD,MAAX+M,GAAsC/M,MAAdvL,GAA2BniB,KAAKuwD,YAAYugB,EAASr2C,EAAStY,GAAc,CAClIniB,KAAKqoE,UAAUyI,GAAW,KAC1B9wE,KAAKsoE,cAAcwI,GAAW,KAC9B,IAAK,IAAIrlE,EAAI,EAAGA,EAAIzL,KAAKyoE,SAAS3kE,OAAQ2H,IACvBiiB,MAAX+M,GAAsC/M,MAAdvL,EACpBniB,KAAKyoE,SAASh9D,GAAGmoC,cAAgBnZ,GAAWz6B,KAAKyoE,SAASh9D,GAAGonC,iBAAmB1wB,GAAcniB,KAAKyoE,SAASh9D,GAAGqlE,SAAWA,GAC1H9wE,KAAKyoE,SAASj5C,OAAO/jB,EAAG,GAGxBzL,KAAKyoE,SAASh9D,GAAGqlE,SAAWA,GAC5B9wE,KAAKyoE,SAASj5C,OAAO/jB,EAAG,GAGrBiiB,MAAX+M,GAAsC/M,MAAdvL,IACxBniB,KAAKuoE,aAAa9tC,GAAStY,GAAY2uD,GAAW,KAClD9wE,KAAKwoE,iBAAiB/tC,GAAStY,GAAY2uD,GAAW,KAEtE,CACA,CACI,iBAAAI,CAAkBpiC,EAAeqiC,EAAYvI,EAAepoD,GACxD,IAAI1gB,EACJ,MAAMqiB,EAAaniB,KAAKw6B,KAAK0V,SAASihC,GAAYh3C,YAAYyuC,GAC9D,GAAI95B,EAAe,CACf,GAAI3sB,EAAW+F,eACX,OAAO,EACX,GAAmC,MAA/B/F,EAAWylD,iBACX,OAAO,CACvB,MAEY,GAAIpnD,GACA,GAA6H,OAAvD,QAAhE1gB,EAAKE,gBAAmC,EAASA,KAAKw6B,YAAyB,IAAP16B,OAAgB,EAASA,EAAGuiE,gBACtG,OAAO,MAEV,CACD,GAAIlgD,EAAW+E,aACX,OAAO,EACX,GAAiC,MAA7B/E,EAAWkgD,eACX,OAAO,CAC3B,CAEQ,OAAO,CACf,CACI,WAAA9R,CAAYugB,EAASr2C,EAAStY,GAE1B,OADgBzf,EAAO0d,WAAW0wD,GAAStwD,QAEbkN,MAAlB1tB,KAAKqoE,WAAqD,MAA3BroE,KAAKqoE,UAAUyI,GAEtCpjD,MAAX+M,GAAsC/M,MAAdvL,GAAgDuL,MAArB1tB,KAAKuoE,cAA2D,MAA9BvoE,KAAKuoE,aAAa9tC,IAA8D,MAA1Cz6B,KAAKuoE,aAAa9tC,GAAStY,IAChG,MAAnDniB,KAAKuoE,aAAa9tC,GAAStY,GAAY2uD,EAG3D,CACI,aAAAM,CAAcR,EAAah9B,EAAcf,EAAiBi+B,GACtD,IAAIO,GAAQ,EACZ,IAAK,IAAI5lE,EAAI,EAAGA,EAAIzL,KAAKyoE,SAAS3kE,OAAQ2H,IAClCzL,KAAKyoE,SAASh9D,GAAGmoC,cAAgBA,GAAgB5zC,KAAKyoE,SAASh9D,GAAGonC,iBAAmBA,GAAmB7yC,KAAKyoE,SAASh9D,GAAGqlE,SAAWA,IACpI9wE,KAAKyoE,SAASh9D,GAAGsc,OAAS6oD,EAC1B5wE,KAAKyoE,SAASh9D,GAAG6lE,QAAU,GAC3BD,GAAQ,GAGXA,GACDrxE,KAAKyoE,SAAS57D,KAAK,CAAEkb,OAAQ6oD,EAAah9B,aAAcA,EAAcf,gBAAiBA,EAAiBi+B,QAASA,EAASQ,QAAS,IAC/I,CACI,WAAAC,GACIvxE,KAAKu0C,IAAM,EACXv0C,KAAK0wE,eACL1wE,KAAKwxE,WACb,CACI,OAAAC,CAAQl9B,GACJv0C,KAAKu0C,IAAMA,EACXv0C,KAAK0wE,eACL1wE,KAAKsqE,iBAAmBtqE,KAAKu0C,GACrC,CACI,SAAAi9B,GACIxxE,KAAKsqE,iBAAmBtqE,KAAKu0C,IAC7Bv0C,KAAK0oE,KAAO,EACZ1oE,KAAK+5B,KAAO,EACZ/5B,KAAKk7B,KAAO,EACZl7B,KAAKwqE,oBAAsB,CACnC,CACI,YAAAkH,GACI,GAAK1xE,KAAKw6B,OAENx6B,KAAKu0C,IAAMv0C,KAAKw6B,KAAKyZ,WAAaj0C,KAAKu0C,KAAOv0C,KAAKw6B,KAAKyZ,UAAYj0C,KAAKw6B,KAAK0Z,YAAY,CAC1F,MAAMy9B,EAAS3xE,KAAKu0C,IACpBv0C,KAAKu0C,IAAMv0C,KAAKw6B,KAAKyZ,UACrBj0C,KAAKsqE,kBAAoBtqE,KAAKu0C,IAAMo9B,EAChC3xE,KAAKkqE,SACLlqE,KAAKkoE,wBACrB,CACA,CACI,WAAA0J,GACI,IAAK5xE,KAAKw6B,KACN,OACJx6B,KAAK0qE,QAAU1qE,KAAKu0C,IACpB,MAAMo9B,EAAS3xE,KAAKu0C,IACpBv0C,KAAKu0C,MACDv0C,KAAKu0C,KAAOv0C,KAAKw6B,KAAK2Z,WACtBn0C,KAAKu0C,IAAM,GAEfv0C,KAAKsqE,kBAAoBtqE,KAAKu0C,IAAMo9B,EAChC3xE,KAAKkqE,SACLlqE,KAAKkoE,wBACjB,CACI,WAAA2J,GACI,IAAK7xE,KAAKw6B,KACN,OACJx6B,KAAK0qE,QAAU,KACf,MAAMiH,EAAS3xE,KAAKu0C,IACpBv0C,KAAKu0C,OACDv0C,KAAKu0C,IAAM,GAAKv0C,KAAKu0C,KAAOv0C,KAAKw6B,KAAK2Z,YACtCn0C,KAAKu0C,IAAMv0C,KAAKw6B,KAAK2Z,SAAW,GAEpCn0C,KAAKsqE,kBAAoBtqE,KAAKu0C,IAAMo9B,EAChC3xE,KAAKkqE,SACLlqE,KAAKkoE,wBACjB,CACI,UAAA4J,GACI,IAAI3E,EAAUntE,KAAKu0C,IAAM,EAYzB,OAXIv0C,KAAKoqE,YACD+C,GAAWntE,KAAKw6B,KAAK2Z,WACrBg5B,EAAUntE,KAAKw6B,KAAK2Z,SAAW,GAG9Bn0C,KAAKu0C,KAAOv0C,KAAKytE,YAAeztE,KAAKitE,cAGb,GAAxBjtE,KAAKgsE,iBAAwBmB,GAAWzhE,KAAKO,IAAIjM,KAAKytE,WAAa,EAAGztE,KAAKw6B,KAAKyZ,UAAYj0C,KAAKw6B,KAAK0Z,cAC3Gi5B,EAAUntE,KAAKw6B,KAAKyZ,WAHpBk5B,EAAUntE,KAAKwtE,aAKZL,CACf,CACI,OAAA4E,GACI,IAAK/xE,KAAKw6B,KACN,OACJ,MAAMsjC,EAAiB99D,KAAK8nE,oBAC5B9nE,KAAK0qE,QAAU1qE,KAAKu0C,IAChBv0C,KAAKytE,YAAcztE,KAAKu0C,IACxBv0C,KAAKu0C,MAELv0C,KAAKu0C,IAAMv0C,KAAKwtE,aAEpBxtE,KAAK0oE,KAAO,EACZ1oE,KAAK+5B,KAAO,EACZ/5B,KAAKk7B,KAAO,EACZl7B,KAAKwqE,oBAAsB1M,EAC3B99D,KAAKyqE,iBAAkB,EACK,GAAxBzqE,KAAKgsE,iBAAwBhsE,KAAKu0C,KAAO7oC,KAAKO,IAAIjM,KAAKw6B,KAAKyZ,UAAYj0C,KAAKw6B,KAAK0Z,WAAYl0C,KAAKytE,cACnGztE,KAAKu0C,IAAMv0C,KAAKw6B,KAAKyZ,WACK,GAAtBj0C,KAAKwtE,eACLxtE,KAAKu0C,IAAMv0C,KAAKwtE,cAChBxtE,KAAKgsE,gBAAkB,GACvBhsE,KAAKgsE,kBAErB,CACI,gBAAAgG,CAAiBlU,GACb,GAAiB,MAAb99D,KAAKw6B,KACL,OACJ,MAAM8rB,EAAwB56C,KAAKoV,KAAKg9C,GAClCnX,EAAmB3mD,KAAK2mD,iBAC9B,IAAIiR,EAAiB,EACrB,GAAI53D,KAAKw6B,KAAKtT,aAAc,CACxB,MAAMw6C,EAAwB1hE,KAAKw6B,KAAK5U,SACP,MAA7B5lB,KAAKw6B,KAAK4K,aAAa,KACvBplC,KAAKw6B,KAAK4K,aAAa,GAAK,IAAIxD,IACR5hC,KAAKw6B,KAAK4K,aAAa,GACnD,IAKIw8B,EALAC,EAAkB7hE,KAAKw6B,KAAKwK,kBAC5B88B,EAAkB9hE,KAAKw6B,KAAKyK,mBACZjlC,KAAKw6B,KAAKwK,kBACVhlC,KAAKw6B,KAAKyK,mBAkB1By8B,EAAsBt9B,8BAA8By9B,EAAiBC,GAAiB,GACtFF,EAAaF,EAAsB7/B,cAAc,GACjD+/B,EAAWzgC,eAAe1D,GAAMwqB,4BAA6BtB,EAAkB,EAAK,GAChF3mD,KAAKmuE,eAAerqE,OAAS,IAC7B9D,KAAKmuE,eAAe,GAAK,IAAIp7C,GACjC/yB,KAAKmuE,eAAe,GAAGx6C,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAMwqB,4BAA6B,EAAM3B,EAA0C,GAAnBsb,EAAW3qD,MAC9JjX,KAAKouE,eAAetqE,OAAS,IAC7B9D,KAAKouE,eAAe,GAAK,IAAIr7C,GACjC/yB,KAAKouE,eAAe,GAAGz6C,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAMwqB,4BAA6B,EAAM3B,EAA0C,GAAnBsb,EAAW3qD,MAEtK2gD,GAAkBgK,EAAWvgC,4BAC7BrhC,KAAKquE,kBAAoB,EACzBzW,EAAiBlsD,KAAKQ,IAAI,EAAK0rD,EAC3C,KACa,CACD,MAAMuK,EAAkD,MAA9BniE,KAAKw6B,KAAK4nC,iBAA4BpiE,KAAKw6B,KAAK4nC,iBAAmBpiE,KAAKw6B,KAAK5U,SACvG,IAAK,IAAIna,EAAI,EAAGA,EAAI02D,EAAiBrgC,kBAAmBr2B,IAAK,CACzD,IAAIm2D,EAAaO,EAAiBtgC,cAAcp2B,GAC5Cy2D,EAAwC,MAA5BliE,KAAKw6B,KAAK6nC,gBAAuE,MAA7CriE,KAAKw6B,KAAK6nC,eAAexgC,cAAcp2B,GAAczL,KAAKw6B,KAAK6nC,eAAexgC,cAAcp2B,GAAK02D,EAAiBtgC,cAAcp2B,GAChLm2D,EAAW3qD,MAAQirD,EAASjrD,OAC5B2qD,EAAaM,GAEjBN,EAAWzgC,eAAe1D,GAAMwqB,4BAA6BtB,EAAkB,EAAK,GACpFub,EAAS/gC,eAAe1D,GAAM4qB,0BAA2B1B,EAAkB,EAAK,GAC5E3mD,KAAKmuE,eAAerqE,QAAU2H,IAC9BzL,KAAKmuE,eAAe1iE,GAAK,IAAIsnB,GACjC/yB,KAAKmuE,eAAe1iE,GAAGkoB,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAM4qB,0BAA2B,EAAM/B,EAA0C,GAAnBsb,EAAW3qD,MAC5JjX,KAAKouE,eAAetqE,QAAU2H,IAC9BzL,KAAKouE,eAAe3iE,GAAK,IAAIsnB,GACjC/yB,KAAKouE,eAAe3iE,GAAGkoB,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAM4qB,0BAA2B,EAAM/B,EAA0C,GAAnBsb,EAAW3qD,MAChK2gD,GAAkBgK,EAAWvgC,2BAC7C,CACYrhC,KAAKquE,kBAAoBlM,EAAiBrgC,kBAC1C81B,EAAiBlsD,KAAKQ,IAAI,EAAK0rD,EAC3C,CACQ,IAAI+K,EAAsB/K,EACtBgL,EAAoBhL,EACxB53D,KAAKiuE,mBAAqBtL,EAC1B3iE,KAAKkuE,yBAA2BtL,EAAoBD,GAAuBrc,CACnF,CACI,UAAA2hB,CAAW+G,EAAaC,EAAagD,EAAoBC,GAAW,GAChE,GAAiB,MAAblyE,KAAKw6B,KAAc,CACnB,IAAK,IAAI/uB,EAAI,EAAGA,EAAIwmE,EAAoBxmE,IACpCujE,EAAYvjE,GAAK,EACjBwjE,EAAYxjE,GAAK,EAGrB,YADAzL,KAAKovE,iBAEjB,CACQ,MAAM+C,EAAwBnD,EAAYv3B,QACpC26B,EAAwBnD,EAAYx3B,QACpCjd,EAAOx6B,KAAKw6B,KAClBx6B,KAAKw6B,KAAKkW,YAAc,EACxB1wC,KAAKw6B,KAAKmW,aAAe,EACzB,IAAImtB,EAAiB99D,KAAK8nE,oBACtBuD,GAAQ,GACRrrE,KAAKwqE,qBAAuB,GAAKxqE,KAAKwqE,oBAAsB1M,KAC5D99D,KAAKwqE,oBAAsB1M,EAC3B99D,KAAKyqE,iBAAkB,GAEvByH,IACIlyE,KAAK0oE,MAAQluC,EAAK2B,cAClBn8B,KAAK0oE,KAAO,EACZ1oE,KAAK+5B,KAAO,EACZ/5B,KAAKk7B,KAAO,EACZl7B,KAAKwqE,oBAAsB1M,EAC3B99D,KAAKyqE,iBAAkB,EACvBzqE,KAAK0qE,QAAU1qE,KAAKu0C,IACpBv0C,KAAKu0C,IAAMv0C,KAAK8xE,aACZ9xE,KAAKu0C,KAAOv0C,KAAK0qE,SAAW1qE,KAAKgsE,gBAAkB,GACnDhsE,KAAKgsE,mBAEThsE,KAAKu0C,KAAO/Z,EAAK2Z,WACjBn0C,KAAKu0C,IAAM,GACkB,GAAzBv0C,KAAKgsE,kBACLX,GAAQ,EACRrrE,KAAKwwE,WAIjBxwE,KAAKynE,iBACsC,MAAvCznE,KAAK0uE,gCAA0C1uE,KAAK0uE,+BAA+B5qE,OAASmuE,KAC5FjyE,KAAK0uE,+BAAiC,IAAInjE,aAAa0mE,IAE3D,MAAMlqD,GAAU/nB,KAAK+nB,OACfooB,EAAa,EAAMzkC,KAAKuC,IAAI,GAAKjO,KAAKw6B,KAAK2V,WAAanwC,KAAK2mD,kBAC7DvW,EAAY,EAAM1kC,KAAKuC,IAAI,GAAKjO,KAAKw6B,KAAK4V,UAAYpwC,KAAK2mD,kBACjE,IAAI7xB,GAAS90B,KAAK80B,MACdu9C,EAAc,GACdC,GAA2B,EAC3BC,EAAc,EAClB,KAAOA,EAAcN,IAAuB5G,GAAO,CAC/CrrE,KAAKmtE,QAAUntE,KAAK8xE,aAChB9xE,KAAKmtE,SAAW3yC,EAAK2Z,WACrBn0C,KAAKmtE,QAAU,MACnB,MAAMqF,EAAsBP,EAAqBM,EAC3CE,EAAoB/mE,KAAKoV,KAAK9gB,KAAKwqE,qBACnCkI,EAAYhnE,KAAKQ,IAAIumE,EAAmBD,GACxCG,EAASJ,EAAcG,EAC7B,GAAI1yE,KAAKgoE,eAAiBhoE,KAAKitE,cAAe,CAC1C,IAAK,IAAIr5B,EAAepZ,EAAK8Y,kBAAoB9Y,EAAK+Y,kBAAmBK,EAAepZ,EAAK6Y,kBAAmBO,IAAgB,CAC5H,MAAMnZ,EAAUD,EAAK0V,SAAS0D,GACxB8zB,EAAe1nE,KAAKkwC,SAAS0D,GACnC5zC,KAAK4yE,4BAA4Bp4C,EAAMoZ,EAAckqB,EAAgBoU,GACrE,IAAK,IAAIr/B,EAAkB,EAAGA,EAAkBpY,EAAQN,YAAYr2B,OAAQ+uC,IAAmB,CAC3F,MAAMsT,EAAkBuhB,EAAavtC,YAAY0Y,GACjD,IAAK,IAAIpnC,EAAI,EAAGA,EAAI06C,EAAgBgR,eAAe7oC,QAAS7iB,IAAK,CAC7D,MAAM26C,EAAOD,EAAgBgR,eAAe5oC,IAAI9iB,GAE1C0W,EADUqY,EAAK0V,SAAS0D,GACHzZ,YAAYisB,EAAKvT,iBAC5C,IAAIjY,EAAMl4B,EAAOma,SAAW,EAAIupC,EAAKptB,QAAQ,IACxC7W,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,eAAeF,OACxE2c,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,aAAaF,OACxE2c,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,WAAWF,QACpC,MAAlC2c,EAAW4Y,eAAeH,IAAgBzY,EAAW4Y,eAAeH,GAAO,GAGlF56B,KAAK6yE,YAAYr4C,EAAMoZ,EAAckqB,EAAgByU,EAAaG,EAAWtsB,GAAM,GAAO,EACtH,CACA,CACA,CACgB,IAAK,IAAIxS,EAAepZ,EAAK8Y,kBAAoB9Y,EAAK+Y,kBAAmBK,EAAepZ,EAAK6Y,kBAAmBO,IAAgB,CAC5H,MAAMnZ,EAAUD,EAAK0V,SAAS0D,GACxB8zB,EAAe1nE,KAAKkwC,SAAS0D,GACnC,IAAK,IAAIf,EAAkB,EAAGA,EAAkBpY,EAAQN,YAAYr2B,OAAQ+uC,IAAmB,CAC3F,MAAMsT,EAAkBuhB,EAAavtC,YAAY0Y,GACjD,IAAK,IAAIpnC,EAAI,EAAGA,EAAI06C,EAAgBgR,eAAe7oC,QAAS7iB,IAAK,CAC7D,MAAM26C,EAAOD,EAAgBgR,eAAe5oC,IAAI9iB,GAE1C0W,EADUqY,EAAK0V,SAAS0D,GACHzZ,YAAYisB,EAAKvT,iBAC5C,IAAIjY,EAAMl4B,EAAOma,SAAW,EAAIupC,EAAKptB,QAAQ,IACxC7W,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,eAAeF,OACxE2c,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,aAAaF,OACxE2c,EAAW/B,WAAWwa,IAAQl4B,EAAO0d,WAAW1a,WAAW,WAAWF,QACpC,MAAlC2c,EAAW4Y,eAAeH,IAAgBzY,EAAW4Y,eAAeH,GAAO,GAC9E56B,KAAK6yE,YAAYr4C,EAAMoZ,EAAckqB,EAAgByU,EAAaG,EAAWtsB,GAAM,GAAO,EAE1H,CACA,CACA,CACA,CACY,GAAIpmD,KAAKktE,WAAY,CACjB,IAAI4F,EAAaT,EAAYjvB,SAASpjD,KAAKu0C,KAC3C,GAAIu+B,GAAcP,GAAeD,EAE7B,YADAtyE,KAAKwwE,SAGuB,GAA5B8B,IACAA,EAA0BC,GAEzBO,GACDT,EAAYxlE,KAAK7M,KAAKu0C,KAC1Bv0C,KAAKktE,YAAa,EAClBltE,KAAK+xE,UACL,QAChB,CACY/xE,KAAKgyE,iBAAiBlU,GACtB,IAAK,IAAIlqB,EAAe,EAAGA,EAAepZ,EAAK8Y,kBAAoB9Y,EAAK+Y,kBAAmBK,IAAgB,CACvG,MAAMnZ,EAAUD,EAAK0V,SAAS0D,GACxB8zB,EAAe1nE,KAAKkwC,SAAS0D,GAC/B5zC,KAAKyqE,kBACLzqE,KAAK4yE,4BAA4Bp4C,EAAMoZ,EAAckqB,EAAgBoU,IAAalyE,KAAKgtE,kBACvFhtE,KAAK+yE,wBAAwBv4C,EAAMoZ,EAAckqB,IAErD,IAAK,IAAIjrB,EAAkB,EAAGA,EAAkBpY,EAAQN,YAAYr2B,OAAQ+uC,IAAmB,CAC3F,MAAM1wB,EAAasY,EAAQN,YAAY0Y,GACjCsT,EAAkBuhB,EAAavtC,YAAY0Y,GACjD,GAAI7yC,KAAKyqE,gBAAiB,CACtB,IAAIuI,EAA8B7sB,EAAgB+Q,YAAY5oC,QAAU63B,EAAgBkR,eAAe/oC,QACvG,IAAK,IAAI7iB,EAAI,EAAGA,EAAI06C,EAAgBiR,cAAc9oC,QAAS7iB,IAAK,CAC5D,MAAM26C,EAAOD,EAAgBiR,cAAc7oC,IAAI9iB,GAC/C,GAAI26C,EAAKsN,oBAAsBhoD,KAAKY,IAAI6V,EAAWutB,mBAAoB,CACnE1vC,KAAKizE,iBAAiB9sB,EAAiB16C,GACvCA,IACA,QAChC,CAC4B,MAAMynE,EAAqBF,GAA+BtwE,EAAOqa,uBACjE/c,KAAKmzE,YAAY34C,EAAMoZ,EAAckqB,EAAgB1X,GAAM,EAAM8sB,GACjEF,GAC5B,CAC4B7sB,EAAgBwQ,QACXxQ,EAAgByQ,UACjBzQ,EAAgByY,QAAQ5+D,KAAMmiB,EAAY27C,EAAgBpyD,KAAKoV,KAAKg9C,GAAiB,KAAMlqB,EAAcf,GAE7GsT,EAAgByQ,UAAW,EAC3BzQ,EAAgBqQ,iBAAiBxF,iBAE7D,CACoB,IAAK,IAAIvlD,EAAI,EAAGA,EAAI06C,EAAgB+Q,YAAY5oC,QAAS7iB,IAAK,CAC1D,MAAM26C,EAAOD,EAAgB+Q,YAAY3oC,IAAI9iB,GAC7CzL,KAAKozE,SAASx/B,EAAc2+B,EAAaG,EAAWtsB,EAC5E,CACoB,IAAK,IAAI36C,EAAI,EAAGA,EAAI06C,EAAgBkR,eAAe/oC,QAAS7iB,IAAK,CAC7D,MAAM26C,EAAOD,EAAgBkR,eAAe9oC,IAAI9iB,GAChDzL,KAAKozE,SAASx/B,EAAc2+B,EAAaG,EAAWtsB,EAC5E,CACoB,IAAK,IAAI36C,EAAI,EAAGA,EAAI06C,EAAgBiR,cAAc9oC,QAAS7iB,IAAK,CAC5D,MAAM26C,EAAOD,EAAgBiR,cAAc7oC,IAAI9iB,GAC/CzL,KAAKozE,SAASx/B,EAAc2+B,EAAaG,EAAWtsB,EAC5E,CACwBD,EAAgBwQ,OAChBl5B,GAAM41C,aAAarzE,KAAMgvE,EAAaC,EAAasD,EAAaG,EAAWvsB,GAE/E,MAAMqkB,EAAsBxqE,KAAKwqE,oBAC3B8I,EAAa,EAAM,EAAwBxV,EAC3CyV,EAAW,GAAO/I,EAAsBkI,GAAa5U,EACrD0V,GAAgBxzE,KAAK0oE,KAAOhmE,EAAOiR,aAAe3T,KAAK+5B,MAAQr3B,EAAOkR,aAAe5T,KAAKk7B,KAC1Fu4C,EAAoB,EAAiB/wE,EAAOkR,aAC5C8/D,GAAmBF,EAAe,GAAK9wE,EAAOkR,aAC9Cm/C,EAAgB0gB,GAAqBC,EAAkBD,GAAqBH,EAC5EtgB,EAAcygB,GAAqBC,EAAkBD,GAAqBF,EAChF,IAAII,EAAkBxxD,EAAW+G,aACjCi9B,EAAgBsR,YAActR,EAAgBuR,gBAC1C13D,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcf,KACpF8gC,EAAkB3zE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcf,IAEnF,GAAnB8gC,GACAxtB,EAAgBsR,YAAc,EAC9BtR,EAAgBuR,gBAAkB,GAGlCvR,EAAgBuR,iBAAqC,GAAlBic,GAAyB3gB,EAAcD,EAElG,CACA,CACY,GAAI/yD,KAAK+sE,iBAAmB/sE,KAAKgtE,iBAC7B,GAAiB,GAAbhtE,KAAK+5B,KAAW,CAChB,IAAK/5B,KAAK4tE,iBAAkB,CACxB,MAAMgG,EAAWp5C,EAAK2B,YAAc,GAAM3B,EAAK2B,YAAc,GAAK,GAAMn8B,KAAK0oE,MAAQluC,EAAK2B,YAAc,EAClG03C,EAAwB,GAAb7zE,KAAK0oE,KAAa,EAAIkL,EAAU,EAAI,EAC/CjzC,EAAmB,GAAb3gC,KAAK0oE,KAAa,KAAOkL,EAAU,KAAO,IAChDpkE,EAA0B,GAAbxP,KAAK0oE,KAAa,IAAOkL,EAAU,IAAO,IACvDE,EAAmB9zE,KAAK2mD,iBAAmBhmB,EAC3C1O,EAA6B,EAAVvmB,KAAKE,GAAWkoE,EACzC9zE,KAAK6tE,0BAA4BniE,KAAK4F,MAAMwiE,EAAmBD,GAC/D7zE,KAAKguE,gBAAkB,EAAMtiE,KAAKgE,IAAIuiB,GACtCjyB,KAAK8tE,mBAAqBt+D,EAAY9D,KAAKC,IAAIsmB,GAC/CjyB,KAAK+tE,uBAAyB,EAC9B/tE,KAAK4tE,kBAAmB,CAChD,CACoB,GAAI5tE,KAAK6tE,0BAA4B,EAAG,CACpC,MAAMvqD,EAAY5X,KAAKQ,IAAIymE,EAAQJ,EAAcvyE,KAAK6tE,2BACtD7tE,KAAK6tE,2BAA6BvqD,EAAYivD,EAC9C,IAAK,IAAI9mE,EAAI8mE,EAAa9mE,EAAI6X,EAAW7X,IAAK,CAC1C0mE,EAAsB1mE,IAAMzL,KAAK8tE,mBACjCsE,EAAsB3mE,IAAMzL,KAAK8tE,mBACjC,MAAMiG,EAAgB/zE,KAAKguE,gBAAkBhuE,KAAK8tE,mBAAqB9tE,KAAK+tE,uBAC5E/tE,KAAK+tE,uBAAyB/tE,KAAK8tE,mBACnC9tE,KAAK8tE,mBAAqBiG,CACtD,CACA,CACA,MAEoB/zE,KAAK4tE,kBAAmB,EAGhC,IAAK,IAAIniE,EAAI8mE,EAAa9mE,EAAIknE,EAAQlnE,IAAK,CACvC,CACI,IAAIuoE,EAAWh0E,KAAKmuE,eAChB8F,EAAWj0E,KAAKouE,eACpB,MAAM8F,EAAuC,EAAzBl0E,KAAKquE,kBACzB,IAAI8F,GAAwBn0E,KAAKsuE,2BAC7B8F,GAAwBp0E,KAAKuuE,2BAC7B8F,GAAwBr0E,KAAKwuE,2BAC7B8F,GAAwBt0E,KAAKyuE,2BACjC,MAAM8F,EAAe92C,GAAM82C,aAC3B,IAAI3c,GAAkB53D,KAAKiuE,mBAC3B,MAAMpW,GAAuB73D,KAAKkuE,wBAC5BsG,EAAexF,EAAYvjE,GACjC,IAAIgpE,EAAUD,EACdC,EAAUF,EAAaE,EAASN,EAAsBC,EAAsBF,EAAaF,GACzFI,EAAuBD,EACvBA,EAAuBK,EACvBC,GAAW7c,EACXoX,EAAYvjE,GAAKgpE,EACjB,MAAMC,EAAezF,EAAYxjE,GACjC,IAAIkpE,EAAUD,EACdC,EAAUJ,EAAaI,EAASN,EAAsBC,EAAsBJ,EAAaD,GACzFK,EAAuBD,EACvBA,EAAuBK,EACvBC,GAAW/c,EACXqX,EAAYxjE,GAAKkpE,EACjB/c,GAAkBC,EAClB73D,KAAK40E,gBAAgBZ,GACfG,EAAuB,KAAUC,EAAuB,MAC1DD,EAAuB,EACvBC,EAAuB,GAEvB1oE,KAAKY,IAAI6nE,GAAwB9+C,IACjC8+C,EAAuB,GACvBzoE,KAAKY,IAAI8nE,GAAwB/+C,IACjC++C,EAAuB,GAC3Bp0E,KAAKsuE,2BAA6B6F,EAClCn0E,KAAKuuE,2BAA6B6F,EAClCp0E,KAAK40E,gBAAgBX,GACfI,EAAuB,KAAUC,EAAuB,MAC1DD,EAAuB,EACvBC,EAAuB,GAEvB5oE,KAAKY,IAAI+nE,GAAwBh/C,IACjCg/C,EAAuB,GACvB3oE,KAAKY,IAAIgoE,GAAwBj/C,IACjCi/C,EAAuB,GAC3Bt0E,KAAKwuE,2BAA6B6F,EAClCr0E,KAAKyuE,2BAA6B6F,CACtD,CACgB,MAAMG,GAAWzF,EAAYvjE,GAAK0mE,EAAsB1mE,IAAM+uB,EAAKiW,WAAajW,EAAKiW,WAC/EkkC,GAAW1F,EAAYxjE,GAAK2mE,EAAsB3mE,IAAM+uB,EAAKiW,WAAajW,EAAKiW,WAC/EokC,EAAOJ,EAAU,GAAOA,EAAUA,EAClCK,EAAOH,EAAU,GAAOA,EAAUA,EAClCroE,EAAMuoE,EAAOC,EAAOD,EAAOC,EACjC90E,KAAKw6B,KAAKkW,YAAe1wC,KAAKw6B,KAAKkW,YAAcpkC,EAAMtM,KAAKw6B,KAAKkW,YAAcpkC,EAC/E,MAAMyoE,IAAgBzoE,EAAMkuB,EAAK6V,yBAA4B/jC,EAAMkuB,EAAK8V,gBAClE0kC,IAA+B,GAAdD,KAA8D,IAAvCzoE,EAAM,EAAIkuB,EAAK6V,sBAA8B,KAAQ7V,EAAK+V,iBAAmB,MAAQ,EAAI/V,EAAK+V,mBACnH,OAAF,GAAdwkC,MACc,GAAdA,IAAqB,OAASzoE,EAAM,EAAIkuB,EAAK8V,gBAAkB9V,EAAKgW,YAAc,EAAIhW,EAAK8V,kBACpGxb,IAAWkgD,EAAclgD,IAAUA,EAAQkgD,EAAc5kC,EAAYD,GACrE,MAAM8kC,EAAgBltD,GAAU+M,GAAS,EAAY,KAARA,EAAuB,GAARA,EAAc,KAC1Ek6C,EAAYvjE,GAAKgpE,EAAUQ,EAC3BhG,EAAYxjE,GAAKkpE,EAAUM,EAC3Bj1E,KAAKw6B,KAAKmW,aAAgB3wC,KAAKw6B,KAAKmW,aAAerkC,EAAM2oE,EAAgBj1E,KAAKw6B,KAAKmW,aAAerkC,EAAM2oE,CACxH,CAIY,GAHA1C,GAAeG,EACf1yE,KAAKyqE,iBAAkB,EACvBzqE,KAAKwqE,qBAAuBkI,EACxB1yE,KAAKwqE,qBAAuB,EAAG,CAC/BxqE,KAAKyqE,iBAAkB,EACvB,IAAK,MAAM/C,KAAgB1nE,KAAKkwC,SAC5B,IAAK,MAAMiW,KAAmBuhB,EAAavtC,YAAa,CACpD,IAAK,IAAI1uB,EAAI,EAAGA,EAAI06C,EAAgBiR,cAAc9oC,QAAS7iB,IAAK,CAC5D,MAAM26C,EAAOD,EAAgBiR,cAAc7oC,IAAI9iB,GAC3C26C,EAAKqN,cACLzzD,KAAKizE,iBAAiB9sB,EAAiB16C,GACvCA,KAGA26C,EAAKsN,oBAErC,CAC4BvN,EAAgB4Q,yBAChB5Q,EAAgBuY,aAEpBvY,EAAgB0Q,sBAAuB,CAC/D,CAEgB,MACMxI,EADeruD,KAAK++D,kBAEpBxQ,EAAiBuP,EAAiB99D,KAAK2mD,iBACvCyH,EAAcpuD,KAAKg/D,iBACzB,IAAK,IAAIvkC,EAAU,EAAGA,EAAUz6B,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmB9Y,IACvF,IAAK,IAAImuC,EAAgB,EAAGA,EAAgB5oE,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYr2B,OAAQ8kE,IAAiB,CACzG,IAAIzmD,EAAaniB,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYyuC,GACrDziB,EAAkBnmD,KAAKkwC,SAASzV,GAASN,YAAYyuC,GACzD,MAAMpS,EAAmBrQ,EAAgBqQ,iBACnCyI,EAAiB,GACvB,IAAK,IAAIxzD,EAAI,EAAGA,EAAI/I,EAAO6c,iBAAkB9T,IACzCwzD,EAAexzD,GAAK,EAExB,IAAK,IAAI8jC,EAAgB,EAAGA,EAAgBptB,EAAWqjB,cAAe+J,IAAiB,CACnF,IAAI2vB,EAAmB/8C,EAAWkF,cAC9BkB,EAAmBpG,EAAWvH,UAAU20B,GAAehnB,iBACvDvoB,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,6BAA6BF,MAAOi1B,EAASmuC,IAA2E,MAAzDzmD,EAAWvH,UAAU20B,GAAe/K,oBACjJjc,EAAmBpG,EAAWvH,UAAU20B,GAAe/K,mBAEvDxkC,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOi1B,EAASmuC,IAChF1J,EAAmBxzD,KAAKO,IAAI,EAAGP,KAAKQ,IAAIxJ,EAAO4U,cAAcxT,OAAS,EAAG9D,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOi1B,EAASmuC,GAAe,KACpKhzC,OAAOwpC,UAAUF,GACjB/Y,EAAgBwR,aAAapoB,IAAkB7sC,EAAO4U,cAAc4nD,GAAoB32C,EAGxF49B,EAAgBwR,aAAapoB,MAAoB,EAAK2vB,EAAmB,GAAMx8D,EAAO4U,cAAc5L,KAAK4F,MAAM4tD,IAAsBA,EAAmB,EAAKx8D,EAAO4U,cAAc5L,KAAKoV,KAAKo+C,KAAsB32C,GAItN49B,EAAgBwR,aAAapoB,IAAkB7sC,EAAO4U,cAAc4nD,GAAoB32C,CAExH,CACwB,GAAI49B,EAAgB+Q,YAAY5oC,QAAU,EAAG,CACzC,MAAM83B,EAAOD,EAAgB+Q,YAAY3oC,IAAI,GAC7CioC,EAAiBrI,iBAAiBhsC,EAAYisC,EAAajI,EAAgBwR,aAActJ,EAAeE,EAAgBnI,EAAM6Y,EAAgB9Y,EAAiBnmD,KAAMy6B,EAASmuC,EAC1M,CACwB,MACMsM,EADiB1e,EAAiB1I,eACA,IACxC,IAAIqnB,EAAmBhzD,EAAW8F,cAC9BjoB,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOi1B,EAASmuC,IAC3EuM,EAAmB7/C,EAAM,EAAG5yB,EAAO4U,cAAcxT,OAAQoxE,EAAmBl1E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOi1B,EAASmuC,GAAe,IAClKhzC,OAAOwpC,UAAU+V,GACjBhvB,EAAgBiM,SAAW1vD,EAAO4U,cAAc69D,GAGhDhvB,EAAgBiM,UAAY,EAAK+iB,EAAmB,GAAMzyE,EAAO4U,cAAc5L,KAAK4F,MAAM6jE,IAAsBA,EAAmB,EAAKzyE,EAAO4U,cAAc5L,KAAKoV,KAAKq0D,MAI3KA,EAAmB7/C,EAAM,EAAG5yB,EAAO4U,cAAcxT,OAAQoxE,EAAmBC,GACxEv/C,OAAOwpC,UAAU+V,GACjBhvB,EAAgBiM,SAAW1vD,EAAO4U,cAAc69D,GAGhDhvB,EAAgBiM,UAAY,EAAK+iB,EAAmB,GAAMzyE,EAAO4U,cAAc5L,KAAK4F,MAAM6jE,IAAsBA,EAAmB,EAAKzyE,EAAO4U,cAAc5L,KAAKoV,KAAKq0D,KAG/K3e,EAAiBxF,gBACzC,CAEgB,IAAK,IAAIv2B,EAAU,EAAGA,EAAUz6B,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmB9Y,IACvF,IAAK,IAAImuC,EAAgB,EAAGA,EAAgB5oE,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYr2B,OAAQ8kE,IAAiB,CACzG,IAAIzmD,EAAaniB,KAAKw6B,KAAK0V,SAASzV,GAASN,YAAYyuC,GACxB,MAA7BzmD,EAAWkgD,eACXlgD,EAAWigD,iBAAmBjgD,EAAWkgD,eAGzClgD,EAAWigD,iBAAmBjgD,EAAWyD,SAEV,MAA/BzD,EAAWylD,iBACXzlD,EAAW2uC,mBAAqB3uC,EAAWylD,iBAG3CzlD,EAAW2uC,mBAAqB3uC,EAAWuF,UAEvE,CAUgB,GAR2B,MAAvB8S,EAAK6nC,eACL7nC,EAAK4nC,iBAAmB5nC,EAAK6nC,eAG7B7nC,EAAK4nC,iBAAmB5nC,EAAK5U,SAEjC5lB,KAAKk7B,OACLl7B,KAAKwqE,qBAAuB1M,EACxB99D,KAAKk7B,MAAQx4B,EAAOkR,aAAc,CAClC5T,KAAKk7B,KAAO,EACZl7B,KAAK+5B,OACL/5B,KAAKmsE,oBACLnsE,KAAKosE,wBACL,IAAK,IAAI3gE,EAAI,EAAGA,EAAIzL,KAAKyoE,SAAS3kE,OAAQ2H,IACtCzL,KAAKyoE,SAASh9D,GAAG6lE,UACbtxE,KAAKyoE,SAASh9D,GAAG6lE,SAAW,GAC5BtxE,KAAKyoE,SAASj5C,OAAO/jB,EAAG,GAG5BzL,KAAK+5B,MAAQr3B,EAAOiR,eACpB3T,KAAK+5B,KAAO,EACRm4C,IACAlyE,KAAK0oE,OACD1oE,KAAK0oE,MAAQluC,EAAK2B,cAClBn8B,KAAK0oE,KAAO,EACR1oE,KAAKgtE,iBACLhtE,KAAKgtE,kBAAmB,GAGxBhtE,KAAK0qE,QAAU1qE,KAAKu0C,IACpBv0C,KAAKu0C,IAAMv0C,KAAK8xE,aACZ9xE,KAAKu0C,KAAOv0C,KAAK0qE,SAAW1qE,KAAKgsE,gBAAkB,GACnDhsE,KAAKgsE,kBACLhsE,KAAKu0C,KAAO/Z,EAAK2Z,WACjBn0C,KAAKu0C,IAAM,GACkB,GAAzBv0C,KAAKgsE,kBACLX,GAAQ,EACRrrE,KAAK0wE,eACL1wE,KAAKwwE,aAOjD,CACA,CACY,IAAK,IAAIM,EAAU,EAAGA,EAAUpuE,EAAO0d,WAAWtc,OAAQgtE,IAC5B,MAAtB9wE,KAAKsoE,eAAwD,MAA/BtoE,KAAKsoE,cAAcwI,KACjD9wE,KAAKqoE,UAAUyI,GAAW9wE,KAAKsoE,cAAcwI,IAEjD9wE,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAkB,MAAEF,SACvDs4D,EAAiB99D,KAAK8nE,oBACtB9nE,KAAKwqE,oBAAsB9+D,KAAKQ,IAAIlM,KAAKwqE,oBAAqB1M,IAElE,IAAK,IAAIlqB,EAAe,EAAGA,EAAe5zC,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmBK,IACjG,IAAK,IAAIf,EAAkB,EAAGA,EAAkB7yC,KAAKkwC,SAAS0D,GAAczZ,YAAYr2B,OAAQ+uC,IAAmB,CAC/G,MAAMsT,EAAkBnmD,KAAKkwC,SAAS0D,GAAczZ,YAAY0Y,GAC1D1wB,EAAaniB,KAAKw6B,KAAK0V,SAAS0D,GAAczZ,YAAY0Y,GAChEsT,EAAgBuR,gBAAmBvR,EAAgBuR,iBAAmBh1D,EAAOyU,aAAagL,EAAWgH,aAAa9R,QAAU3U,EAAOkR,aAAekqD,EAAiB99D,KAAK2mD,mBACxKR,EAAgBiM,QAAWjM,EAAgBiM,SAAW,KAAO1vD,EAAOmR,kBACpE,IAAK,IAAI07B,EAAgB,EAAGA,EAAgBptB,EAAWqjB,cAAe+J,IAClE4W,EAAgBwR,aAAapoB,GAAkB4W,EAAgBwR,aAAapoB,IAAkB7sC,EAAOiR,aAAejR,EAAOkR,aAAe5T,KAAKw6B,KAAK2B,YAE5K,CAEY,MAAMi5C,EAA2Bp1E,KAAKw6B,KAAKiZ,8BAC3C,IAAK,IAAIq9B,EAAU,EAAGA,EAAUpuE,EAAO0d,WAAWtc,OAAQgtE,IACtD,IAAK,IAAIr2C,EAAU,EAAGA,EAAUz6B,KAAKw6B,KAAK8Y,kBAAoBtzC,KAAKw6B,KAAK+Y,kBAAmB9Y,IACvF,IAAK,IAAItY,EAAa,EAAGA,EAAaizD,EAA0BjzD,IAC/B,MAAzBniB,KAAKwoE,kBAA8D,MAAlCxoE,KAAKwoE,iBAAiB/tC,IAAkE,MAA9Cz6B,KAAKwoE,iBAAiB/tC,GAAStY,IAA8E,MAAvDniB,KAAKwoE,iBAAiB/tC,GAAStY,GAAY2uD,KAC5K9wE,KAAKuoE,aAAa9tC,GAAStY,GAAY2uD,GAAW9wE,KAAKwoE,iBAAiB/tC,GAAStY,GAAY2uD,GAKzH,GACal7C,OAAOy/C,SAASvgD,IAAUppB,KAAKY,IAAIwoB,GAASO,KAC7CP,EAAQ,GACZ90B,KAAK80B,MAAQA,EACTo9C,IAAalyE,KAAKgtE,mBAClBhtE,KAAKsqE,oBAAsBtqE,KAAKk7B,KAAO,EAAMl7B,KAAKwqE,oBAAsB1M,GAAkB,EAAM99D,KAAK+5B,MAAQr3B,EAAOiR,aAAe3T,KAAK0oE,MAAQluC,EAAK2B,YAAcn8B,KAAKu0C,IAEpL,CACI,QAAA+gC,CAASlvB,GACLpmD,KAAK0tE,SAASz/C,SAASm4B,EAC/B,CACI,OAAAmvB,GACI,GAAIv1E,KAAK0tE,SAASp/C,QAAU,EAAG,CAC3B,MAAM83B,EAAOpmD,KAAK0tE,SAASv/C,UAE3B,OADAi4B,EAAKoN,kBAAmB,EACjBpN,CACnB,CACQ,OAAO,IAAI8M,EACnB,CACI,WAAAsiB,CAAYrvB,EAAiBC,GACzBD,EAAgBiR,cAActpC,UAAUs4B,GACxCA,EAAKsI,aAAc,EACnBtI,EAAK4I,iBAAkB,CAC/B,CACI,gBAAAikB,CAAiB9sB,EAAiBsvB,GAC9Bz1E,KAAKs1E,SAASnvB,EAAgBiR,cAAc7oC,IAAIknD,IAChDtvB,EAAgBiR,cAAc5oC,OAAOinD,EAC7C,CACI,YAAA9E,GACI,IAAK,MAAMjJ,KAAgB1nE,KAAKkwC,SAC5B,IAAK,MAAMiW,KAAmBuhB,EAAavtC,YAAa,CACpD,KAAOgsB,EAAgB+Q,YAAY5oC,QAAU,GACzCtuB,KAAKs1E,SAASnvB,EAAgB+Q,YAAY/oC,WAC9C,KAAOg4B,EAAgBgR,eAAe7oC,QAAU,GAC5CtuB,KAAKs1E,SAASnvB,EAAgBgR,eAAehpC,WACjD,KAAOg4B,EAAgBiR,cAAc9oC,QAAU,GAC3CtuB,KAAKs1E,SAASnvB,EAAgBiR,cAAcjpC,WAChD,KAAOg4B,EAAgBkR,eAAe/oC,QAAU,GAC5CtuB,KAAKs1E,SAASnvB,EAAgBkR,eAAelpC,UACjE,CAEA,CACI,uBAAA4kD,CAAwBv4C,EAAMoZ,EAAckqB,GACxC,MAAMrjC,EAAUD,EAAK0V,SAAS0D,GACxB8zB,EAAe1nE,KAAKkwC,SAAS0D,GAC7B5a,EAAUh5B,KAAKusE,iBACfmJ,EAAc11E,KAAKwsE,sBACrBxsE,KAAKusE,iBAAiBzoE,OAAS,GAAK9D,KAAKwsE,qBAAqB1oE,OAAS,IACvE9D,KAAKkoE,yBAET,IAAK,IAAIr1B,EAAkB,EAAGA,EAAkBpY,EAAQN,YAAYr2B,OAAQ+uC,IAAmB,CAC3F,MAAMsT,EAAkBuhB,EAAavtC,YAAY0Y,GAC3C8iC,EAAWxvB,EAAgBkR,eACjC,IAAIue,EAAY,EAChB,GAAI51E,KAAKmsE,kBAAoB,GAAMv4B,GAAgB5zC,KAAKysE,kBAAqBzzC,EAAQl1B,OAAS,IAA4D,GAAvD9D,KAAK2sE,qBAAqBp9C,QAAQsjB,GAAwB,CACzJ,MAAM1wB,EAAasY,EAAQN,YAAY0Y,GACvC,GAAI1wB,EAAW6lB,WAAWnuB,WAAY,CAClC,IAAIusC,EACAuvB,EAASrnD,SAAWsnD,GACpBxvB,EAAOpmD,KAAKu1E,UACZI,EAAS1nD,SAASm4B,KAEZjkC,EAAWqtB,gBAAgB74B,YAAc3W,KAAKqsE,kBACpDrsE,KAAKw1E,YAAYrvB,EAAiBwvB,EAASpnD,IAAIqnD,IAC/CxvB,EAAOpmD,KAAKu1E,UACZI,EAAS5wE,IAAI6wE,EAAWxvB,IAGxBA,EAAOuvB,EAASpnD,IAAIqnD,GAExBA,IACA,IAAK,IAAInqE,EAAI,EAAGA,EAAIutB,EAAQl1B,OAAQ2H,IAChC26C,EAAKptB,QAAQvtB,GAAKutB,EAAQvtB,GAE9B26C,EAAKx2C,WAAaopB,EAAQl1B,OAC1BsiD,EAAKgN,UAAY,EACjBhN,EAAKvT,gBAAkBA,EACvBuT,EAAK/rB,KAAO+rB,EAAK0J,SAAW1J,EAAK2J,SAAW,KAC5C3J,EAAKsI,YAAc1uD,KAAKqsE,iBACxBjmB,EAAKuI,sBAAuB,EAC5BvI,EAAK4J,oBAAqB,EAC1BhwD,KAAKmzE,YAAY34C,EAAMoZ,EAAckqB,EAAgB1X,GAAM,GAAO,EACtF,KACqB,CACDpmD,KAAK61E,oCAAoCF,EAAU38C,GACnD,IAAK,IAAIvtB,EAAI,EAAGA,EAAIutB,EAAQl1B,OAAQ2H,IAAK,CACrC,IAAI26C,EACyC,MAAzCpmD,KAAK2tE,sBAAsBiI,IAC3BxvB,EAAOpmD,KAAK2tE,sBAAsBiI,GAClC51E,KAAK2tE,sBAAsBiI,GAAa,KACjB,GAAnBxvB,EAAKx2C,YAAmBw2C,EAAKptB,QAAQ,IAAMA,EAAQvtB,KACnDzL,KAAKw1E,YAAYrvB,EAAiBC,GAClCA,EAAOpmD,KAAKu1E,WAEhBI,EAAS1nD,SAASm4B,KAGlBA,EAAOpmD,KAAKu1E,UACZI,EAAS1nD,SAASm4B,IAEtBwvB,IACAxvB,EAAKptB,QAAQ,GAAKA,EAAQvtB,GAC1B26C,EAAKx2C,WAAa,EAClBw2C,EAAKgN,UAAYp6B,EAAQl1B,OACzBsiD,EAAKvT,gBAAkBA,EACvBuT,EAAK/rB,KAAO+rB,EAAK0J,SAAW1J,EAAK2J,SAAW,KAC5C3J,EAAKsI,YAAc1uD,KAAKqsE,iBACxBjmB,EAAKuI,sBAAuB,EAC5BvI,EAAK4J,oBAAqB,EAC1BhwD,KAAKmzE,YAAY34C,EAAMoZ,EAAckqB,EAAgB1X,GAAM,GAAO,EAC1F,CACA,CACA,CACY,GAAIpmD,KAAKosE,sBAAwB,GAAMx4B,GAAgB5zC,KAAK0sE,sBAAyBgJ,EAAY5xE,OAAS,IAAgE,GAA3D9D,KAAK4sE,yBAAyBr9C,QAAQsjB,GAAwB,CACzK,MAAM1wB,EAAasY,EAAQN,YAAY0Y,GACvC,GAAI1wB,EAAW6lB,WAAWnuB,WAAY,CAClC,IAAIusC,EACAuvB,EAASrnD,SAAWsnD,GACpBxvB,EAAOpmD,KAAKu1E,UACZI,EAAS1nD,SAASm4B,KAEZjkC,EAAWqtB,gBAAgB74B,YAAc3W,KAAKqsE,kBACpDrsE,KAAKw1E,YAAYrvB,EAAiBwvB,EAASpnD,IAAIqnD,IAC/CxvB,EAAOpmD,KAAKu1E,UACZI,EAAS5wE,IAAI6wE,EAAWxvB,IAGxBA,EAAOuvB,EAASpnD,IAAIqnD,GAExBA,IACA,IAAK,IAAInqE,EAAI,EAAGA,EAAIiqE,EAAY5xE,OAAQ2H,IACpC26C,EAAKptB,QAAQvtB,GAAKiqE,EAAYjqE,GAElC26C,EAAKx2C,WAAa8lE,EAAY5xE,OAC9BsiD,EAAKgN,UAAY,EACjBhN,EAAKvT,gBAAkBA,EACvBuT,EAAK/rB,KAAO+rB,EAAK0J,SAAW1J,EAAK2J,SAAW,KAC5C3J,EAAKsI,YAAc1uD,KAAKssE,qBACxBlmB,EAAKuI,sBAAuB,EAC5BvI,EAAK4J,oBAAqB,EAC1BhwD,KAAKmzE,YAAY34C,EAAMoZ,EAAckqB,EAAgB1X,GAAM,GAAO,EACtF,KACqB,CACDpmD,KAAK61E,oCAAoCF,EAAUD,GACnD,IAAK,IAAIjqE,EAAI,EAAGA,EAAIiqE,EAAY5xE,OAAQ2H,IAAK,CACzC,IAAI26C,EACyC,MAAzCpmD,KAAK2tE,sBAAsBiI,IAC3BxvB,EAAOpmD,KAAK2tE,sBAAsBiI,GAClC51E,KAAK2tE,sBAAsBiI,GAAa,KACjB,GAAnBxvB,EAAKx2C,YAAmBw2C,EAAKptB,QAAQ,IAAM08C,EAAYjqE,KACvDzL,KAAKw1E,YAAYrvB,EAAiBC,GAClCA,EAAOpmD,KAAKu1E,WAEhBI,EAAS1nD,SAASm4B,KAGlBA,EAAOpmD,KAAKu1E,UACZI,EAAS1nD,SAASm4B,IAEtBwvB,IACAxvB,EAAKptB,QAAQ,GAAK08C,EAAYjqE,GAC9B26C,EAAKx2C,WAAa,EAClBw2C,EAAKgN,UAAYsiB,EAAY5xE,OAC7BsiD,EAAKvT,gBAAkBA,EACvBuT,EAAK/rB,KAAO+rB,EAAK0J,SAAW1J,EAAK2J,SAAW,KAC5C3J,EAAKsI,YAAc1uD,KAAKssE,qBACxBlmB,EAAKuI,sBAAuB,EAC5BvI,EAAK4J,oBAAqB,EAC1BhwD,KAAKmzE,YAAY34C,EAAMoZ,EAAckqB,EAAgB1X,GAAM,GAAO,EAC1F,CACA,CACA,CACY,KAAOuvB,EAASrnD,QAAUsnD,GACtB51E,KAAKw1E,YAAYrvB,EAAiBwvB,EAASxnD,WAE/CnuB,KAAK81E,2BAA2BF,EAAWzvB,EACvD,CACQnmD,KAAKqsE,kBAAmB,EACxBrsE,KAAKssE,sBAAuB,CACpC,CACI,gDAAAyJ,CAAiDv7C,EAAMC,EAAS6Z,EAAS0hC,EAAcnjC,EAAiBhtB,EAAYE,EAAOsU,EAAM47C,EAAWC,GACxI,GAAI17C,EAAKiB,qBAA4E,GAAtDu6C,EAAa77C,YAAY5K,QAAQsjB,GAAwB,CACpF,GAAIyB,EAAQna,YAAYr2B,OAAS,GAAKkyE,EAAa77C,YAAYr2B,OAAS,EACpE,OAAO,KAEX,MAAMqyE,EAAkB17C,EAAQN,YAAY67C,EAAa77C,YAAY,IACrE,GAAI+7C,EACA,OAAOC,EAAgBnuC,WAE3B,MAAMouC,EAAkBD,EAAgB3mC,gBACxC,OAAI3pB,EAAW9O,yBAA2Bq/D,EAAgBr/D,yBAA2Bq/D,EAAgBv/D,QAAUgP,EAAWhP,OAC/Gs/D,EAAgBnuC,WAGhB,IAEvB,CAEY,OAAQkuC,GAAiBrwD,EAAW9O,wBAA2BgP,EAAQ,IAEnF,CACI,uCAAOswD,CAAiCC,EAAWC,GAC/C,GAAID,EAAUt9C,QAAQl1B,QAAUyyE,EAAWv9C,QAAQl1B,OAC/C,OAAO,EACX,MAAM0yE,EAAoBF,EAAUr9C,KAAKq9C,EAAUr9C,KAAKn1B,OAAS,GAAG8kB,SACpE,IAAK,MAAMkQ,KAASw9C,EAAUt9C,QAC1B,IAA8D,GAA1Du9C,EAAWv9C,QAAQzJ,QAAQuJ,EAAQ09C,GACnC,OAAO,EAEf,OAAO,CACf,CACI,mCAAAX,CAAoCF,EAAUc,GAC1C,IAAK,IAAIhrE,EAAI,EAAGA,EAAIkqE,EAASrnD,QAAS7iB,IAAK,CACvC,MAAM26C,EAAOuvB,EAASpnD,IAAI9iB,GACpBqtB,EAAQstB,EAAKptB,QAAQ,GAAKotB,EAAKkM,aACrC,IAAK,IAAIttC,EAAI,EAAGA,EAAIyxD,EAAY3yE,OAAQkhB,IACpC,GAAIyxD,EAAYzxD,IAAM8T,EAAO,CACzB94B,KAAK2tE,sBAAsB3oD,GAAKohC,EAChCuvB,EAASnnD,OAAO/iB,GAChBA,IACA,KACpB,CAEA,CACQ,KAAOkqE,EAASrnD,QAAU,GAAG,CACzB,MAAM83B,EAAOuvB,EAASznD,WACtB,IAAK,IAAIlJ,EAAI,EAAGA,EAAIhlB,KAAK2tE,sBAAsB7pE,OAAQkhB,IACnD,GAAqC,MAAjChlB,KAAK2tE,sBAAsB3oD,GAAY,CACvChlB,KAAK2tE,sBAAsB3oD,GAAKohC,EAChC,KACpB,CAEA,CACA,CACI,2BAAAwsB,CAA4Bp4C,EAAMoZ,EAAckqB,EAAgBoU,GAC5D,MAAMz3C,EAAUD,EAAK0V,SAAS0D,GACxB8zB,EAAe1nE,KAAKkwC,SAAS0D,GAC7BU,EAAU9Z,EAAK+pB,WAAW3Q,EAAc5zC,KAAKu0C,KAC7C6Z,EAAcpuD,KAAKg/D,iBACnB0X,EAAc12E,KAAKk7B,KAAOx4B,EAAOkR,aAAew6C,EACtD,GAAI8jB,GAAY13C,EAAKsZ,gBAAgBF,GAAe,CAChD,IAAI1Z,EAAQ,GACRy8C,EAAY,GACZC,EAAY,GACZC,EAAYn0E,EAAOma,SACvB,KAAOg6D,KACH38C,EAAMrtB,KAAK,MACX8pE,EAAU9pE,KAAK,MACf+pE,EAAU/pE,KAAK,MAEnB,GAAe,MAAXynC,IAAoB7Z,EAAQqV,MAC5B,IAAK,IAAIrkC,EAAI,EAAGA,EAAI6oC,EAAQpa,MAAMp2B,OAAQ2H,IAClC6oC,EAAQpa,MAAMzuB,GAAGooB,KAAOu6B,GACsB,MAA1CuoB,EAAUriC,EAAQpa,MAAMzuB,GAAGutB,QAAQ,KAAesb,EAAQpa,MAAMzuB,GAAGooB,IAAM8iD,EAAUriC,EAAQpa,MAAMzuB,GAAGutB,QAAQ,IAAIpF,SAChH+iD,EAAUriC,EAAQpa,MAAMzuB,GAAGutB,QAAQ,IAAMsb,EAAQpa,MAAMzuB,IAGtD6oC,EAAQpa,MAAMzuB,GAAGmoB,OAASw6B,GAAe9Z,EAAQpa,MAAMzuB,GAAGooB,IAAMu6B,EACrEl0B,EAAMoa,EAAQpa,MAAMzuB,GAAGutB,QAAQ,IAAMsb,EAAQpa,MAAMzuB,GAE9C6oC,EAAQpa,MAAMzuB,GAAGmoB,MAAQw6B,IACgB,MAA1CwoB,EAAUtiC,EAAQpa,MAAMzuB,GAAGutB,QAAQ,KAAesb,EAAQpa,MAAMzuB,GAAGmoB,MAAQgjD,EAAUtiC,EAAQpa,MAAMzuB,GAAGutB,QAAQ,IAAIpF,SAClHgjD,EAAUtiC,EAAQpa,MAAMzuB,GAAGutB,QAAQ,IAAMsb,EAAQpa,MAAMzuB,IAKvE,IAAIqrE,EAAe,EACnB,MAAMC,EAAsBv8C,EAAKiB,oBAAkC,MAAX6Y,EAAoBA,EAAQna,YAAY,GAAK,EAC/FgsB,EAAkBuhB,EAAavtC,YAAY48C,GAC3CpB,EAAWxvB,EAAgBgR,eACjC,IAAK,IAAIv8B,EAAM,EAAGA,EAAMl4B,EAAOma,SAAU+d,IAAO,CAO5C,GANkB,MAAdV,EAAMU,KACgB,MAAlB+7C,EAAU/7C,IAAgB+7C,EAAU/7C,GAAK/G,KAAOqG,EAAMU,GAAKhH,QAC3D+iD,EAAU/7C,GAAO,MACC,MAAlBg8C,EAAUh8C,IAAgBg8C,EAAUh8C,GAAKhH,OAASsG,EAAMU,GAAK/G,MAC7D+iD,EAAUh8C,GAAO,OAEoB,MAAzC8sC,EAAaF,0BAAoCE,EAAaF,0BAA4BuP,GAAsBrP,EAAaF,yBAA2BE,EAAavtC,YAAYr2B,OAAQ,CACzL,MAAMkzE,EAAwBtP,EAAavtC,YAAYutC,EAAaF,0BAC9DyP,EAAsBvP,EAAavtC,YAAY48C,GACrD,KAAOC,EAAsB7f,eAAe7oC,QAAU,GAClD2oD,EAAoB9f,eAAerpC,UAAUkpD,EAAsB7f,eAAehpC,UAE1G,CAEgB,GADAu5C,EAAaF,yBAA2BuP,EACtB,MAAd78C,EAAMU,GAAc,CACpB,IAAIs8C,EAA4BP,EAAU/7C,GACtCu8C,EAA4BP,EAAUh8C,GACtC+zB,GAAuB,EACvBqB,GAAqB,EACzB,MAAMtB,EAAehsD,EAAOkR,aAAesmB,EAAMU,GAAKhH,OAAS8iD,GAAgB12E,KAAKyqE,gBACpF,IAAIrkB,EACJ,GAAIuvB,EAASrnD,SAAWwoD,EACpB1wB,EAAOpmD,KAAKu1E,UACZI,EAAS1nD,SAASm4B,QAEjB,GAAIsI,GAA6C,MAA7BwoB,EAAoC,CACzD,MAAME,EAAUzB,EAASpnD,IAAIuoD,GACzBM,EAAQ3jB,aACRzzD,KAAKs1E,SAAS8B,GAGdp3E,KAAKw1E,YAAYrvB,EAAiBixB,GAEtChxB,EAAOpmD,KAAKu1E,UACZI,EAAS5wE,IAAI+xE,EAAc1wB,EACnD,MAEwBA,EAAOuvB,EAASpnD,IAAIuoD,GAExBA,IACA,IAAK,IAAIrrE,EAAI,EAAGA,EAAIyuB,EAAMU,GAAK5B,QAAQl1B,OAAQ2H,IAC3C26C,EAAKptB,QAAQvtB,GAAKyuB,EAAMU,GAAK5B,QAAQvtB,GAEzC26C,EAAKx2C,WAAasqB,EAAMU,GAAK5B,QAAQl1B,OACrCsiD,EAAKgN,UAAY,EACjBhN,EAAKvT,gBAAkBkkC,EACvB3wB,EAAK/rB,KAAOH,EAAMU,GAClBwrB,EAAKsJ,cAAgBx1B,EAAMU,GAAKhH,MAChCwyB,EAAKwJ,YAAc11B,EAAMU,GAAK/G,IAC9BuyB,EAAK0J,SAAWonB,EAChB9wB,EAAK2J,SAAWonB,EAChB/wB,EAAKkN,mBAAqB,EAC1BlN,EAAKmN,mBAAqB,EAC1BnN,EAAKsI,YAAcA,EACnBtI,EAAK4I,iBAAkB,EACvB5I,EAAKuI,qBAAuBA,EAC5BvI,EAAK4J,mBAAqBA,CAC9C,CACA,CACY,KAAO2lB,EAASrnD,QAAUwoD,GAAc,CACpC,MAAM1wB,EAAOuvB,EAASxnD,UAChBsM,EAAUD,EAAK0V,SAAS0D,GAC9B,GAAIwS,EAAKvT,gBAAkBpY,EAAQN,YAAYr2B,SAAWsiD,EAAKqN,aAAc,CACzE,MAAMtN,EAAkBnmD,KAAKkwC,SAAS0D,GAAczZ,YAAYisB,EAAKvT,iBACrE7yC,KAAKw1E,YAAYrvB,EAAiBC,EACtD,MAEoBpmD,KAAKs1E,SAASlvB,EAElC,CACA,MACa,IAAK5rB,EAAKsZ,gBAAgBF,GAAe,CAC1C,IAAIvZ,EAAO,KACPy1B,EAAW,KACXC,EAAW,KACf,GAAImiB,GAAuB,MAAX59B,IAAoB7Z,EAAQqV,SAAW9vC,KAAKoqE,aAAepqE,KAAKysE,kBAAoB74B,GAAe,CAC/G,IAAK,IAAInoC,EAAI,EAAGA,EAAI6oC,EAAQpa,MAAMp2B,OAAQ2H,IACtC,GAAI6oC,EAAQpa,MAAMzuB,GAAGooB,KAAOu6B,EACxB0B,EAAWxb,EAAQpa,MAAMzuB,QAExB,GAAI6oC,EAAQpa,MAAMzuB,GAAGmoB,OAASw6B,GAAe9Z,EAAQpa,MAAMzuB,GAAGooB,IAAMu6B,EACrE/zB,EAAOia,EAAQpa,MAAMzuB,QAEpB,GAAI6oC,EAAQpa,MAAMzuB,GAAGmoB,MAAQw6B,EAAa,CAC3C2B,EAAWzb,EAAQpa,MAAMzuB,GACzB,KACxB,CAE4B,MAAR4uB,IACgB,MAAZy1B,GAAoBA,EAASj8B,KAAOwG,EAAKzG,QACzCk8B,EAAW,MACC,MAAZC,GAAoBA,EAASn8B,OAASyG,EAAKxG,MAC3Ck8B,EAAW,MAEnC,CACY,GAAe,MAAXzb,KAAqB9Z,EAAKkZ,oBAAoD,GAA9BjZ,EAAQN,YAAYr2B,QAAgB02B,EAAKiB,oBAAoD,GAA9B6Y,EAAQna,YAAYr2B,QAAe,CAClJ,MAAMizE,EAAqBv8C,EAAKiB,mBAAqB6Y,EAAQna,YAAY,GAAK,EAC9E,GAA6C,MAAzCutC,EAAaF,0BAAoCE,EAAaF,0BAA4BuP,GAAsBrP,EAAaF,yBAA2BE,EAAavtC,YAAYr2B,OAAQ,CACzL,MAAMkzE,EAAwBtP,EAAavtC,YAAYutC,EAAaF,0BAC9DyP,EAAsBvP,EAAavtC,YAAY48C,GACrD,KAAOC,EAAsB9f,YAAY5oC,QAAU,GAC/C2oD,EAAoB/f,YAAYppC,UAAUkpD,EAAsB9f,YAAY/oC,UAEpG,CACgBu5C,EAAaF,yBAA2BuP,CACxD,MAEgBrP,EAAaF,yBAA2B,KAE5C,IAAK,IAAI30B,EAAkB,EAAGA,EAAkBpY,EAAQN,YAAYr2B,OAAQ+uC,IAAmB,CAC3F,MAAMsT,EAAkBuhB,EAAavtC,YAAY0Y,GAC3C8iC,EAAWxvB,EAAgB+Q,YACjC,IAAI0e,EAAY,EAChB,GAAa,MAARv7C,KAAmBG,EAAKiB,qBAAwE,GAAjD6Y,EAAQna,YAAY5K,QAAQsjB,IAA0B,CACtG,MAAM1wB,EAAasY,EAAQN,YAAY0Y,GACvC,IAAIqkC,EAA4BpnB,EAC5BqnB,EAA4BpnB,EAChC,MAAMsnB,EAAc30E,EAAOiR,aAAe6mB,EAAK2B,YACzCtW,EAAa1D,EAAWqtB,gBACxBzpB,EAAQ5D,EAAW6lB,WACzB,IAAI2mB,GAAuB,EACvBqB,GAAqB,EACrBsnB,EAAkB,EAClBC,EAAkB,EACtB,GAAkB,GAAdl9C,EAAKzG,MAAY,CACjB,IAAI4jD,EAA+B,MAAhBx3E,KAAK0qE,QAAmB,KAAOlwC,EAAK+pB,WAAW3Q,EAAc5zC,KAAK0qE,SACrF,GAAmB,MAAf8M,EAAqB,CACrB,MAAMC,EAAYD,EAAYt9C,MAAMp2B,QAAU,EAAK,KAAO0zE,EAAYt9C,MAAMs9C,EAAYt9C,MAAMp2B,OAAS,GACvG,GAAgB,MAAZ2zE,GAAoBA,EAAS5jD,KAAOwjD,EAAa,CACjD,MAAMK,EAA+Br9C,EAAKnB,sBAAwBuE,GAAM44C,iCAAiCoB,EAAUp9C,GAC7Gs9C,EAA8B33E,KAAK+1E,iDAAiDv7C,EAAMC,EAAS6Z,EAASkjC,EAAa3kC,EAAiBhtB,EAAYE,EAAOsU,EAAMo9C,EAAUC,GAChJ,MAA/BC,IACAT,EAA4BO,EAC5BH,EAAkBK,EAA4B99D,WAAa,EAAIq9D,EAA0Bl+C,QAAQl1B,OACjG6qD,EAAuB+oB,EAE3D,CACA,CACA,MAC0D,MAA7BR,IACLI,EAAkBvxD,EAAMlM,WAAa,EAAIq9D,EAA0Bl+C,QAAQl1B,QAE/E,GAAIu2B,EAAKxG,KAAOwjD,EAAa,CACzB,IAAIO,EAA+B,MAAhB53E,KAAKmtE,QAAmB,KAAO3yC,EAAK+pB,WAAW3Q,EAAc5zC,KAAKmtE,SACrF,GAAmB,MAAfyK,EAAqB,CACrB,MAAMtB,EAAasB,EAAY19C,MAAMp2B,QAAU,EAAK,KAAO8zE,EAAY19C,MAAM,GAC7E,GAAiB,MAAbo8C,GAAwC,GAAnBA,EAAU1iD,MAAY,CAC3C,MAAMikD,EAAmCvB,EAAUp9C,sBAAwBuE,GAAM44C,iCAAiCh8C,EAAMi8C,GAClHqB,EAA8B33E,KAAK+1E,iDAAiDv7C,EAAMC,EAAS6Z,EAASsjC,EAAa/kC,EAAiBhtB,EAAYE,EAAOsU,EAAMi8C,EAAWuB,GACjJ,MAA/BF,IACAR,EAA4Bb,EAC5BiB,EAAkBI,EAA4B99D,WAAa,EAAIs9D,EAA0Bn+C,QAAQl1B,OACjGksD,EAAqB6nB,EAEzD,CACA,CACA,MAC0D,MAA7BV,IACLI,EAAkBxxD,EAAMlM,WAAa,EAAIs9D,EAA0Bn+C,QAAQl1B,QAE/E,GAAIiiB,EAAMlM,WAAY,CAClB,MAAM60C,EAAehsD,EAAOkR,aAAeymB,EAAKzG,OAAS8iD,EACzD,IAAItwB,EACJ,GAAIuvB,EAASrnD,SAAWsnD,EACpBxvB,EAAOpmD,KAAKu1E,UACZI,EAAS1nD,SAASm4B,QAEjB,IAAIsI,IAAmB7oC,EAAWlP,YAAcwL,EAAW0H,qBAAyB8kC,IAAsD,MAA7BuoB,EAY9G9wB,EAAOuvB,EAASpnD,IAAIqnD,OAZ8H,CAClJ,MAAMwB,EAAUzB,EAASpnD,IAAIqnD,GACzBwB,EAAQ3jB,aACRzzD,KAAKs1E,SAAS8B,GAGdp3E,KAAKw1E,YAAYrvB,EAAiBixB,GAEtChxB,EAAOpmD,KAAKu1E,UACZI,EAAS5wE,IAAI6wE,EAAWxvB,EACpD,CAIwBwvB,IACA,IAAK,IAAInqE,EAAI,EAAGA,EAAI4uB,EAAKrB,QAAQl1B,OAAQ2H,IACrC26C,EAAKptB,QAAQvtB,GAAK4uB,EAAKrB,QAAQvtB,GAEnC26C,EAAKx2C,WAAayqB,EAAKrB,QAAQl1B,OAC/BsiD,EAAKgN,UAAY,EACjBhN,EAAKvT,gBAAkBA,EACvBuT,EAAK/rB,KAAOA,EACZ+rB,EAAKsJ,cAAgBr1B,EAAKzG,MAC1BwyB,EAAKwJ,YAAcv1B,EAAKxG,IACxBuyB,EAAK0J,SAAWonB,EAChB9wB,EAAK2J,SAAWonB,EAChB/wB,EAAKkN,mBAAqB,EAC1BlN,EAAKmN,mBAAqB,EAC1BnN,EAAKsI,YAAcA,EACnBtI,EAAK4I,iBAAkB,EACvB5I,EAAKuI,qBAAuBA,EAC5BvI,EAAK4J,mBAAqBA,EAC1BhwD,KAAKmzE,YAAY34C,EAAMoZ,EAAckqB,EAAgB1X,GAAM,GAAO,EAC1F,KACyB,CACD,MAAMvgC,EAAa1D,EAAWqtB,iBACxB3pB,EAAWlP,aAAekP,EAAWhP,QAA8B,GAApBkP,EAAMnM,YAAoB+0C,IAA0BjsD,EAAOkR,aAAeymB,EAAKzG,OAAS8iD,GAA6C,MAA7BQ,GACzJl3E,KAAK61E,oCAAoCF,EAAUt7C,EAAKrB,SAE5D,IAAI8+C,EAAmB,EACvB,IAAK,IAAIrsE,EAAI,EAAGA,EAAI4uB,EAAKrB,QAAQl1B,OAAQ2H,IAAK,CAC1C,IAAIssE,EAAuBT,EAAkB7rE,EAAKyrE,EAA4B,KAC1Ec,EAAkB39C,EAClB49C,EAAuBV,EAAkB9rE,EAAK0rE,EAA4B,KAC1EznB,EAAgBsoB,EAAgBpkD,MAAQkkD,EACxC9oB,GAAkB,EACtB,GAAIU,EAAgBtB,EAAa,CAC7B,KAAIunB,EAASrnD,QAAU7iB,IAAMoa,EAAWlP,YAAcg4C,IAAgD,MAAvBopB,GAQ3E,MAPAE,EAAsBD,EACtBA,EAAkBD,EAClBA,EAAsB,KACtBroB,EAAgBsoB,EAAgBpkD,MAAQkkD,EACxC9oB,GAAkB,CAKtD,CAC4B,IAAIY,EAAcooB,EAAgBnkD,KAC7BhO,EAAWlP,YAAcg4C,IAAgD,MAAvBspB,IACnDroB,EAAclkD,KAAKQ,IAAIxJ,EAAOiR,aAAe3T,KAAKw6B,KAAK2B,YAAayzB,EAAckoB,KAEhFjyD,EAAWjP,WAAc+3C,IAAgD,MAAvBopB,IACpDD,GAAoB/xD,EAAMnM,YAE9B,MAAM80C,EAAehsD,EAAOkR,aAAe87C,GAAiBgnB,EAC5D,IAAItwB,EACJ,GAA6C,MAAzCpmD,KAAK2tE,sBAAsBiI,GAC3BxvB,EAAOpmD,KAAK2tE,sBAAsBiI,GAClC51E,KAAK2tE,sBAAsBiI,GAAa,KACxCD,EAAS1nD,SAASm4B,QAEjB,GAAIuvB,EAASrnD,SAAWsnD,EACzBxvB,EAAOpmD,KAAKu1E,UACZI,EAAS1nD,SAASm4B,QAEjB,IAAIsI,IAAkB7oC,EAAWlP,YAAeg4C,IAAgD,MAAvBopB,EAY1E3xB,EAAOuvB,EAASpnD,IAAIqnD,OAZoF,CACxG,MAAMwB,EAAUzB,EAASpnD,IAAIqnD,GACzBwB,EAAQ3jB,aACRzzD,KAAKs1E,SAAS8B,GAGdp3E,KAAKw1E,YAAYrvB,EAAiBixB,GAEtChxB,EAAOpmD,KAAKu1E,UACZI,EAAS5wE,IAAI6wE,EAAWxvB,EACxD,CAI4BwvB,IACAxvB,EAAKptB,QAAQ,GAAKg/C,EAAgBh/C,QAAQvtB,GAC1C26C,EAAKx2C,WAAa,EAClBw2C,EAAKgN,UAAY4kB,EAAgBh/C,QAAQl1B,OACzCsiD,EAAKvT,gBAAkBA,EACvBuT,EAAK/rB,KAAO29C,EACZ5xB,EAAKsJ,cAAgBA,EACrBtJ,EAAKwJ,YAAcA,EACnBxJ,EAAK0J,SAAWioB,EAChB3xB,EAAK2J,SAAWkoB,EAChB7xB,EAAKkN,mBAAqB7nD,EAC1B26C,EAAKmN,mBAAqB9nD,EAC1B26C,EAAKsI,YAAcA,EACnBtI,EAAK4I,gBAAkBA,EACvB5I,EAAKuI,qBAAuBA,GAA+C,MAAvBopB,EACpD3xB,EAAK4J,mBAAqBA,GAA6C,MAAvBioB,EAChDj4E,KAAKmzE,YAAY34C,EAAMoZ,EAAckqB,EAAgB1X,GAAM,GAAO,EAC9F,CACA,EACwBvgC,EAAWjP,WAAc++D,EAASrnD,SAAW,GAAO+L,EAAKrB,QAAQl1B,QAAU,IAC3EqiD,EAAgBqQ,iBAAiBl8B,OACzD,CACgB,KAAOq7C,EAASrnD,QAAUsnD,GAAW,CACjC,MAAMxvB,EAAOuvB,EAASxnD,UAChBsM,EAAUD,EAAK0V,SAAS0D,GAC9B,GAAIwS,EAAKvT,gBAAkBpY,EAAQN,YAAYr2B,SAAWsiD,EAAKqN,aAAc,CACzE,MAAMtN,EAAkBuhB,EAAavtC,YAAYisB,EAAKvT,iBACtD7yC,KAAKw1E,YAAYrvB,EAAiBC,EAC1D,MAEwBpmD,KAAKs1E,SAASlvB,EAEtC,CACgBpmD,KAAK81E,2BAA2BF,EAAWzvB,EAC3D,CACA,CACA,CACI,0BAAA2vB,CAA2BF,EAAWzvB,GAClC,IAAK,IAAI16C,EAAImqE,EAAWnqE,EAAIzL,KAAK2tE,sBAAsB7pE,OAAQ2H,IAAK,CAChE,MAAM2rE,EAAUp3E,KAAK2tE,sBAAsBliE,GAC5B,MAAX2rE,IACIA,EAAQ3jB,aACRzzD,KAAKs1E,SAAS8B,GAGdp3E,KAAKw1E,YAAYrvB,EAAiBixB,GAEtCp3E,KAAK2tE,sBAAsBliE,GAAK,KAEhD,CACA,CACI,QAAA2nE,CAASx/B,EAAc2+B,EAAaG,EAAWtsB,GAC3C,MACMD,EADenmD,KAAKkwC,SAAS0D,GACEzZ,YAAYisB,EAAKvT,iBACnB,MAA/BsT,EAAgBmR,aAChBnR,EAAgBmR,YAAYt3D,KAAMuyE,EAAaG,EAAWtsB,EAAMD,GACpEC,EAAKoQ,iBAAiBxF,iBACtB7K,EAAgBqQ,iBAAiBxF,gBACzC,CACI,WAAA6hB,CAAYr4C,EAAMoZ,EAAckqB,EAAgByU,EAAajsB,EAAuBF,EAAM8xB,EAAUhF,GAChG,MACM/wD,EADUqY,EAAK0V,SAAS0D,GACHzZ,YAAYisB,EAAKvT,iBAC5C,GAAiB,MAAbuT,EAAK/rB,KAAc,CACnB,MAAMm5C,EAAexzE,KAAK++D,kBACpB0U,EAAoB,EAAiB/wE,EAAOkR,aAC5C8/D,GAAmBF,EAAe,GAAK9wE,EAAOkR,aAC9C42D,EAAsBxqE,KAAKwqE,oBAG3BzX,EAAgB0gB,GAAqBC,EAAkBD,IAF1C,EAAM,EAAwB3V,GAG3C9K,EAAcygB,GAAqBC,EAAkBD,IAF1C,GAAOjJ,EAAsBlkB,GAAyBwX,GAGjEzP,EAAgB3rD,EAAOkR,aAAem/C,EACtC/F,EAActqD,EAAOkR,aAAeo/C,EACpCh5B,EAAcosB,EAAK/rB,KAAKP,eAAe95B,KAAKg/D,kBAC5C/P,EAAW7I,EAAK/rB,KAAKpB,KAAKe,EAAc,GACxCk1B,EAAS9I,EAAK/rB,KAAKpB,KAAKe,GACxBm1B,GAAgB/I,EAAK/rB,KAAKzG,MAAQq7B,EAASr2B,MAAQl2B,EAAOkR,aAC1D07C,GAAclJ,EAAK/rB,KAAKzG,MAAQs7B,EAAOt2B,MAAQl2B,EAAOkR,aACtD27C,GAAclB,EAAgBc,IAAiBG,EAAaH,GAC5DK,GAAYxC,EAAcmC,IAAiBG,EAAaH,GAC9D/I,EAAKjhD,WAAa8pD,EAASvgC,MAAQwgC,EAAOxgC,KAAOugC,EAASvgC,MAAQ6gC,EAClEnJ,EAAKgO,gBAAmBnF,EAASvgC,MAAQwgC,EAAOxgC,KAAOugC,EAASvgC,MAAQ8gC,EAAYpJ,EAAKjhD,WACzFs4B,GAAM06C,SAASn4E,KAAMuyE,EAAajsB,EAAuBF,EAAMjkC,EAC3E,CACA,CACI,6BAAOi2D,CAAuBhlB,GAC1B,OAAO,GAAyB,KAAjBA,EAAY,GAAY,EAC/C,CACI,WAAA+f,CAAY34C,EAAMoZ,EAAckqB,EAAgB1X,EAAM8xB,EAAUhF,GAC5D,MAAM5sB,EAAwB56C,KAAKoV,KAAKg9C,GAClCrjC,EAAUD,EAAK0V,SAAS0D,GACxB8zB,EAAe1nE,KAAKkwC,SAAS0D,GAC7BzxB,EAAasY,EAAQN,YAAYisB,EAAKvT,iBACtCsT,EAAkBuhB,EAAavtC,YAAYisB,EAAKvT,iBACtDsT,EAAgBwQ,OAAQ,EACxBxQ,EAAgB0Q,sBAAuB,EAClC1Q,EAAgByQ,UACjBzQ,EAAgByY,QAAQ5+D,KAAMmiB,EAAY27C,EAAgBxX,EAAuBF,EAAMxS,EAAcwS,EAAKvT,iBAE9G,MAAMhtB,EAAa1D,EAAWqtB,gBACxBzpB,EAAQ5D,EAAW6lB,WACnBqwC,EAAkBtyD,EAAMlM,WAAa,EAAM4jB,GAAM26C,uBAAuBhyB,EAAKgN,WAC7Ex3B,EAAiBpB,EAAKqZ,kBAAkBD,GACxC0kC,EAAgB18C,EAAiBl5B,EAAO+Z,cAAgB,EACxD87D,EAAiB71E,EAAOkR,aAAekqD,EAAiB99D,KAAK2mD,iBAC7D6xB,EAAa,EAAMx4E,KAAK2mD,iBACxBmM,EAAe,EAAMpwD,EAAOiR,aAC5B6/D,EAAexzE,KAAK++D,kBACpBhM,EAAgB,EAAiBrwD,EAAOkR,aACxCo/C,GAAewgB,EAAe,GAAO9wE,EAAOkR,aAC5Cw6C,EAAcpuD,KAAKg/D,iBACzB,IAAIyZ,EAAsB,EAC1BryB,EAAKoP,8BAAgC,EACrC,IAAIkjB,EAAmBxF,EACnByF,EAAgB,EAChBC,EAAc,EACdC,EAAsB,EACtBC,EAAoB,EACpBC,EAAuBV,EACvBW,EAAqBX,EACrBY,EAA2B,GAC3B7mE,EAAY1P,EAAOwP,KAAKsoB,EAAKrlB,KAAK/C,UAAa1P,EAAOga,iBAAmB8d,EAAKtD,OAC9EgiD,EAAiB,EACjBC,EAAe,GACnB,GAAuB,GAAnBh3D,EAAWlL,KACXiiE,EAAiBx2E,EAAO4R,uBACpBsnB,IACAxpB,EAAY1P,EAAOyY,kBACnB+9D,GAAkB,GAEtBD,EAA2Bv2E,EAAOyY,kBAClCg+D,EAAe,QAEd,GAAuB,GAAnBh3D,EAAWlL,KAChB7E,EAAY1P,EAAOyY,kBACnB+9D,EAAiBx2E,EAAO6R,sBACxB0kE,EAA2B7mE,OAE1B,GAAuB,GAAnB+P,EAAWlL,KAChB7E,EAAYwpB,EAAiBl5B,EAAO+K,WAAW0U,EAAW4iB,WAAW3yB,UAAYA,EAAY1P,EAAO+K,WAAW0U,EAAW4iB,WAAW3yB,UAAY,GACjJ8mE,EAAiBx2E,EAAO2R,oBACxB4kE,EAA2B7mE,EAC3B+mE,EAAez2E,EAAO+K,WAAW0U,EAAW4iB,WAAWxvB,OAAS,GAAO,QAEtE,GAAuB,GAAnB4M,EAAWlL,MAAgC,IAAnBkL,EAAWlL,KACxCiiE,EAAiBx2E,EAAO0R,sBAEvB,GAAuB,GAAnB+N,EAAWlL,KAChBiiE,EAAiBx2E,EAAOyR,mBACpBzR,EAAOC,UAAUwf,EAAW1f,UAAU8+C,gBAClC7+C,EAAOC,UAAUwf,EAAW1f,UAAU4C,aACtC+M,GAA2I,GAAtH1G,KAAK6D,KAAK7M,EAAOC,UAAUwf,EAAW1f,UAAUc,QAAQO,OAASpB,EAAOC,UAAUwf,EAAW1f,UAAUF,YAA/G,QAAqI,GAAKG,EAAOC,UAAUwf,EAAW1f,UAAU++C,SAG7LpvC,IAA4I,GAAtH1G,KAAK6D,KAAK7M,EAAOC,UAAUwf,EAAW1f,UAAUc,QAAQO,OAASpB,EAAOC,UAAUwf,EAAW1f,UAAUF,YAA/G,QAAqI,GAAKG,EAAOC,UAAUwf,EAAW1f,UAAU++C,SAI9L9+C,EAAOC,UAAUwf,EAAW1f,UAAU2C,YAAc1C,EAAOC,UAAUwf,EAAW1f,UAAU4C,aAC1F+M,EAAYA,EAAY,GAAK1P,EAAOC,UAAUwf,EAAW1f,UAAU6C,kBAE9D5C,EAAOC,UAAUwf,EAAW1f,UAAU2C,WAAa1C,EAAOC,UAAUwf,EAAW1f,UAAU4C,eAC9F+M,GAAa,GAAK1P,EAAOC,UAAUwf,EAAW1f,UAAU6C,wBAI/D,GAAuB,GAAnB6c,EAAWlL,KAChBiiE,EAAiBx2E,EAAOyR,wBAEvB,GAAuB,GAAnBgO,EAAWlL,KAChBiiE,EAAiBx2E,EAAO8R,6BAEvB,GAAuB,GAAnB2N,EAAWlL,KAChBiiE,EAAiBx2E,EAAO+R,uBAEvB,GAAuB,GAAnB0N,EAAWlL,KAChBiiE,EAAiBx2E,EAAOgS,4BAEvB,GAAuB,GAAnByN,EAAWlL,KAChBiiE,EAAiBx2E,EAAOiS,+BAEvB,IAAuB,IAAnBwN,EAAWlL,KAOhB,MAAM,IAAI7T,MAAM,2CANhB81E,EAAiB,EACjBD,EAA2B,EAC3BE,EAAe,EACf/mE,EAAY,CAIxB,CACQ,IAAKg0C,EAAKsI,cAAgB7oC,EAAWlP,aAAeyvC,EAAKuI,sBAAyBvI,EAAKoN,oBACnFpN,EAAK9rB,QACL6rB,EAAgBqQ,iBAAiBl8B,QACV,GAAnBnY,EAAWlL,MAAakL,EAAWqI,6BAA6B,CAChE,MAAM4uD,EAAiB12E,EAAOK,gBAAgBof,EAAW1f,UAAUc,QAAQO,OAAS,EAC9Eu1E,EAAcl3D,EAAW0I,oBAAsBuuD,EAC/CE,EAAa,iBACnB,IAAK,IAAI7tE,EAAI,EAAGA,EAAI/I,EAAOsX,wBAAyBvO,IAChD26C,EAAK2N,OAAOtoD,GAAK0W,EAAWyI,sBAAwBlf,KAAKO,IAAI,EAAGP,KAAKQ,IAAIotE,EAAYD,IAAgB3tE,KAAKO,IAAI,EAAGotE,GACjHjzB,EAAK4N,WAAWvoD,GAAK0W,EAAWyI,uBAAyB,EAAI,EAC7Dw7B,EAAK6N,oBAAoBxoD,GAAK,EAC9B26C,EAAK8N,kBAAkBzoD,GAAK,EAC5B26C,EAAK+N,4BAA4B1oD,GAAK,CAE1D,CAEQ26C,EAAKoN,kBAAmB,EACxB,IAAK,IAAI/nD,EAAI,EAAGA,EAAI/I,EAAOsX,wBAAyBvO,IAChD26C,EAAKS,YAAYp7C,GAAK,EACtB26C,EAAKW,iBAAiBt7C,GAAK,EAC3B26C,EAAKiO,oBAAoB5oD,GAAK,EAC9B26C,EAAKkO,yBAAyB7oD,GAAK,EAEvC26C,EAAKjhD,WAAa,EAClBihD,EAAKgO,gBAAkB,EACvB,IAAK,IAAI3oD,EAAI,EAAGA,GAAwB,IAAnB0W,EAAWlL,KAAa,EAAIvU,EAAOqX,eAAgBtO,IACpE26C,EAAKnmC,cAAcxU,GAAKgyB,GAAM87C,gBAAgBp3D,EAAW2E,UAAUrb,GAAG+b,SAAUrF,EAAW2E,UAAUrb,GAAG2B,YAE5G,GAAI8qE,EAAU,CACV,MAAMsB,EAA0BpzB,EAAKsN,mBAC/B+lB,EAAwBrzB,EAAKsN,mBAAqB,EACxDilB,EAAgBC,EAAcxyB,EAAKkM,aACnC,MAAM/7C,EAAe7K,KAAKY,IAAI6V,EAAWutB,mBACzCmpC,EAAsBp7C,GAAM8zB,sBAAsB,EAAMioB,EAA0BjjE,GAAgB7T,EAAOoV,aACzGghE,EAAoBr7C,GAAM8zB,sBAAsB,EAAMkoB,EAAwBljE,GAAgB7T,EAAOoV,aACjGo7D,IACA4F,EAAoB,GAEpB1yB,EAAKsN,mBAAqB,GAAKn9C,IAC/BmiE,GAAmB,EACnC,MACa,GAAiB,MAAbtyB,EAAK/rB,KACVw+C,EAAsBC,EAAoB,EAC1C1yB,EAAKkM,aAAe,EACpBlM,EAAKsN,mBAAqB,EAC1BtN,EAAKuN,sBAAwBrN,MAE5B,CACD,MAAMjsB,EAAO+rB,EAAK/rB,KACZ01B,EAAW3J,EAAK2J,SAChBL,EAAgBtJ,EAAKsJ,cACrBE,EAAcxJ,EAAKwJ,YACnB51B,EAAcK,EAAKP,eAAes0B,GAClCa,EAAW50B,EAAKpB,KAAKe,EAAc,GACnCk1B,EAAS70B,EAAKpB,KAAKe,GACnBy1B,EAAgBC,EAAgBhtD,EAAOkR,aACvC+7C,EAAcC,EAAcltD,EAAOkR,aACnC8lE,GAAYr/C,EAAKzG,MAAQq7B,EAASr2B,MAAQl2B,EAAOkR,aACjD+lE,GAAUt/C,EAAKzG,MAAQs7B,EAAOt2B,MAAQl2B,EAAOkR,aACnDwyC,EAAKsN,mBAAqB,EAC1B,MAAMrF,EAAgBD,EAAc1rD,EAAOkR,aAAe5T,KAAKk7B,KACzD8xB,EAAcqB,EAAgB,EAC9BurB,EAA2BvrB,EAAgBoB,EAC3CoqB,EAAyB7sB,EAAcyC,EACvCqqB,EAAgBpuE,KAAKQ,IAAI,GAAMmiD,EAAgBqrB,IAAaC,EAASD,IACrEK,EAAcruE,KAAKQ,IAAI,GAAM8gD,EAAc0sB,IAAaC,EAASD,IAMvE,GALAb,EAAsB,EACtBC,EAAoB,EACpBH,EAAgB1pB,EAASrmC,UAAYsmC,EAAOtmC,SAAWqmC,EAASrmC,UAAYkxD,EAC5ElB,EAAc3pB,EAASrmC,UAAYsmC,EAAOtmC,SAAWqmC,EAASrmC,UAAYmxD,EAC1E3zB,EAAKkM,aAAesmB,GACd/yD,EAAWlP,aAAeyvC,EAAK4J,oBAAmC,MAAZD,EAAkB,CAC1E,MAAMx5C,GAAgB4L,EAAWutB,kBACjC,GAAIn5B,EAAe,EAAK,CACpB,MAAMyjE,EAAkBrqB,EAAcF,EACtCopB,GAAuBntE,KAAKQ,IAAI,GAAM8tE,EAAkBJ,GAA4BrjE,GACpFuiE,GAAqBptE,KAAKQ,IAAI,GAAM8tE,EAAkBH,GAA0BtjE,GAC5Ey2C,GAAeyC,EAAgBuqB,IAC/BtB,GAAmB,EAC3C,CACA,CACA,CACQtyB,EAAKqN,aAAeilB,EACpB,IACI9W,EACAM,EAFA+X,EAAgB93D,EAAWuF,WAG/B,GAAIvF,EAAW+F,eAAgB,CAC3B,MAAMgyD,EAA0B/3D,EAAWuF,WACP,MAAhCvF,EAAWkjB,eAAe,KAC1BljB,EAAWkjB,eAAe,GAAK,IAAIzD,IACvC,MAAMu4C,EAAwBh4D,EAAWkjB,eAAe,GACxD,IAAIw8B,EAAkB1/C,EAAW+iB,oBAC7B48B,EAAkB3/C,EAAWgjB,qBAC7B48B,EAAgB5/C,EAAW+iB,oBAC3B88B,EAAgB7/C,EAAWgjB,qBAC3B88B,GAAgB,EAChBjiE,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcwS,EAAKvT,mBACzFgvB,EAAkB7hE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAC5HkvB,EAAgB/hE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAC1HovB,GAAgB,GAEhBjiE,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,mBAC1FivB,EAAkB9hE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAC7HmvB,EAAgBhiE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAC3HovB,GAAgB,GAEpBiY,EAAwB91C,8BAA8By9B,EAAiBC,GAAkBG,GACzFkY,EAAsB/1C,8BAA8B29B,EAAeC,GAAgBC,GACnFL,EAAasY,EAAwBr4C,cAAc,GACnDqgC,EAAWiY,EAAsBt4C,cAAc,GAC/C1f,EAAWuF,WAAawyD,EACxB/3D,EAAW2uC,mBAAqBopB,CAC5C,CACQ,MAAM1jB,EAAmBpQ,EAAKoQ,iBACxByI,EAAiB,GACvB,IAAK,IAAIxzD,EAAI,EAAGA,EAAI/I,EAAO6c,iBAAkB9T,IACzCwzD,EAAexzD,GAAK,EAExB,IAAK,IAAI8jC,EAAgB,EAAGA,EAAgBptB,EAAWqjB,cAAe+J,IAAiB,CACnF,IAAIhnB,EAAmBpG,EAAWvH,UAAU20B,GAAehnB,iBACvDvoB,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,6BAA6BF,MAAOouC,EAAcwS,EAAKvT,kBAA6E,MAAzD1wB,EAAWvH,UAAU20B,GAAe/K,oBAC7Jjc,EAAmBpG,EAAWvH,UAAU20B,GAAe/K,mBAE3D,IAAI06B,EAAmBx8D,EAAO4U,cAAc6K,EAAWkF,eAAiBkB,EACpEvoB,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,mBAC1FqsB,EAAmBxzD,KAAKO,IAAI,EAAGP,KAAKQ,IAAIxJ,EAAO4U,cAAcxT,OAAS,EAAG9D,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,KAEhLqsB,EADAtpC,OAAOwpC,UAAUF,GACEx8D,EAAO4U,cAAc4nD,GAAoB32C,GAGxC,EAAK22C,EAAmB,GAAMx8D,EAAO4U,cAAc5L,KAAK4F,MAAM4tD,IAAsBA,EAAmB,EAAKx8D,EAAO4U,cAAc5L,KAAKoV,KAAKo+C,IAAqB32C,GAG5L02C,EAAe1vB,GAAiB2vB,CAC5C,CACQ1I,EAAiBrI,iBAAiBhsC,EAAYisC,EAAajI,EAAgBwR,aAAcj1D,EAAOkR,aAAem/C,EAAe+K,EAAiB99D,KAAK2mD,iBAAkBP,EAAM6Y,EAAgB9Y,EAAiBnmD,KAAM4zC,EAAcwS,EAAKvT,iBACtO,MAAMib,EAAiB1H,EAAKoQ,iBAAiB1I,eACvCC,EAAe3H,EAAKoQ,iBAAiBzI,aAK3C,GAJA5rC,EAAWuF,WAAauyD,GACpBp0D,EAAWjP,WAA+B,MAAjBwvC,EAAK0J,UAAiC,MAAb1J,EAAK/rB,MACvD8rB,EAAgBqQ,iBAAiBl8B,QAEpB,MAAb8rB,EAAK/rB,MAAgBxU,EAAWhP,OAAQ,CACxC,MAAMi5C,EAAW1J,EAAK0J,SAChBC,EAAW3J,EAAK2J,SACtB,GAAgB,MAAZD,EAAkB,CAClB,MAAMsqB,EAAetqB,EAAS92B,QAAQotB,EAAKkN,oBAAsBxD,EAAS72B,KAAK62B,EAAS72B,KAAKn1B,OAAS,GAAG8kB,SAAWw9B,EAAKptB,QAAQ,GAKjI,GAJIw9B,EAAiBrJ,iBACjBwrB,GAAiByB,EAAe5jB,EAAiBjJ,qBACjDiJ,EAAiBpJ,eACjBwrB,GAAewB,EAAe5jB,EAAiBhJ,oBAC9CznC,EAAMlM,WAAY,CACnB,MAAMwgE,EAAgBvqB,EAAS92B,QAAQl1B,OAASsiD,EAAKgN,UACjDoD,EAAiBrJ,iBACjB4rB,EAAuBt7C,GAAM26C,uBAAuBhyB,EAAKgN,UAAYinB,EAAgB7jB,EAAiBjJ,sBACtGiJ,EAAiBpJ,eACjB4rB,EAAqBv7C,GAAM26C,uBAAuBhyB,EAAKgN,UAAYinB,EAAgB7jB,EAAiBhJ,mBAC5H,CACA,CACY,GAAgB,MAAZuC,EAAkB,CAClB,MAAMqqB,EAAerqB,EAAS/2B,QAAQotB,EAAKmN,qBAAuBnN,EAAKptB,QAAQ,GAAKotB,EAAK/rB,KAAKpB,KAAKmtB,EAAK/rB,KAAKpB,KAAKn1B,OAAS,GAAG8kB,UAK9H,GAJI4tC,EAAiBnJ,iBACjBsrB,GAAiByB,EAAe5jB,EAAiB/I,qBACjD+I,EAAiBlJ,eACjBsrB,GAAewB,EAAe5jB,EAAiB9I,oBAC9C3nC,EAAMlM,WAAY,CACnB,MAAMwgE,EAAgBtqB,EAAS/2B,QAAQl1B,OAASsiD,EAAKgN,UACjDoD,EAAiBnJ,iBACjB0rB,EAAuBt7C,GAAM26C,uBAAuBhyB,EAAKgN,UAAYinB,EAAgB7jB,EAAiB/I,sBACtG+I,EAAiBlJ,eACjB0rB,EAAqBv7C,GAAM26C,uBAAuBhyB,EAAKgN,UAAYinB,EAAgB7jB,EAAiB9I,mBAC5H,CACA,CACA,CACQ,GAAIp9C,EAAyB6R,EAAW/R,SAAU,CAC9C,IAAIq1B,EAAa/iC,EAAOsa,wBAAwBmF,EAAWsjB,YAAc6yC,EACrEgC,EAAwB,EACxBC,EAAsB,EACtBv6E,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,mBACvFpN,EAAa/iC,EAAOsa,wBAAwBta,EAAOsa,wBAAwBlZ,OAAS,GACpFw2E,EAAyBt6E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAWnwC,EAAuB,iBACnK63E,EAAuBv6E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAUnwC,EAAuB,kBAIpKi2E,GAAiBlzC,EAFKqoB,EAAe,IAESwsB,EAC9C1B,GAAenzC,EAFKsoB,EAAa,IAESwsB,CACtD,CACQ,GAAIhqE,EAAqB4R,EAAW/R,UAAYpQ,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAkB,CACrJ,MAAM6d,EAAgB5C,EAAe,IAC/B8C,EAAc7C,EAAa,IACjC,IAAIysB,EAAiBr4D,EAAWujB,OAC5B+0C,EAAet4D,EAAWujB,OAC1B1lC,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcwS,EAAKvT,mBAClF2nC,EAAiBx6E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAASnwC,EAAO0a,aACpIq9D,EAAez6E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAQnwC,EAAO0a,cAEjIpd,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,mBACvF2nC,GAAkB,EAAIx6E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAC9H4nC,GAAgB,EAAIz6E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,IAEhI8lC,GAAiBl7C,GAAMwK,cAAcuyC,GAAkB9pB,EAAgBhuD,EAAOga,iBAAgB,KAC9Fk8D,GAAen7C,GAAMwK,cAAcwyC,GAAgB7pB,EAAcluD,EAAOga,iBAAgB,IACpG,CACQ,GAAIlM,EAAsB2R,EAAW/R,SAAU,CAC3C,IAAI8G,EACAwjE,EACAC,EAsBAC,EACJ,GAtBIz4D,EAAWgE,SAAWzjB,EAAOsU,SAASlT,QACtCoT,EAAuC,EAA1BiL,EAAW8G,aACpB9G,EAAW8G,cAAgBvmB,EAAO0d,WAAW1a,WAAW,iBAAiB4a,YACzEpJ,EAAa0e,OAAOilD,mBACxBH,EAAwBv4D,EAAW6G,aACnC2xD,EAAsBD,IAGtBxjE,EAAaxU,EAAOsU,SAASmL,EAAWgE,SAASjP,WACjDwjE,EAAwBh4E,EAAOsU,SAASmL,EAAWgE,SAAS3W,UAC5DmrE,EAAsBD,GAEtB16E,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcwS,EAAKvT,mBACzF37B,EAAgI,EAAnHlX,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GACnH37B,GAAwE,EAA1DxU,EAAO0d,WAAW1a,WAAW,iBAAiB4a,YAC5DpJ,EAAa0e,OAAOilD,oBAExB76E,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcwS,EAAKvT,mBACzF6nC,EAAwB16E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAS,GAC3I8nC,EAAsB36E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,iBAAiBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAQ,IAGpH,MAApBuT,EAAKoO,YACLomB,EAAex0B,EAAKoO,gBAEnB,CAID,GADAomB,EAAeF,EAFOj9C,GAAMq9C,gBAAgB34D,EAAYo2D,EAAiBpyB,EAAgBsR,aACvD3J,EAAe,IAE7C52C,EAAa,EAAK,CAClB,MAAM6jE,EAAyB7jE,EAAas/C,EAAiBtK,eAC7D0uB,GAAgBlvE,KAAKO,IAAI,EAAKP,KAAKQ,IAAI,EAAK,EAAM6uE,EAAyB,GAC/F,CACA,CACY,IAAIC,EAAgBv9C,GAAMq9C,gBAAgB34D,EAAYo2D,EAAiBpyB,EAAgBuR,iBACvF,MAAMujB,EAA0BltB,EAAa,IAC7C,GAAuB,IAAnB5rC,EAAWlL,KAAY,CACvB,IAAIikE,EAAaP,EAAsBK,EAAgBC,EACvD,GAAI/jE,EAAa,EAAK,CAClB,MAAMikE,EAAuBjkE,EAAas/C,EAAiBrK,aAC3D+uB,GAAcxvE,KAAKO,IAAI,EAAKP,KAAKQ,IAAI,EAAK,EAAMivE,EAAuB,GAC3F,CACgB/0B,EAAKoO,YAAc0mB,EACnBvC,GAAiBiC,EACjBhC,GAAesC,CAC/B,CACA,CACQ,IAAMr1D,EAAWlP,aAAeyvC,EAAKuI,sBAA0C,MAAjBvI,EAAK0J,SAAkB,CACjF,MAAMhqC,EAAgB3D,EAAWstB,mBAC7B3pB,EAAgB,IAChB+yD,GAAuBntE,KAAKQ,IAAI,EAAKsqD,EAAiBzK,yBAA2BjmC,GACjFgzD,GAAqBptE,KAAKQ,IAAI,EAAKsqD,EAAiBvK,uBAAyBnmC,GAE7F,CAC+B,GAAnB3D,EAAWlL,MAAkC,MAArBmvC,EAAKiN,eAC7BjN,EAAKiN,aAAejN,EAAKptB,QAAQ,GAChB,MAAbotB,EAAK/rB,OACL+rB,EAAKiN,cAAgBjN,EAAK/rB,KAAKlB,oBACnCitB,EAAKiN,aAAe3nD,KAAKO,IAAI,EAAGP,KAAKQ,IAAIxJ,EAAOia,UAAY,EAAGypC,EAAKiN,gBAExE,IAAI+nB,EAAuB5kB,EAAiBtI,qCAC5C,GAAKz9C,EAAyB0R,EAAW/R,SAGpC,CACD,MAAMirE,EAA4BvtB,EAAe,GAC3CwtB,EAA0BvtB,EAAa,GAC7C,GAAI5rC,EAAW+F,eAAgB,CAC3B,MAAMqzD,EAAwBztB,EAAe,IACvC0tB,EAAsBztB,EAAa,IACnC0tB,EAAwB3tB,EAAe,IACvC4tB,EAAsB3tB,EAAa,IACzC6T,EAAWzgC,eAAe1D,GAAMwqB,4BAA6BjoD,KAAK2mD,iBAAkB00B,EAA4BE,EAAuBE,GACvIvZ,EAAS/gC,eAAe1D,GAAM4qB,0BAA2BroD,KAAK2mD,iBAAkB20B,EAA0BE,EAAqBE,GAC3Ht1B,EAAKgP,YAAYtxD,OAAS,IAC1BsiD,EAAKgP,YAAY,GAAK,IAAIriC,GAC9BqzB,EAAKgP,YAAY,GAAGzhC,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAM4qB,0BAA2B,EAAM/B,EAA0C,GAAnBsb,EAAW3qD,MAC7JmkE,GAAwBxZ,EAAWvgC,4BACnC+kB,EAAKiP,gBAAkB,CACvC,KACiB,CACD,MAAMsmB,EAAuD,MAAjCx5D,EAAW2uC,mBAA8B3uC,EAAW2uC,mBAAqB3uC,EAAWuF,WAChH,IAAK,IAAIjc,EAAI,EAAGA,EAAIkwE,EAAmB75C,kBAAmBr2B,IAAK,CAC3D,MAAM8vE,EAAwBztB,EAAe,GAAKriD,GAC5C+vE,EAAsBztB,EAAa,GAAKtiD,GACxCgwE,EAAwB3tB,EAAe,GAAKriD,GAC5CiwE,EAAsB3tB,EAAa,GAAKtiD,GAC9C,IAAIm2D,EAAa+Z,EAAmB95C,cAAcp2B,GAClD,MAAMy2D,EAA2C,MAA/B//C,EAAWylD,kBAA4E,MAAhDzlD,EAAWylD,iBAAiB/lC,cAAcp2B,GAAc0W,EAAWylD,iBAAiB/lC,cAAcp2B,GAAKkwE,EAAmB95C,cAAcp2B,GAC7Lm2D,EAAW3qD,MAAQirD,EAASjrD,OAC5B2qD,EAAaM,GAEjBN,EAAWzgC,eAAe1D,GAAMwqB,4BAA6BjoD,KAAK2mD,iBAAkB00B,EAA4BE,EAAuBE,GACvIvZ,EAAS/gC,eAAe1D,GAAM4qB,0BAA2BroD,KAAK2mD,iBAAkB20B,EAA0BE,EAAqBE,GAC3Ht1B,EAAKgP,YAAYtxD,QAAU2H,IAC3B26C,EAAKgP,YAAY3pD,GAAK,IAAIsnB,GAC9BqzB,EAAKgP,YAAY3pD,GAAGkoB,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAM4qB,0BAA2B,EAAM/B,EAA0C,GAAnBsb,EAAW3qD,MAC7JmkE,GAAwBxZ,EAAWvgC,2BACvD,CACgB+kB,EAAKiP,gBAAkBsmB,EAAmB75C,iBAC1D,CACA,MAvCYskB,EAAKiP,gBAAkB,EAwC3B,GAAuB,GAAnBlzC,EAAWlL,KAAW,CACtB,MAAM2kE,EAA0Bx1B,EAAKoQ,iBAC/B3D,EAAwB1wC,EAAWimB,mBAAmBge,EAAKiN,cACjE+nB,GAAwBvvB,GAAiBkF,wCAAwC8B,GACjF+oB,EAAwBhpB,wBAAwBzwC,EAAY0wC,EAAuBC,EAAcC,EAAeC,GAChH,MAAM/F,EAA6B2uB,EAAwB3uB,2BACrDC,EAA2B0uB,EAAwB1uB,yBACnDvvB,EAAQ39B,KAAKutE,wBACnB5vC,EAAM1mB,KAAO,EACb0mB,EAAM0C,KAAOF,GAAmBe,qCAAqC,IACrEvD,EAAMyC,KAAOD,GAAmBS,6BAA6B,KAC7DjD,EAAMwD,eAAe1D,GAAMwqB,4BAA6BjoD,KAAK2mD,iBAAkBsG,GAA8B,EAAMA,GAA6B,GAChJtvB,EAAMwD,eAAe1D,GAAM4qB,0BAA2BroD,KAAK2mD,iBAAkBuG,GAA4B,EAAMA,GAA2B,GACtI9G,EAAKgP,YAAYtxD,QAAUsiD,EAAKiP,kBAChCjP,EAAKgP,YAAYhP,EAAKiP,iBAAmB,IAAItiC,GACjDqzB,EAAKgP,YAAYhP,EAAKiP,iBAAiB1hC,6BAA6B8J,GAAMwqB,4BAA6BxqB,GAAM4qB,0BAA2B,EAAM/B,GAAuB,GACrKF,EAAKiP,iBACjB,CAEQ,GADA+lB,EAAuB1vE,KAAKQ,IAAI,EAAKkvE,GACd,GAAnBj5D,EAAWlL,MAAgC,IAAnBkL,EAAWlL,KAAY,CAC/C,IAAI4kE,EAAsB,EACtBC,EAAyB,EACzBC,EAAmB,EACvB,MAAMpiE,EAAcoM,EAAMpM,YACpBqiE,EAAuB,cAAdj2D,EAAM7gB,KACrB,GAAIkhD,EAAKx2C,WAAa,GAAK+J,EAAa,CACpC,MAAM7J,EAAWpE,KAAK4F,MAAM60C,EAAgBiM,QAAU1vD,EAAOmR,kBAC7DkoE,EAAmB31B,EAAKptB,QAAQrpB,EAAsBy2C,EAAKx2C,WAAYuS,EAAW6F,eAAgBlY,IAAas2C,EAAKptB,QAAQ,EAC5I,CACY,MAAM9e,EAAmC,IAAnBiI,EAAWlL,KAAakL,EAAWkJ,gBAAgBnR,aAAexX,EAAOuX,WAAWkI,EAAWwE,WAAWzM,aAChI,IAAK,IAAIzO,EAAI,EAAGA,GAAwB,IAAnB0W,EAAWlL,KAAa,EAAIvU,EAAOqX,eAAgBtO,IAAK,CACzE,MAAMwwE,EAA6C,IAAnB95D,EAAWlL,KAAakL,EAAWkJ,gBAAgBlR,kBAAkB1O,GAAK,EAAI/I,EAAOuX,WAAWkI,EAAWwE,WAAWxM,kBAAkB1O,GAAK,EACvKqtB,EAAQstB,EAAKptB,QAAQrf,EAAc,EAAIqiE,EAAS75D,EAAW8K,cAAkBxhB,EAAI26C,EAAKx2C,WAAcnE,EAAMwwE,EAAyB71B,EAAKx2C,WAAcqsE,EAAyB,GAC/K76C,EAAW1+B,EAAO8X,oBAAoB2H,EAAW2E,UAAUrb,GAAGsb,WAAWtM,KACzEmO,EAAWlmB,EAAO4X,wBAAwB2hE,GAA0BF,EACpEG,EAAa9pE,GAAa0mB,EAAQ6/C,GAAiBL,EAAgB1vD,EACnEuzD,EAAW/pE,GAAa0mB,EAAQ8/C,GAAeN,EAAgB1vD,EAC/DwzD,EAAgBt3C,GAAWkK,mBAAmBktC,GAC9CG,EAAcv3C,GAAWkK,mBAAmBmtC,GAC5CzhE,EAAWhY,EAAO8X,oBAAoB2H,EAAW2E,UAAUrb,GAAGsb,WAAWrM,SACzE4hE,EAAkBl7C,EAAWg7C,EAAgB1hE,EAC7C6hE,EAAgBn7C,EAAWi7C,EAAc3hE,EACzC8hE,EAAoB1uB,EAAe,EAAIriD,GACvCgxE,EAAkB1uB,EAAa,EAAItiD,GACzC,IAAI21D,EACAC,EACqB,GAArBmb,GAA+C,GAAnBC,GAC5Brb,EAAY11D,KAAKuC,IAAI,EAAKvC,KAAK6D,KAAK+sE,EAAkBF,GAAiBI,GAAqBJ,EAC5F/a,EAAU31D,KAAKuC,IAAI,EAAKvC,KAAK6D,KAAKgtE,EAAgBF,GAAeI,GAAmBJ,IAGpFjb,EAAYkb,EACZjb,EAAUkb,GAEdn2B,EAAKS,YAAYp7C,GAAK21D,EAAYoX,EAClCpyB,EAAKW,iBAAiBt7C,GAAKC,KAAKuC,IAAIozD,EAAUD,EAAW,EAAM9a,GAC/D,IAAIo2B,EAAiBv6D,EAAW2E,UAAUrb,GAAG+D,UACzCmtE,EAAex6D,EAAW2E,UAAUrb,GAAG+D,UACvC/D,EAAI,EACAzL,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAQiG,EAAGmoC,EAAcwS,EAAKvT,mBAC3F6pC,GAAkB18E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAQiG,EAAGmoC,EAAcwS,EAAKvT,iBAAiB,GAAS,GACvI8pC,GAAgB38E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAQiG,EAAGmoC,EAAcwS,EAAKvT,iBAAiB,GAAQ,IAIpI7yC,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAQiG,EAAI,EAAGmoC,EAAcwS,EAAKvT,mBAC/F6pC,GAAkB18E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAQiG,EAAI,EAAGmoC,EAAcwS,EAAKvT,iBAAiB,GAAS,GAC3I8pC,GAAgB38E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAQiG,EAAI,EAAGmoC,EAAcwS,EAAKvT,iBAAiB,GAAQ,IAGhJ,MAAM+pC,EAAsBn/C,GAAMwsC,uBAAuByS,GACnDG,EAAoBp/C,GAAMwsC,uBAAuB0S,GAGvD,IAAIG,EAFuBF,EAAsBl6E,EAAO8X,oBAAoB2H,EAAW2E,UAAUrb,GAAGsb,WAAWpM,cAG3GoiE,EAFqBF,EAAoBn6E,EAAO8X,oBAAoB2H,EAAW2E,UAAUrb,GAAGsb,WAAWpM,cAG3G,GAAIlP,EAAIyO,EAAc,CAClB,IAAI8iE,EAEAA,EADgC,MAAhC52B,EAAKmO,qBAAqB9oD,GACH26C,EAAKmO,qBAAqB9oD,GAG1BC,KAAKuC,IAAI,IAAOiuE,EAAajD,GAA4BE,GAEpF,MAAM8D,EAAqBvxE,KAAKuC,IAAI,IAAOkuE,EAAWlD,GAA4BE,GAClF/yB,EAAKmO,qBAAqB9oD,GAAKwxE,EAC/BH,GAAmBE,EACnBD,GAAiBE,EACjBnB,GAA0Be,CAC9C,MAEoBC,GAA2C,IAAxBp6E,EAAO8I,eAC1BuxE,GAAyC,IAAxBr6E,EAAO8I,eACxBqwE,GAAuB,EAAMnwE,KAAKQ,IAAI,EAAKiW,EAAW2E,UAAUrb,GAAG+D,UAAY,IAInF,GAFAstE,GAAmBhvB,EAAe,GAAKriD,GACvCsxE,GAAiBhvB,EAAa,GAAKtiD,GAC/BzL,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAkB,CACzG,MAAM4vB,EAAWziE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GACnH6vB,EAAS1iE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GACvHiqC,GAAqBra,GAAY,GAAOA,EAAW//D,EAAOqV,YAAc,IAAMrV,EAAOqV,YAAc,GAAM0lB,GAAM8kC,6BAA6BE,GAC5Isa,GAAmBra,GAAU,GAAOA,EAAShgE,EAAOqV,YAAc,IAAMrV,EAAOqV,YAAc,GAAM0lB,GAAM8kC,6BAA6BG,EAC1J,CACgBtc,EAAKiO,oBAAoB5oD,GAAKqxE,EAC9B12B,EAAKkO,yBAAyB7oD,IAAMsxE,EAAgBD,GAAmBx2B,CACvF,CACYu1B,IAAwBnwE,KAAKuC,IAAI,EAAM,EAAM,IAAMkU,EAAW0E,kBAAoB,IAAS,GAAO,EAClGg1D,GAAuB,EAAMnwE,KAAKQ,IAAI,EAAKR,KAAKO,IAAI,EAAK6vE,EAAyB,GAAK,GACvFD,EAAsB,EAA4B,EAAtBA,EAC5B,IAAIiB,EAAkB5D,EAAiB2C,EAAsBT,EAAuBvC,EAAsBE,EAAuBjrB,EAAe,GAC5IivB,EAAgB7D,EAAiB2C,EAAsBT,EAAuBtC,EAAoBE,EAAqBjrB,EAAa,GACpIiuB,GAAU51B,EAAKx2C,YAAcuS,EAAW8K,gBACxC6vD,EAAkB,EAClBC,EAAgB,GAEpB32B,EAAKjhD,WAAa23E,EAClB12B,EAAKgO,iBAAmB2oB,EAAgBD,GAAmBx2B,EAC3D,IAAI42B,EAA4B/6D,EAAW0E,kBACvCs2D,EAA0Bh7D,EAAW0E,kBACrC7mB,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,mBACvFqqC,GAA6Bl9E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAS,GAC9IsqC,GAA2Bn9E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAQ,IAE/I,IAAIuqC,EAAiD,GAAxB16E,EAAO8I,eAAuB0xE,EAA4B,GACvF,MAAMG,EAA+C,GAAxB36E,EAAO8I,eAAuB2xE,EAA0B,GACrF,IAAIG,EAAgBF,EAAyBtvB,EAAe,IACxDyvB,EAAcF,EAAuBtvB,EAAa,IACtD3H,EAAKsP,aAAe4nB,EACpBl3B,EAAKuP,eAAiB4nB,EAAcD,GAAiBh3B,CACjE,KACa,CACD,MAAMk3B,EAAe9xE,KAAKuC,IAAI,GAAM2qE,EAAcD,GAAiBL,EAAgB,IAC7EmF,EAAsB/xE,KAAKuC,IAAIuvE,EAAc,EAAMl3B,GACnD01B,EAAuB,cAAdj2D,EAAM7gB,KACrB,IAAI4zB,EAAQstB,EAAKptB,QAAQ,GACzB,GAAIotB,EAAKx2C,WAAa,IAAMmW,EAAMpM,aAAeoM,EAAMrM,gBAAkBsiE,GAAS,CAC9E,MAAMlsE,EAAWpE,KAAK4F,MAAM60C,EAAgBiM,QAAU1vD,EAAOmR,kBAC7D,GAAIkS,EAAMrM,eAAgB,CACtB,MAAMgkE,EAAiBt3B,EAAKptB,QAAQ,EAAIrpB,EAAsBy2C,EAAKx2C,WAAa,EAAGuS,EAAW6F,eAAgBlY,IAAas2C,EAAKptB,QAAQ,GACxIy/C,EAAsB/sE,KAAKuC,IAAI,EAAKyvE,EAAiB,IACrDt3B,EAAKoP,8BAAgC9pD,KAAKuC,IAAI,GAAMyvE,EAAiBvE,EACzF,MAEoBrgD,EADK/S,EAAMpM,YACHysC,EAAKptB,QAAQrpB,EAAsBy2C,EAAKx2C,WAAYuS,EAAW6F,eAAgBlY,IAG/Es2C,EAAKptB,QAAQ7W,EAAW8K,cAEpD,CACY,MAAMqpB,EAAalkC,GAAa0mB,EAAQ6/C,GAAiBL,EACnDqF,EAAWvrE,GAAa0mB,EAAQ8/C,GAAeN,EACrD,IAAI0E,EAEAA,EADgC,MAAhC52B,EAAKmO,qBAAqB,GACHnO,EAAKmO,qBAAqB,GAG1B7oD,KAAKuC,IAAI,IAAOqoC,EAAa2iC,GAA4BE,GAEpF,MAAM8D,EAAqBvxE,KAAKuC,IAAI,IAAO0vE,EAAW1E,GAA4BE,GAClF/yB,EAAKmO,qBAAqB,GAAK0oB,EAC/B,IAAIW,EAAyB1E,EAAiBkC,EAO9C,GANuB,GAAnBj5D,EAAWlL,OACX2mE,GAA0Bl7E,EAAO+K,WAAW0U,EAAW4iB,WAAW5/B,YAE/C,GAAnBgd,EAAWlL,OACX2mE,GAA0Bl7E,EAAOC,UAAUwf,EAAW1f,UAAU0C,YAE7C,GAAnBgd,EAAWlL,KAAW,CACtB,MAAM4mE,EAAiB1wE,EAAmBgV,EAAW/U,YACrD,IAAI0wE,EAAqBD,EACrBE,EAAmBF,EACnB79E,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,mBACvFirC,EAAsB99E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,IAAoC,EAAzBnwC,EAAO2K,iBAChJ0wE,EAAoB/9E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,IAAmC,EAAzBnwC,EAAO2K,kBAEjJ,MAAM2wE,EAAkBF,EAAqBhwB,EAAe,GACtDmwB,EAAgBF,EAAmBhwB,EAAa,GACtD3H,EAAKh5C,WAAa4wE,EAClB53B,EAAKsO,iBAAmBupB,EAAgBD,GAAmB13B,EAC3D,IAAI43B,EAAwB/7D,EAAWiJ,cACnCprB,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,mBAC1FqrC,EAAwBl+E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,IAEvI,MAAMsrC,EAAqBD,EAAwBpwB,EAAe,IAClE1H,EAAKh7B,cAAgB+yD,EACrB/3B,EAAKh5C,YAAeg5C,EAAkB,cAAI,GAC1D,CACY,GAAuB,GAAnBjkC,EAAWlL,KAAW,CACtB,IAAImnE,EAAkBj8D,EAAWyF,cAC7By2D,EAAgBl8D,EAAWyF,cAC3B5nB,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAoB,QAAEF,MAAOouC,EAAcwS,EAAKvT,mBACnFurC,EAAkBp+E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAoB,QAAEF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GACtHwrC,EAAgBr+E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAoB,QAAEF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,IAExHuT,EAAKwN,mBAAqBwqB,EAC1Bh4B,EAAKyN,iBAAmBwqB,EACxBT,GAA0BlyE,KAAKuC,IAAI,EAAK,IAAO,EAAMmwE,GAAmB17E,EAAOsc,mBAAqB,IACpH,CACY,MAAMs/D,EAAYx5C,GAAWkK,mBAAmBsH,GAChD,GAAuB,GAAnBn0B,EAAWlL,MAAgC,GAAnBkL,EAAWlL,MAAgC,GAAnBkL,EAAWlL,MAAgC,GAAnBkL,EAAWlL,MAAgC,GAAnBkL,EAAWlL,MAAgC,GAAnBkL,EAAWlL,MAAgC,GAAnBkL,EAAWlL,MAAgC,GAAnBkL,EAAWlL,KAAW,CAC9L,MAAM8T,EAAe5I,EAAW4I,aAC1BC,EAAe7I,EAAW6I,aAC1BC,EAAe9I,EAAW8I,aAGhC2yD,GAFyBz7D,EAAW+I,kBACa,GAAnB/I,EAAWlL,KAAa,EAAI8T,EAAe,GAEzE,MAAMwzD,EAAsBzwB,EAAe,GACrC0wB,EAAoBzwB,EAAa,GACjC0wB,EAAe/yE,KAAKuC,IAAI,GAAMgd,EAAeD,GAAgBuzD,EAAsB,IACnFG,EAAahzE,KAAKuC,IAAI,GAAMgd,EAAeD,GAAgBwzD,EAAoB,IACrFp4B,EAAKS,YAAY,GAAKy3B,EAAY9F,EAAaiG,EAC/Cr4B,EAAKW,iBAAiB,GAAK02B,EAAsB/xE,KAAKuC,IAAIywE,EAAaD,EAAc,EAAMn4B,GAC3F,MAAMq4B,EAA2B,GAAhB5zD,EAAqB,EAAKA,EAAe,EAC1D,IAAK,IAAItf,EAAI,EAAGA,GAAKsf,EAActf,IAAK,CACpC,MAAMmzE,EAAclzE,KAAKuC,IAAI,GAAMgd,EAAeD,EAAgB,EAAIvf,EAAIuf,EAAe2zD,GAAYJ,EAAsB,IAAK,EAC1HM,EAAYnzE,KAAKuC,IAAI,GAAMgd,EAAeD,EAAgB,EAAIvf,EAAIuf,EAAe2zD,GAAYH,EAAoB,IAAK,EAC5Hp4B,EAAKS,YAAYp7C,GAAK6yE,EAAY9F,EAAaoG,EAC/Cx4B,EAAKW,iBAAiBt7C,GAAKgyE,EAAsB/xE,KAAKuC,IAAI4wE,EAAYD,EAAa,EAAMt4B,EAC7G,CACgB,IAAK,IAAI76C,EAAIsf,EAAe,EAAGtf,EAAI/I,EAAOgb,gBAAiBjS,IACvD,GAAS,GAALA,EAAQ,CACR,MAAMqzE,EAAepzE,KAAKuC,IAAI,GAAMgd,EAAeD,GAAgBuzD,EAAsB,IAAQ9F,EAC3FsG,EAAarzE,KAAKuC,IAAI,GAAMgd,EAAeD,GAAgBwzD,EAAoB,IAAQ/F,EAC7FryB,EAAKS,YAAYp7C,GAAK6yE,EAAY9F,EAAasG,EAC/C14B,EAAKW,iBAAiBt7C,GAAKgyE,EAAsB/xE,KAAKuC,IAAI8wE,EAAaD,EAAc,EAAMx4B,EACnH,MAEwBF,EAAKS,YAAYp7C,GAAK26C,EAAKS,YAAY,GACvCT,EAAKW,iBAAiBt7C,GAAK26C,EAAKW,iBAAiB,EAGzE,MAEgBX,EAAKS,YAAY,GAAKy3B,EAAY9F,EAClCpyB,EAAKW,iBAAiB,GAAK02B,EAE/B,IAAIuB,EAA0B,EAC1BC,EAAwB,EAC5B,GAAuB,GAAnB98D,EAAWlL,KAAW,CACtB,MAAMioE,EAAyB,EAAMxzE,KAAKqC,KAAKrL,EAAOqZ,oBACtD,IAAIojE,EAAmBh9D,EAAWyjB,iBAAmBljC,EAAOsZ,oBACxDojE,EAAiBj9D,EAAWyjB,iBAAmBljC,EAAOsZ,oBACtDhc,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAqB,SAAEF,MAAOouC,EAAcwS,EAAKvT,mBACpFssC,EAAoBn/E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAqB,SAAEF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAUnwC,EAAOsZ,oBAC1IojE,EAAkBp/E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAqB,SAAEF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAASnwC,EAAOsZ,qBAE3I,MAAMqjE,EAAsB,EAAM3zE,KAAKuC,IAAIvC,KAAKO,IAAI,EAAK,EAAMkzE,EAAmBrxB,EAAe,KAAM,IACjGwxB,EAAoB,EAAM5zE,KAAKuC,IAAIvC,KAAKO,IAAI,EAAK,EAAMmzE,EAAiBrxB,EAAa,KAAM,IAC3FwxB,EAA2B7zE,KAAKuC,IAAI,EAAKvC,KAAK6D,KAAK2vE,GAA0BG,GAC7EG,EAAyB9zE,KAAKuC,IAAI,EAAKvC,KAAK6D,KAAK2vE,GAA0BI,GAC3EG,EAAgB/zE,KAAKqC,MAAM,EAAMrC,KAAKuC,IAAIsxE,EAA0B,GAAO,IAAQ78E,EAAOqZ,mBAAqB,IAC/G2jE,EAAch0E,KAAKqC,MAAM,EAAMrC,KAAKuC,IAAIuxE,EAAwB,GAAO,IAAQ98E,EAAOqZ,mBAAqB,IACjHqqC,EAAKxgB,iBAAmB65C,EACxBr5B,EAAKuO,uBAAyB+qB,EAAcD,GAAiBn5B,EAC7D,MAAMq5B,GAAkD,GAA5Bv5B,EAAK6O,mBACjC,GAAI0qB,EAAoB,CACpB,IAAIC,EAAc,EAClB,IAAK,IAAIn0E,EAAI,EAAGA,EAAI/I,EAAOqZ,mBAAoBtQ,IAC3C26C,EAAK2N,OAAOtoD,GAAKm0E,EACjBA,IAAgBl0E,KAAKN,IAAIM,KAAKmC,UAElC,MACMsjB,EADe,GAAOzuB,EAAOqZ,mBAAqB,GAAO0jE,EAE/D,IAAI/zB,EAAS,EACb,IAAK,IAAIjgD,EAAI,EAAGA,EAAI/I,EAAOqZ,mBAAoBtQ,IAAK,CAChD,MAAM+D,EAAkB,GAAL/D,EAAU,EAAMg0E,EAC7BI,EAAkBz5B,EAAK2N,OAAOtoD,GAAKm0E,EACzCx5B,EAAK2N,OAAOtoD,GAAKo0E,EACjBn0B,IAAWm0B,EAAkB,IAAOrwE,CAC5D,CACoB,IAAIswE,EAAoB,EACpBC,EAAW,EACf,IAAK,IAAIt0E,EAAI/I,EAAOqZ,mBAAqB,EAAGtQ,GAAK,EAAGA,IAAK,CACrD,MAAMu0E,EAAW,EAAM55B,EAAK2N,OAAOtoD,GAC7Bw0E,EAAaD,EAAWD,EAC9B,GAAIr0B,EAAS,EAAK,CACd,MAAMw0B,GAA0Bx0B,EAASv6B,EACzC,GAAI+uD,EAAyBD,EAAY,CACrCH,EAAoBC,EAAWG,EAC/B,KAChC,CACA,CAEwBx0B,GAAUu0B,EAAa9uD,GADC,GAAL1lB,EAAU,EAAMg0E,GAEnCM,EAAWC,CACnC,CACoB,IAAK,IAAIv0E,EAAI,EAAGA,EAAI/I,EAAOqZ,mBAAoBtQ,IAC3C26C,EAAK2N,OAAOtoD,IAAMq0E,EAEtB,IAAK,IAAIr0E,EAAI,EAAGA,EAAI/I,EAAOqZ,mBAAqB,EAAGtQ,IAAK,CACpD,MAAM00E,EAAe10E,EAAIC,KAAK4F,MAAM5F,KAAKmC,UAAYnL,EAAOqZ,mBAAqBtQ,IAC3EwZ,EAAOmhC,EAAK2N,OAAOtoD,GACzB26C,EAAK2N,OAAOtoD,GAAK26C,EAAK2N,OAAOosB,GAC7B/5B,EAAK2N,OAAOosB,GAAgBl7D,CACpD,CACA,CACgB,MAAMm7D,EAAmBj+D,EAAW0jB,eAAiBnjC,EAAOuZ,kBAC5D,IAAIokE,EAAiBD,EACjBE,EAAeF,EACfpgF,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcwS,EAAKvT,mBAClFwtC,EAAkBrgF,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAUnwC,EAAOuZ,kBACtIqkE,EAAgBtgF,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAmB,OAAEF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAASnwC,EAAOuZ,mBAEvI,MAEMskE,EAA8D,IAF1CF,EAAiBvyB,EAAe,IAClCwyB,EAAevyB,EAAa,KAE9CyyB,EAAe90E,KAAKuC,IAAI,EAAMvC,KAAKqC,KAAKrC,KAAKO,IAAI,EAAK,EAAMs0E,IAAuB,MACzF,IAAK,IAAI90E,EAAI,EAAGA,EAAI/I,EAAOqZ,mBAAoBtQ,IAAK,CAChD,MAAMiM,EAAe,GAALjM,EAAU,EAAMC,KAAKuC,MAAOxC,EAAI,GAAM,GAAK,GAAM,OAAc,EAAJA,GAAS,KAAO/I,EAAOqZ,oBAAsB,GAAI,MAAkB,GAAL,EAAJtQ,GAAa,GAClJ26C,EAAKwO,sBAAsBnpD,GAAKC,KAAKuC,IAAI,EAAKuyE,EAAe9oE,EAAS,GAC1F,CACgB,MAAM+oE,EAAYt+D,EAAW2jB,cAAgBpjC,EAAOwZ,iBACpD,IAAIwkE,EAAgBD,EAAY3yB,EAAe,IAC3C6yB,EAAcF,EAAY1yB,EAAa,IACvC/tD,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcwS,EAAKvT,mBACrF6tC,EAAiB1gF,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAAUnwC,EAAOwZ,iBACxIykE,EAAe3gF,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,aAAaF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GAASnwC,EAAOwZ,kBAEzI,MAAM0kE,EAAaF,EAAgB5yB,EAAe,IAC5C+yB,EAAWF,EAAc5yB,EAAa,IAC5C3H,EAAKtgB,cAAgB86C,EACrBx6B,EAAKyO,oBAAsBgsB,EAAWD,GAAct6B,EACpD,IAAI43B,EAAwB/7D,EAAWiJ,cACnCprB,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,mBAC1FqrC,EAAwBl+E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,kBAAkBF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,IAEvI,MAAMsrC,EAAqBD,EAAwBpwB,EAAe,IAClE1H,EAAKh7B,cAAgB+yD,EACrB,MAAMN,EAAiB1wE,EAAmBgV,EAAW/U,YACrD,IAAI0wE,EAAqBD,EACrBE,EAAmBF,EACnB79E,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,mBACvFirC,EAAsB99E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,IAAoC,EAAzBnwC,EAAO2K,iBAChJ0wE,EAAoB/9E,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,IAAmC,EAAzBnwC,EAAO2K,kBAEjJ,IAAI2wE,EAAkBF,EAAqBhwB,EAAe,GACtDmwB,EAAgBF,EAAmBhwB,EAAa,GACpDiwB,GAAmBG,EAAqB,IACxCF,GAAiBE,EAAqB,IACtC,MAAMv3B,EAAkD,MAA/BR,EAAK8O,uBAAkC9O,EAAK8O,uBAAyBopB,EAAY9F,EACpGxxB,EAAgBs3B,EAAY9F,EAAagF,EAC/Cp3B,EAAK8O,uBAAyBlO,EAC9B,MAAM85B,EAAmB9C,EAAkBp3B,EACrCsD,EAAiB+zB,EAAgBj3B,EACvCZ,EAAK0O,oBAAsBgsB,EAC3B16B,EAAK2O,0BAA4B7K,EAAiB42B,GAAoBx6B,EACtE,MAAM0D,EAAkBt+C,KAAKoV,KAAKpV,KAAKO,IAAI60E,EAAkB52B,IAAmB,EAChF,GAA8B,MAA1B9D,EAAK4O,mBAA6B5O,EAAK4O,kBAAkBlxD,QAAUkmD,EAAiB,CACpF,MAAMM,EAAsB5+C,KAAKoV,KAAK,GAAM9gB,KAAK2mD,iBAAmB7hB,GAAWkK,mBAAmB,KAC5Fub,EAAe,IAAIh/C,aAAakyB,GAAMC,kBAAkBhyB,KAAKO,IAAIq+C,EAAqBN,KAC5F,IAAK21B,GAAgD,MAA1Bv5B,EAAK4O,kBAA2B,CACvD,MAAMxK,EAAsBpE,EAAK4O,kBAAkBlxD,OAAS,GAAM,EAC5D2mD,EAAwBrE,EAAK6O,mBACnC,IAAK,IAAIxpD,EAAI,EAAGA,EAAI26C,EAAK4O,kBAAkBlxD,OAAQ2H,IAC/C8+C,EAAa9+C,GAAK26C,EAAK4O,kBAAmBvK,EAAwBh/C,EAAK++C,EAEnG,CACoBpE,EAAK4O,kBAAoBzK,EACzBnE,EAAK6O,mBAAqB7O,EAAK4O,kBAAkBlxD,MACrE,MACyB67E,IACLv5B,EAAK4O,kBAAkB7B,KAAK,GAC5B/M,EAAK6O,mBAAqB7O,EAAK4O,kBAAkBlxD,QAErD,MAAMi9E,EAAuBr+E,EAAO+R,kBAAoB/R,EAAOgS,uBAC/DsqE,IAA4B,GAAO+B,EAAuB,GAAOH,GAAcl1E,KAAKqC,KAAK,GAAOrL,EAAOqZ,mBAAqB,GAAO0jE,EAAgBA,GACnJR,IAA0B,GAAO8B,EAAuB,GAAOF,GAAYn1E,KAAKqC,KAAK,GAAOrL,EAAOqZ,mBAAqB,GAAO2jE,EAAcA,EAC7J,CACY,IAAI5C,EAAkBc,EAAyB/E,EAAsBE,EAAuBiE,EAAuBlvB,EAAe,GAAKkxB,EACnIjC,EAAgBa,EAAyB9E,EAAoBE,EAAqBiE,EAAqBlvB,EAAa,GAAKkxB,EAC7H,GAAIj/E,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAkB,CACzG,MAAM4vB,EAAWziE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GACnH6vB,EAAS1iE,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAW,eAAeF,MAAOouC,EAAcwS,EAAKvT,iBAAiB,GACvHiqC,GAAqBra,GAAY,GAAOA,EAAW//D,EAAOqV,YAAc,IAAMrV,EAAOqV,YAAc,GAAM0lB,GAAM8kC,6BAA6BE,GAC5Isa,GAAmBra,GAAU,GAAOA,EAAShgE,EAAOqV,YAAc,IAAMrV,EAAOqV,YAAc,GAAM0lB,GAAM8kC,6BAA6BG,EACtJ,CAQY,GAPIsZ,GAAU51B,EAAKx2C,YAAcuS,EAAW8K,gBACxC6vD,EAAkB,EAClBC,EAAgB,EAChB52B,EAAgBwQ,OAAQ,GAE5BvQ,EAAKjhD,WAAa23E,EAClB12B,EAAKgO,iBAAmB2oB,EAAgBD,GAAmBx2B,EACpC,GAAnBnkC,EAAWlL,KAAW,CACtB,IAAIsvC,EACJ,GAA4B,MAAxBH,EAAKqO,gBACLlO,EAAmBH,EAAKqO,oBAEvB,CACD,MAAMusB,EAAuB56B,EAAKoQ,iBAAiB1I,eAAe,GAClEvH,EAAmB,EAAM76C,KAAKQ,IAAI,EAAK80E,EAAuB56B,EAAKwN,oBAAsBlxD,EAAOsc,mBAAqB,GACzI,CACgB,MAAMiiE,EAAqB76B,EAAKoQ,iBAAiBzI,aAAa,GAC9D,IAAIvH,EAAiB,EAAM96C,KAAKQ,IAAI,EAAK+0E,EAAqB76B,EAAKyN,kBAAoBnxD,EAAOsc,mBAAqB,IACnHonC,EAAKqO,gBAAkBjO,EACvB,MAAMz7B,EAAe5I,EAAW4I,aAChC,IAAK,IAAItf,EAAI26C,EAAK+O,cAAcrxD,OAAQ2H,EAAIsf,EAActf,IACtD26C,EAAK+O,cAAc1pD,GAAK,IAAIi5C,GAEhC,GAAI0B,EAAKsI,cAAgB7oC,EAAWjP,YAAcwvC,EAAKuI,qBACnD,IAAK,MAAM8H,KAAgBrQ,EAAK+O,cAC5BsB,EAAajR,YAAc,EAGnC,IAAK,IAAI/5C,EAAI,EAAGA,EAAIsf,EAActf,IAC9B26C,EAAK+O,cAAc1pD,GAAGy6C,OAAOlmD,KAAMmmD,EAAiBC,EAAM36C,EAAG66C,EAAuBC,EAAkBC,EAAgBrkC,EAAW0F,kBAErJ,CACA,CACA,CACI,sBAAOizD,CAAgB34D,EAAY++D,GAC/B,IAAInhE,EAAS,EACb,IAAK,MAAMohE,KAAwBz+E,EAAOyU,aAAagL,EAAWgH,aAAa/R,eAC3E2I,GAAUrU,KAAKC,IAAc,EAAVD,KAAKE,GAAWs1E,EAAiBC,GAExD,OAAOphE,CACf,CACI,iCAAO8+C,CAA2B18C,GAC9B,GAAuB,GAAnBA,EAAWlL,KAAW,CACtB,MAAMmqE,EAAcj/D,EAAWwE,UAAY,IAAMxE,EAAWyE,aAC5D,GAA+C8G,MAA3C+P,GAAM4jD,qBAAqBD,GAA2B,CACtD,MAAME,EAAc,GACpB,IAAK,MAAMC,KAAQ9jD,GAAM+jD,iBACrB,IAA2C,GAAvCD,EAAKhyD,QAAQ,sBAA6B,CAC1C,MAAMkyD,EAAU,GAChB,IAAK,IAAIz8D,EAAI,EAAGA,EAAItiB,EAAOuX,WAAWkI,EAAWwE,WAAWzM,aAAc8K,IACtEy8D,EAAQ50E,KAAK,WAAamY,EAAI,UAElCs8D,EAAYz0E,KAAK00E,EAAKjgC,QAAQ,sBAAuBmgC,EAAQjqC,KAAK,QAC1F,MACyB,IAA4D,GAAxD+pC,EAAKhyD,QAAQ,uCAClB,IAAK,IAAIvK,EAAItiB,EAAOqX,cAAgB,EAAGiL,GAAK,EAAGA,IAC3C,IAAK,MAAM08D,KAAgBjkD,GAAMkkD,uBAC7B,IAAuD,GAAnDD,EAAanyD,QAAQ,0BAAiC,CACtD,IAAInP,EAAa,GACjB,IAAK,MAAMwhE,KAAmBl/E,EAAOuX,WAAWkI,EAAWwE,WAAWvM,YAAY4K,GAC9E5E,GAAc,eAAiBwhE,EAAkB,GAAK,SAE1D,MAAMC,EAAkBn/E,EAAOqY,UAAUoH,EAAWyE,cAAc5L,QAAQgK,GAC1E,GAAI68D,EAAgB/9E,OAAS,EAAG,CAC5Bsc,GAAc,sBACd,MAAMrF,EAAY,GAClB,IAAK,MAAM6mE,KAAmBC,EAC1B9mE,EAAUlO,KAAK,YAAc+0E,EAAkB,GAAK,UAExDxhE,GAAcrF,EAAUy8B,KAAK,OAAS,GAC9E,CACoC8pC,EAAYz0E,KAAK60E,EAAapgC,QAAQ,MAAOt8B,EAAI,IAAIs8B,QAAQ,yBAA0BlhC,GAC3H,MAEoCkhE,EAAYz0E,KAAK60E,EAAapgC,QAAQ,MAAOt8B,EAAI,UAK5D,IAA0B,GAAtBu8D,EAAKhyD,QAAQ,KAClB,IAAK,IAAIvK,EAAI,EAAGA,EAAItiB,EAAOqX,cAAeiL,IACtCs8D,EAAYz0E,KAAK00E,EAAKjgC,QAAQ,MAAOt8B,EAAI,UAI7Cs8D,EAAYz0E,KAAK00E,GAGzB,MAAMO,EAAiB,4EAA8ER,EAAY9pC,KAAK,MAAQ,IAC9H/Z,GAAM4jD,qBAAqBD,GAAe,IAAIW,SAAS,SAAU,QAASD,EAAhC,CAAgDp/E,EAAQ+6B,GAClH,CACY,OAAOA,GAAM4jD,qBAAqBD,EAC9C,CACa,GAAuB,GAAnBj/D,EAAWlL,KAChB,OAAIkL,EAAWqI,4BACJiT,GAAMukD,kBAEVvkD,GAAMwkD,UAEZ,GAAuB,GAAnB9/D,EAAWlL,KAChB,OAAOwmB,GAAMwkD,UAEZ,GAAuB,GAAnB9/D,EAAWlL,KAChB,OAAOwmB,GAAMykD,eAEZ,GAAuB,GAAnB//D,EAAWlL,KAChB,OAAOwmB,GAAM0kD,gBAEZ,GAAuB,GAAnBhgE,EAAWlL,KAChB,OAAOwmB,GAAM2kD,cAEZ,GAAuB,GAAnBjgE,EAAWlL,KAChB,OAAOwmB,GAAM4kD,kBAEZ,GAAuB,GAAnBlgE,EAAWlL,KAChB,OAAOwmB,GAAM6kD,WAEZ,GAAuB,GAAnBngE,EAAWlL,KAChB,OAAOwmB,GAAM8kD,cAEZ,GAAuB,GAAnBpgE,EAAWlL,KAChB,OAAOwmB,GAAM+kD,aAEZ,GAAuB,IAAnBrgE,EAAWlL,KAChB,OAAOwmB,GAAM06C,SAEZ,GAAuB,IAAnBh2D,EAAWlL,KAAY,CAC5B,MAAMmqE,EAAcj/D,EAAWkJ,gBAAgBnmB,KAAO,IAAMid,EAAWokB,mBAAmBrhC,KAC1F,GAAgDwoB,MAA5C+P,GAAMglD,sBAAsBrB,GAA2B,CACvD,MAAME,EAAc,GACpB,IAAK,MAAMC,KAAQ9jD,GAAM+jD,iBACrB,IAA2C,GAAvCD,EAAKhyD,QAAQ,sBAA6B,CAC1C,MAAMkyD,EAAU,GAChB,IAAK,IAAIz8D,EAAI,EAAGA,EAAI7C,EAAWkJ,gBAAgBnR,aAAc8K,IACzDy8D,EAAQ50E,KAAK,WAAamY,EAAI,UAElCs8D,EAAYz0E,KAAK00E,EAAKjgC,QAAQ,sBAAuBmgC,EAAQjqC,KAAK,QAC1F,MACyB,IAA4D,GAAxD+pC,EAAKhyD,QAAQ,uCAClB,IAAK,IAAIvK,EAAItiB,EAAOqX,cAAgB,EAAI,EAAGiL,GAAK,EAAGA,IAC/C,IAAK,MAAM08D,KAAgBjkD,GAAMkkD,uBAC7B,IAAuD,GAAnDD,EAAanyD,QAAQ,0BAAiC,CACtD,IAAInP,EAAa,GACjB,IAAK,MAAMwhE,KAAmBz/D,EAAWkJ,gBAAgBjR,YAAY4K,GACjE5E,GAAc,eAAiBwhE,EAAkB,GAAK,SAE1D,MAAMC,EAAkB1/D,EAAWokB,mBAAmBvrB,QAAQgK,GAC9D,GAAI68D,EAAgB/9E,OAAS,EAAG,CAC5Bsc,GAAc,sBACd,MAAMrF,EAAY,GAClB,IAAK,MAAM6mE,KAAmBC,EAC1B9mE,EAAUlO,KAAK,YAAc+0E,EAAkB,GAAK,UAExDxhE,GAAcrF,EAAUy8B,KAAK,OAAS,GAC9E,CACoC8pC,EAAYz0E,KAAK60E,EAAapgC,QAAQ,MAAOt8B,EAAI,IAAIs8B,QAAQ,yBAA0BlhC,GAC3H,MAEoCkhE,EAAYz0E,KAAK60E,EAAapgC,QAAQ,MAAOt8B,EAAI,UAK5D,IAA0B,GAAtBu8D,EAAKhyD,QAAQ,KAClB,IAAK,IAAIvK,EAAI,EAAGA,EAAItiB,EAAOqX,cAAgB,EAAGiL,IAC1Cs8D,EAAYz0E,KAAK00E,EAAKjgC,QAAQ,MAAOt8B,EAAI,UAI7Cs8D,EAAYz0E,KAAK00E,GAGzB,MAAMmB,EAAkB,4EAA8EpB,EAAY9pC,KAAK,MAAQ,IAC/H/Z,GAAMglD,sBAAsBrB,GAAe,IAAIW,SAAS,SAAU,QAASW,EAAhC,CAAiDhgF,EAAQ+6B,GACpH,CACY,OAAOA,GAAMglD,sBAAsBrB,EAC/C,CAEY,MAAM,IAAIh+E,MAAM,iCAAmC+e,EAAWlL,KAE1E,CACI,WAAO0rE,CAAKppE,EAAGqW,GACX,OAAQrW,EAAIqW,EAAIA,GAAKA,CAC7B,CACI,wBAAOoyD,CAAkBt1C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,GACtE,MAAMy8B,EAAal3E,KAAKO,IAAI,EAAGk6C,EAAgBp7B,cAC/C,IAAI83D,EAAeplD,GAAMqlD,0BAA0B38B,EAAgBp7B,cACnE,GAAoB2C,MAAhBm1D,EAA2B,CAC3B,IAAIE,EAAa,iFACjBA,GAAc,wpBAWdA,GAAc,wnBAYd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,qIAGZtpC,WAAW,IAAKhuC,EAAI,IAE1Bs3E,GAAc,kBAEd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,0NAKZtpC,WAAW,IAAKhuC,EAAI,IAE1Bs3E,GAAc,ibAOd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,sEAEJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,WACd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,uEAEJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,0GAId,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,uEAERtpC,WAAW,IAAKhuC,EAAI,IAE9Bs3E,GAAc,sNAOd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,wRAMZtpC,WAAW,IAAKhuC,EAAI,IAE1Bs3E,GAAc,8CAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,wYAMRtpC,WAAW,IAAKhuC,EAAI,IAE9Bs3E,GAAc,gZASd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,mFAGZtpC,WAAW,IAAKhuC,EAAI,IAE1Bs3E,GAAc,8IAId,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,qQAMRtpC,WAAW,IAAKhuC,EAAI,IAE9Bs3E,GAAc,oEAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,61BAmBJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,2EAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,k3BAmBJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,2EAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,wyBAeJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,+EAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,24BAiBJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,4CAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,6DAERtpC,WAAW,IAAKhuC,EAAI,IAE9Bs3E,GAAc,qIAKd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,qnBAUJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,kDAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,maAMJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,6JAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,kiBAQAtpC,WAAW,IAAKhuC,EAAI,IAEtCs3E,GAAc,wHAId,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,iFAEAtpC,WAAW,IAAKhuC,EAAI,IAEtCs3E,GAAc,uDAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,4IAEAtpC,WAAW,IAAKhuC,EAAI,IAEtCs3E,GAAc,gDAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,wkBASJtpC,WAAW,IAAKhuC,EAAI,IAElCs3E,GAAc,kcASd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,+EAERtpC,WAAW,IAAKhuC,EAAI,IAE9Bs3E,GAAc,gCAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,+YAQZtpC,WAAW,IAAKhuC,EAAI,IAE1Bs3E,GAAc,wOAMdF,EAAe,IAAId,SAAS,SAAU,QAAS,2BAA4BgB,EAA5D,CAAwErgF,EAAQ+6B,GAAO/sB,GACtG+sB,GAAMqlD,0BAA0B38B,EAAgBp7B,cAAgB83D,CAC5E,CACQA,EAAan2C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,EACtE,CACI,gBAAO87B,CAAUv1C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,GAC9D,MAAMy8B,EAAal3E,KAAKO,IAAI,EAAGk6C,EAAgBp7B,cAC/C,IAAI83D,EAAeplD,GAAMulD,kBAAkB78B,EAAgBp7B,cAC3D,GAAoB2C,MAAhBm1D,EAA2B,CAC3B,IAAIE,EAAa,iFACjBA,GAAc,ikBAYd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,4SAIhBtpC,WAAW,IAAKhuC,EAAI,IAEtB,IAAK,IAAIA,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,0GAEhBtpC,WAAW,IAAKhuC,EAAI,IAEtBs3E,GAAc,sTAQd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,kTAKZtpC,WAAW,IAAKhuC,EAAI,IAE1Bs3E,GAAc,oPAQd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,4HAGRtpC,WAAW,IAAKhuC,EAAI,IAE9B,MAAMw3E,EAAc,GACpB,IAAK,IAAIC,EAAQ,EAAGA,EAAQN,EAAYM,IACpCD,EAAYp2E,KAAK,cAAgBq2E,GAAkB,GAATA,EAAa,gBAAkB,KAE7EH,GAAc,iBAAmBE,EAAYzrC,KAAK,OAAS,IAC3DurC,GAAc,iCAEd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,unBAWJtpC,WAAW,IAAKhuC,EAAI,IAElC,MAAM03E,EAAc,GACpB,IAAK,IAAID,EAAQ,EAAGA,EAAQN,EAAYM,IACpCC,EAAYt2E,KAAK,cAAgBq2E,GAAkB,GAATA,EAAa,gBAAkB,KAE7EH,GAAc,iBAAmBI,EAAY3rC,KAAK,OAAS,IAC3DurC,GAAc,cAEdA,GAAc,gPAGd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,uEAEZtpC,WAAW,IAAKhuC,EAAI,IAE1Bs3E,GAAc,qJAKd,IAAK,IAAIt3E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bs3E,GAAc,mHAEhBtpC,WAAW,IAAKhuC,EAAI,IAEtBs3E,GAAc,gCACdA,GAAc,6KAKdF,EAAe,IAAId,SAAS,SAAU,QAAS,2BAA4BgB,EAA5D,CAAwErgF,EAAQ+6B,GAAO/sB,GACtG+sB,GAAMulD,kBAAkB78B,EAAgBp7B,cAAgB83D,CACpE,CACQA,EAAan2C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,EACtE,CACI,qBAAO+7B,CAAex1C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,GACnE,MAAMy8B,EAAal3E,KAAKO,IAAI,EAAGk6C,EAAgBp7B,cAC/C,IAAIq4D,EAAoB3lD,GAAM4lD,uBAAuBl9B,EAAgBp7B,cACrE,GAAyB2C,MAArB01D,EAAgC,CAChC,IAAIE,EAAkB,iFACtBA,GAAmB,2aASnB,IAAK,IAAI73E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B63E,GAAmB,4SAIrB7pC,WAAW,IAAKhuC,EAAI,IAEtB,IAAK,IAAIA,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B63E,GAAmB,gEACrB7pC,WAAW,IAAKhuC,EAAI,IAEtB63E,GAAmB,2RAMnB,IAAK,IAAI73E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B63E,GAAmB,8RAKrB7pC,WAAW,IAAKhuC,EAAI,IAEtB63E,GAAmB,0JAGnB,IAAK,IAAI73E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B63E,GAAmB,wnBAUT7pC,WAAW,IAAKhuC,EAAI,IAElC,MAAM83E,EAAa,GACnB,IAAK,IAAIL,EAAQ,EAAGA,EAAQN,EAAYM,IACpCK,EAAW12E,KAAK,cAAgBq2E,GAAkB,GAATA,EAAa,gBAAkB,KAE5EI,GAAmB,iBAAmBC,EAAW/rC,KAAK,OAAS,IAC/D8rC,GAAmB,oNAGnB,IAAK,IAAI73E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B63E,GAAmB,uEAEjB7pC,WAAW,IAAKhuC,EAAI,IAE1B63E,GAAmB,qJAKnB,IAAK,IAAI73E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B63E,GAAmB,mHAErB7pC,WAAW,IAAKhuC,EAAI,IAEtB63E,GAAmB,gCACnBA,GAAmB,6KAKnBF,EAAoB,IAAIrB,SAAS,SAAU,QAASuB,EAAhC,CAAiD5gF,EAAQ+6B,IAC7EA,GAAM4lD,uBAAuBl9B,EAAgBp7B,cAAgBq4D,CACzE,CACQA,EAAkB12C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,EAC3E,CACI,wBAAOk8B,CAAkB31C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,GACtE,MAAMy8B,EAAaz8B,EAAgBp7B,aACnC,IAAIy4D,EAAuB/lD,GAAMgmD,0BAA0Bb,GAC3D,GAA4Bl1D,MAAxB81D,EAAmC,CACnC,IAAIE,EAAqB,qEACzBA,GAAsB,m3IAsEtB,MAAMH,EAAa,GACnB,IAAK,IAAIL,EAAQ,EAAGA,EAAQN,EAAYM,IACpCK,EAAW12E,KAAK,wBAA0Bq2E,GAAkB,GAATA,EAAa,gBAAkB,KAEtFQ,GAAsBH,EAAW/rC,KAAK,OACtCksC,GAAsB,o0FA+CtBA,EAAqBA,EAAmBpiC,QAAQ,cAAcigC,IAC1D,MAAMoC,EAAQ,GACd,IAAK,IAAIT,EAAQ,EAAGA,EAAQN,EAAYM,IACpCS,EAAM92E,KAAK00E,EAAKjgC,QAAQ,MAAO3K,OAAOusC,KAE1C,OAAOS,EAAMnsC,KAAK,KAAK,IAE3BgsC,EAAuB,IAAIzB,SAAS,SAAU,QAAS2B,EAAhC,CAAoDhhF,EAAQ+6B,IACnFA,GAAMgmD,0BAA0Bb,GAAcY,CAC1D,CACQA,EAAqB92C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,EAC9E,CACI,mBAAOktB,CAAa3mC,EAAOsiC,EAAaC,EAAasD,EAAaG,EAAWvsB,GACzE,MAAMoZ,EAAiB7uD,EAAyBy1C,EAAgB/1C,SAC1DovD,EAAiB7uD,EAAyBw1C,EAAgB/1C,SAC1DwzE,EAAez9B,EAAgBgU,cAAgB,EAC/CsF,EAAc7uD,EAAsBu1C,EAAgB/1C,SACpDsvD,EAAa7uD,EAAqBs1C,EAAgB/1C,SAClDuvD,EAAW7uD,EAAmBq1C,EAAgB/1C,SAC9CwvD,EAAa7uD,EAAqBo1C,EAAgB/1C,SAClDivD,EAAepuD,EAAuBk1C,EAAgB/1C,SACtDkvD,EAAqBtuD,EAA6Bm1C,EAAgB/1C,SACxE,IAAIyzE,EAAY,EACZtkB,IACAskB,GAAwB,GAC5BA,IAAyB,EACrBrkB,IACAqkB,GAAwB,GAC5BA,IAAyB,EACrBD,IACAC,GAAwB,GAC5BA,IAAyB,EACrBpkB,IACAokB,GAAwB,GAC5BA,IAAyB,EACrBnkB,IACAmkB,GAAwB,GAC5BA,IAAyB,EACrBlkB,IACAkkB,GAAwB,GAC5BA,IAAyB,EACrBjkB,IACAikB,GAAwB,GAC5BA,IAAyB,EACrBxkB,IACAwkB,GAAwB,GAC5BA,IAAyB,EACrBvkB,IACAukB,GAAwB,GAC5B,IAAIC,EAAkBrmD,GAAMsmD,qBAAqBF,GACjD,GAAuBn2D,MAAnBo2D,EAA8B,CAC9B,IAAIE,EAAgB,yFACpB,MAAMC,EAAavkB,GAAcE,GAAcD,GAAYN,EAC3D2kB,GAAiB,2OAMbC,IACAD,GAAiB,wJAKjB3kB,IACA2kB,GAAiB,44BAejBzkB,IACAykB,GAAiB,gxEA4BjBxkB,IACAwkB,GAAiB,urBAYjB1kB,IACA0kB,GAAiB,6kCAoBjBJ,IACAI,GAAiB,sUAQrBA,GAAiB,uJAIbvkB,IACAukB,GAAiB,+yBAcjBtkB,IACAskB,GAAiB,q5HA2CjBrkB,IACAqkB,GAAiB,qxCAuBjBpkB,IACAokB,GAAiB,wsCAsBrBA,GAAiB,kLAKb3kB,GACA2kB,GAAiB,snDAmBkB,GAA/BthF,EAAOoW,qBACPkrE,GAAiB,8HAImB,GAA/BthF,EAAOoW,uBACZkrE,GAAiB,yHAIrBA,GAAiB,0mCAkBkB,GAA/BthF,EAAOoW,qBACPkrE,GAAiB,mPAKmB,GAA/BthF,EAAOoW,uBACZkrE,GAAiB,0GAIrBA,GAAiB,i2BAmBjBA,GAAiB,gIAGjBzkB,IACAykB,GAAiB,8vDAmBjBxkB,IACAwkB,GAAiB,60CA2BjB1kB,IACA0kB,GAAiB,ujBAajBJ,IACAI,GAAiB,0QAOrBA,GAAiB,sGAKbA,GADAvkB,EACiB,kkCAoBA,iFAKjBC,IACAskB,GAAiB,6pFAwCjBrkB,IACAqkB,GAAiB,u5CAyBjBpkB,IACAokB,GAAiB,utFAsCrBA,GAAiB,+KAKbC,IACAD,GAAiB,kEAIrBA,GAAiB,6QAQbC,IACAD,GAAiB,wEAIjB3kB,IACA2kB,GAAiB,4PAMjBzkB,IACAykB,GAAiB,orCAiBjBxkB,IACAwkB,GAAiB,4kBAWjB1kB,IACA0kB,GAAiB,skBAWjBJ,IACAI,GAAiB,ioBAcjBvkB,IACAukB,GAAiB,oYASjBtkB,IACAskB,GAAiB,0ZASjBrkB,IACAqkB,GAAiB,gjCAiBjBpkB,IACAokB,GAAiB,g+DA0BrBA,GAAiB,IACjBF,EAAkB,IAAI/B,SAAS,SAAU,QAASiC,EAAhC,CAA+CthF,EAAQ+6B,IACzEA,GAAMsmD,qBAAqBF,GAAaC,CACpD,CACQA,EAAgBp3C,EAAOsiC,EAAaC,EAAasD,EAAaG,EAAWvsB,EACjF,CACI,sBAAOg8B,CAAgBz1C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,GACpE,MAAMy8B,EAAal3E,KAAKO,IAAI,EAAGk6C,EAAgBp7B,cAC/C,IAAIm5D,EAAgBzmD,GAAM0mD,mBAAmBh+B,EAAgBp7B,cAC7D,GAAqB2C,MAAjBw2D,EAA4B,CAC5B,IAAIE,EAAc,iFAClBA,GAAe,8QAQf,IAAK,IAAI34E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B24E,GAAe,+RAIjB3qC,WAAW,IAAKhuC,EAAI,IAEtB,IAAK,IAAIA,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B24E,GAAe,+CACjB3qC,WAAW,IAAKhuC,EAAI,IAEtB24E,GAAe,whBAYf,IAAK,IAAI34E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B24E,GAAe,mhCAoBb3qC,WAAW,IAAKhuC,EAAI,IAE1B,MAAM83E,EAAa,GACnB,IAAK,IAAIL,EAAQ,EAAGA,EAAQN,EAAYM,IACpCK,EAAW12E,KAAK,YAAcq2E,GAAkB,GAATA,EAAa,gBAAkB,KAE1EkB,GAAe,qBAAuBb,EAAW/rC,KAAK,OAAS,IAC/D4sC,GAAe,oNAGf,IAAK,IAAI34E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B24E,GAAe,6FAEb3qC,WAAW,IAAKhuC,EAAI,IAE1B24E,GAAe,qLAMf,IAAK,IAAI34E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5B24E,GAAe,6FAEb3qC,WAAW,IAAKhuC,EAAI,IAE1B24E,GAAe,mPAOfF,EAAgB,IAAInC,SAAS,SAAU,QAASqC,EAAhC,CAA6C1hF,EAAQ+6B,IACrEA,GAAM0mD,mBAAmBh+B,EAAgBp7B,cAAgBm5D,CACrE,CACQA,EAAcx3C,EAAO6lC,EAAajsB,EAAuBF,EAAMD,EACvE,CACI,oBAAOi8B,CAAc11C,EAAO6lC,EAAaG,EAAWtsB,EAAMD,GACtD,MAAMk+B,EAAO33C,EAAMgiC,+BACbkU,EAAyC,EAA5BlgF,EAAOqZ,mBAC1B,IAAIkkE,EAAa75B,EAAKS,YAAY,GAClC,MAAMC,GAAmBV,EAAKW,iBAAiB,GAC/C,IAAI5hD,GAAcihD,EAAKjhD,WACvB,MAAMivD,GAAmBhO,EAAKgO,gBAC9B,IAAIL,EAAS3N,EAAK2N,OACdttC,GAAY2/B,EAAKxgB,iBACrB,MAAM0+C,GAAiBl+B,EAAKuO,sBACtB4vB,EAAgBn+B,EAAKwO,sBAC3B,IAAIluC,GAAS0/B,EAAKtgB,cAClB,MAAM0+C,GAAcp+B,EAAKyO,mBACzB,IAAI5K,GAAe7D,EAAK0O,oBACxB,MAAM3K,GAAoB/D,EAAK2O,yBACzBpQ,EAAYyB,EAAK4O,kBACjBtK,EAAmB/F,EAAU7gD,OAAS,GAAM,EAClD,IAAI0hD,EAAuC,EAA1BY,EAAK6O,mBACtBzP,GAAcA,EAAakF,GAAmB/F,EAAU7gD,OACxD,MAAM2gF,EAAUr+B,EAAKgP,YACf8e,EAAqC,EAAvB9tB,EAAKiP,gBACzB,IAAIqvB,GAAuBt+B,EAAKkP,wBAC5BqvB,GAAuBv+B,EAAKmP,wBAChC,MAAMgf,EAAe92C,GAAM82C,aACrBjxD,EAAYivD,EAAcG,EAChC,IAAK,IAAIkS,EAAcrS,EAAaqS,EAActhE,EAAWshE,IAAe,CACxE,IAAIC,GAAS9wB,EAAO,GAAKksB,GAAc,EACnC6E,EAAiBD,EAAQ,IAAO,GAAOjC,EAAa,GAAOn8D,GAC/D,IAAK0/B,EAAgBr7B,QACjB,GAAI+5D,EAAQ5E,EAER6E,GAAwC,KADpCC,EAAIF,EAAQ5E,GACO8E,EAAIA,EAAIA,EAAI,QAElC,GAAIF,EAAQ,EAAM5E,EAAY,CAC/B,IAAI8E,EACJD,GAAwC,KADpCC,GAAKF,EAAQ,GAAO5E,GACD8E,EAAIA,EAAIA,EAAI,EACvD,CAEYhxB,EAAO,GAAK8wB,EACZ,IAAK,IAAIp5E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAAK,CACjC,MAAMu5E,EAAoB/E,EAAasE,EAAc94E,GACrD,IAAIo5E,GAAS9wB,EAAOtoD,GAAKu5E,GAAqB,EAE9C,GADAF,GAAkBD,EAAQp+D,GACrB0/B,EAAgBr7B,QACjB,GAAI+5D,EAAQG,EAAmB,CAC3B,MAAMD,EAAIF,EAAQG,EAClBF,GAAwC,IAArBC,EAAIA,EAAIA,EAAIA,EAAI,GAAWt+D,CACtE,MACyB,GAAIo+D,EAAQ,EAAMG,EAAmB,CACtC,MAAMD,GAAKF,EAAQ,GAAOG,EAC1BF,GAAwC,IAArBC,EAAIA,EAAIA,EAAIA,EAAI,GAAWt+D,CACtE,CAEgBstC,EAAOtoD,GAAKo5E,CAC5B,CACYlgC,EAAUa,EAAakF,GAAmBo6B,EAC1C,MAAMG,EAAkBz/B,EAAayE,EAC/Bi7B,EAA+B,EAAlBD,EACbE,EAAaD,EAAa,EAC1BE,EAAaH,EAAkBC,EAC/BG,EAAkB1gC,EAAUugC,EAAax6B,GAG/ClF,IACA,MAAM8/B,EAAcR,GAFAO,GADI1gC,EAAUwgC,EAAaz6B,GACU26B,GAAmBD,GAEzB1+D,EAC7CglC,EAAS6oB,EAAa+Q,EAAaZ,EAAqBC,EAAqBzQ,EAAauQ,GAChGE,EAAsBD,EACtBA,EAAsBY,EACtBrF,GAAcn5B,EACdrgC,GAAY69D,EACZ59D,GAAS89D,EACTv6B,GAAeE,EACf,MAAMo7B,EAAS75B,EAASvmD,EACxBA,GAAcivD,EACdiwB,EAAKO,IAAgBW,CACjC,CACQn/B,EAAKS,YAAY,GAAKo5B,EACtB75B,EAAKjhD,WAAaA,EAClBihD,EAAKxgB,iBAAmBnf,EACxB2/B,EAAKtgB,cAAgBpf,EACrB0/B,EAAK0O,oBAAsB7K,EAC3B7D,EAAK6O,mBAAqBzP,EAC1B9Y,EAAMkoC,gBAAgB6P,GACtBr+B,EAAKkP,wBAA0BovB,EAC/Bt+B,EAAKmP,wBAA0BovB,CACvC,CACI,iBAAOrC,CAAW51C,EAAO6lC,EAAaG,EAAWtsB,EAAMD,GACnD,MAAMy8B,EAAal3E,KAAKO,IAAI,EAAGk6C,EAAgBp7B,cAC/C,IAAIy6D,EAAgB/nD,GAAMgoD,mBAAmBt/B,EAAgBp7B,cAC7D,GAAqB2C,MAAjB83D,EAA4B,CAC5B,IAAIE,EAAc,qEAClBA,GAAe,oNAMf,IAAK,IAAIj6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bi6E,GAAe,2oBASjBjsC,WAAW,IAAKhuC,EAAI,IAEtBi6E,GAAe,0cAaf,IAAK,IAAIj6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bi6E,GAAe,gFACbjsC,WAAW,IAAKhuC,EAAI,IAE1Bi6E,GAAe,mBACf,IAAK,IAAIj6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAAK,CACjCi6E,GAAe,2UAIsFjsC,WAAW,IAAKhuC,EAAI,IAAIguC,WAAW,IAAKmpC,EAAa,IAAInpC,WAAW,IAAK2M,EAAK2N,OAAOjwD,OAAS,IACnM,IAAK,IAAIkhB,EAAIvZ,EAAI,EAAGuZ,EAAIohC,EAAK2N,OAAOjwD,OAAQkhB,IACxC0gE,GAAe,mBAAmBjsC,WAAW,IAAKhuC,EAAI,IAAIguC,WAAW,IAAKz0B,EAAI,IAElF0gE,GAAe,uEAI/B,CACYA,GAAe,4JAIf,IAAK,IAAIj6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bi6E,GAAe,0KAIbjsC,WAAW,IAAKhuC,EAAI,IAE1B,MAAM83E,EAAa,GACnB,IAAK,IAAIL,EAAQ,EAAGA,EAAQN,EAAYM,IACpCK,EAAW12E,KAAK,cAAgBq2E,GAAkB,GAATA,EAAa,gBAAkB,KAE5EwC,GAAe,qBAAuBnC,EAAW/rC,KAAK,OAAS,IAC/DkuC,GAAe,oNAGf,IAAK,IAAIj6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bi6E,GAAe,6FAEbjsC,WAAW,IAAKhuC,EAAI,IAE1Bi6E,GAAe,uIAIf,IAAK,IAAIj6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bi6E,GAAe,6BAA6BjsC,WAAW,IAAKhuC,EAAI,IAAM/I,EAAOgL,gBAAkB,kEAEjG+rC,WAAW,IAAKhuC,EAAI,IAEtBi6E,GAAe,gCACf,IAAK,IAAIj6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bi6E,GAAe,sDAChBjsC,WAAW,IAAKhuC,EAAI,IAEvBi6E,GAAe,6KAKfF,EAAgB,IAAIzD,SAAS,SAAU,QAAS2D,EAAhC,CAA6ChjF,EAAQ+6B,IAErEA,GAAMgoD,mBAAmBt/B,EAAgBp7B,cAAgBy6D,CACrE,CACQA,EAAc94C,EAAO6lC,EAAaG,EAAWtsB,EAAMD,EAC3D,CACI,oBAAOo8B,CAAc71C,EAAO6lC,EAAaG,EAAWtsB,EAAMD,GACtD,MAAMy8B,EAAal3E,KAAKO,IAAI,EAAGk6C,EAAgBp7B,cAC/C,IAAI46D,EAAmBloD,GAAMmoD,sBAAsBz/B,EAAgBp7B,cACnE,GAAwB2C,MAApBi4D,EAA+B,CAC/B,IAAIE,EAAiB,qEACrBA,GAAkB,+PAOlB,IAAK,IAAIp6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bo6E,GAAkB,woBAQhBpsC,WAAW,IAAKhuC,EAAI,IAE1Bo6E,GAAkB,wcAYlB,IAAK,IAAIp6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bo6E,GAAkB,oFAChBpsC,WAAW,IAAKhuC,EAAI,IAE1Bo6E,GAAkB,0QAKlB,IAAK,IAAIp6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bo6E,GAAkB,kNAIpBpsC,WAAW,IAAKhuC,EAAI,IAEtBo6E,GAAkB,IAClB,IAAK,IAAIp6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bo6E,GAAkB,2ZAKpBpsC,WAAW,IAAKhuC,EAAI,IAEtBo6E,GAAkB,8IAGlB,IAAK,IAAIp6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bo6E,GAAkB,4YAQhBpsC,WAAW,IAAKhuC,EAAI,IAE1B,MAAM83E,EAAa,GACnB,IAAK,IAAIL,EAAQ,EAAGA,EAAQN,EAAYM,IACpCK,EAAW12E,KAAK,cAAgBq2E,GAAkB,GAATA,EAAa,gBAAkB,KAE5E2C,GAAkB,qBAAuBtC,EAAW/rC,KAAK,OAAS,IAClEquC,GAAkB,oNAGlB,IAAK,IAAIp6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bo6E,GAAkB,6FAEhBpsC,WAAW,IAAKhuC,EAAI,IAE1Bo6E,GAAkB,uIAIlB,IAAK,IAAIp6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bo6E,GAAkB,6BAA6BpsC,WAAW,IAAKhuC,EAAI,IAAM/I,EAAOwY,oBAAsB,oFAExGu+B,WAAW,IAAKhuC,EAAI,IAEtBo6E,GAAkB,gCAClB,IAAK,IAAIp6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bo6E,GAAkB,sDACnBpsC,WAAW,IAAKhuC,EAAI,IAEvBo6E,GAAkB,6KAKlBF,EAAmB,IAAI5D,SAAS,SAAU,QAAS8D,EAAhC,CAAgDnjF,EAAQ+6B,IAE3EA,GAAMmoD,sBAAsBz/B,EAAgBp7B,cAAgB46D,CACxE,CACQA,EAAiBj5C,EAAO6lC,EAAaG,EAAWtsB,EAAMD,EAC9D,CACI,mBAAOq8B,CAAa91C,EAAO6lC,EAAaG,EAAWtsB,EAAMD,GACrD,MAAMy8B,EAAal3E,KAAKO,IAAI,EAAGk6C,EAAgBp7B,cAC/C,IAAI+6D,EAAeroD,GAAMsoD,kBAAkB5/B,EAAgBp7B,cAC3D,GAAoB2C,MAAhBo4D,EAA2B,CAC3B,IAAIE,EAAa,qEACjBA,GAAc,4UAMd,IAAK,IAAIv6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bu6E,GAAc,8SAGhBvsC,WAAW,IAAKhuC,EAAI,IAEtBu6E,GAAc,uXAQd,IAAK,IAAIv6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bu6E,GAAc,gFAChBvsC,WAAW,IAAKhuC,EAAI,IAEtBu6E,GAAc,0PAKd,IAAK,IAAIv6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bu6E,GAAc,kMAIpBvsC,WAAW,IAAKhuC,EAAI,IAElBu6E,GAAc,IACd,IAAK,IAAIv6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bu6E,GAAc,uYAKpBvsC,WAAW,IAAKhuC,EAAI,IAElBu6E,GAAc,2MAKd,IAAK,IAAIv6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bu6E,GAAc,uTAMZvsC,WAAW,IAAKhuC,EAAI,IAE1B,MAAM83E,EAAa,GACnB,IAAK,IAAIL,EAAQ,EAAGA,EAAQN,EAAYM,IACpCK,EAAW12E,KAAK,cAAgBq2E,GAAkB,GAATA,EAAa,gBAAkB,KAE5E8C,GAAc,qBAAuBzC,EAAW/rC,KAAK,OAAS,IAC9DwuC,GAAc,oNAGd,IAAK,IAAIv6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bu6E,GAAc,6FAEZvsC,WAAW,IAAKhuC,EAAI,IAE1Bu6E,GAAc,uIAId,IAAK,IAAIv6E,EAAI,EAAGA,EAAIm3E,EAAYn3E,IAC5Bu6E,GAAc,6BAA6BvsC,WAAW,IAAKhuC,EAAI,IAAM/I,EAAOwY,oBAAsB,mFAEpGu+B,WAAW,IAAKhuC,EAAI,IAEtBu6E,GAAc,0MAKdF,EAAe,IAAI/D,SAAS,SAAU,QAAS,kBAAmBiE,EAAnD,CAA+DtjF,EAAQ+6B,GAAOi5B,IAE7Fj5B,GAAMsoD,kBAAkB5/B,EAAgBp7B,cAAgB+6D,CACpE,CACQA,EAAap5C,EAAO6lC,EAAaG,EAAWtsB,EAAMD,EAC1D,CACI,eAAOgyB,CAASzrC,EAAOu5C,EAAmB3/B,EAAuBF,EAAMjkC,GACnE,IAAKuqB,EAAMlS,KACP,OACJ,IAAII,EAAMl4B,EAAOma,SAAW,EAAIupC,EAAKptB,QAAQ,GAC7C,GAAI7W,EAAW2kB,kBAAkBlM,GAC7B,OACJ,IAAIk2C,EAAU3uD,EAAW/B,WAAWwa,GAChC4uC,EAAkB,GACtB,GAAI9mE,EAAO0d,WAAW+B,EAAW/B,WAAWwa,IAAMpa,QAC9CgpD,EAAgB38D,KAAK,QAGrB,GAAIsV,EAAWykB,eAAehM,IAAQ8R,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYr2B,OAC/F,IAAK,IAAI2H,EAAI,EAAGA,EAAIihC,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYr2B,OAAQ2H,IACrF+9D,EAAgB38D,KAAKpB,QAGpB0W,EAAWykB,eAAehM,GAAO8R,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYr2B,OAC9B,MAAjE4oC,EAAMlS,KAAK+pB,WAAWpiC,EAAWwkB,YAAY/L,GAAM8R,EAAM6H,OACzDi1B,EAAkB98B,EAAMlS,KAAK+pB,WAAWpiC,EAAWwkB,YAAY/L,GAAM8R,EAAM6H,KAAKpa,aAGpFqvC,EAAgB38D,KAAKsV,EAAWykB,eAAehM,IAGvD,IAAK,IAAIiY,EAAkB,EAAGA,EAAkB22B,EAAgB1lE,OAAQ+uC,IAAmB,CACvFnG,EAAM68B,YAAYnjB,EAAKjhD,WAAYihD,EAAKjhD,WAAaihD,EAAKgO,gBAAiBjyC,EAAWwkB,YAAY/L,GAAM4uC,EAAgB32B,GAAkBi+B,GAC1I,IAAK,IAAIrlE,EAAI,EAAGA,EAAIihC,EAAM+7B,SAAS3kE,OAAQ2H,IACnC/I,EAAO0d,WAAW+B,EAAW/B,WAAWwa,IAAMpa,QAC1CksB,EAAM+7B,SAASh9D,GAAGqlE,SAAWA,GAC7BpkC,EAAM68B,YAAY78B,EAAM+7B,SAASh9D,GAAGsc,OAAQ2kB,EAAM+7B,SAASh9D,GAAGsc,OAAQ5F,EAAWwkB,YAAY/L,GAAM4uC,EAAgB32B,GAAkBi+B,GAEpIpkC,EAAM+7B,SAASh9D,GAAGmoC,cAAgBzxB,EAAWwkB,YAAY/L,IAAQ8R,EAAM+7B,SAASh9D,GAAGonC,iBAAmB22B,EAAgB32B,IAAoBnG,EAAM+7B,SAASh9D,GAAGqlE,SAAWA,GAC5KpkC,EAAM68B,YAAY78B,EAAM+7B,SAASh9D,GAAGsc,OAAQ2kB,EAAM+7B,SAASh9D,GAAGsc,OAAQ5F,EAAWwkB,YAAY/L,GAAM4uC,EAAgB32B,GAAkBi+B,GAG7I,GAAIA,GAAWpuE,EAAO0d,WAAW1a,WAAW,aAAaF,OAAuB,GAAdknC,EAAMxR,MAAakrB,EAAKsJ,eAAiBhjB,EAAMg8B,KAAOhmE,EAAOiR,aAAe+4B,EAAM3S,KAChJ2S,EAAMwD,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IAAkBuf,QAAU,OAEnG,GAAI0e,GAAWpuE,EAAO0d,WAAW1a,WAAW,kBAAkBF,OAAuB,GAAdknC,EAAMxR,MAAakrB,EAAKsJ,eAAiBhjB,EAAMg8B,KAAOhmE,EAAOiR,aAAe+4B,EAAM3S,KAAM,CAChK,IAAImsD,EAAiB/jE,EAAW0kB,mBAAmBjM,GACnD,MAAMurD,EAAqBz5C,EAAMwD,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IAC7EnG,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IACjFrN,cAAgB0gD,IAC9BC,EAAmBxuB,aAAauuB,GAAkB,EAEtE,MACiB,GAAIpV,GAAWpuE,EAAO0d,WAAW1a,WAAW,YAAYF,MACzDknC,EAAMwgC,YAAa,OAElB,GAAI4D,GAAWpuE,EAAO0d,WAAW1a,WAAW,WAAWF,MAAO,CAC/D,MAAM8jE,EAAU58B,EAAMlS,KACtB,IAAI4rD,EAA6C,EAAjCjkE,EAAW4Y,eAAeH,GAC1C,GAAiB,GAAbwrD,EAAgB,CAChB,IAAInd,EAAS,EACb,MAAM7a,EAAc1hB,EAAMqyB,kBAAoBr8D,EAAOkR,aACrD,KAAOwyC,EAAK/rB,KAAKzG,MAAQwyB,EAAK/rB,KAAKpB,KAAKgwC,GAAQrwC,MAAQw1B,GACpD6a,IACJ,IAAIod,GAAiBj4B,EAAchI,EAAK/rB,KAAKzG,MAAS0yB,GAAyB5Z,EAAMo7B,oBAAsBplE,EAAOkR,cAAiBlR,EAAOkR,aAAgBwyC,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGrwC,OAASwtB,EAAK/rB,KAAKpB,KAAKgwC,GAAQrwC,KAAOwtB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGrwC,MAC1L,MAAzD0wC,EAAQlkC,aAAaghB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGv6C,OAAsE,MAArD46C,EAAQlkC,aAAaghB,EAAK/rB,KAAKpB,KAAKgwC,GAAQv6C,MAC7G46C,EAAQjH,eAAiBzgC,GAAeU,YAAYgnC,EAAQlkC,aAAaghB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGv6C,MAAO46C,EAAQlkC,aAAaghB,EAAK/rB,KAAKpB,KAAKgwC,GAAQv6C,MAAO23D,GAG9J/c,EAAQjH,eAAiBiH,EAAQ1jD,QAEzD,KACqB,CACD,IAAK,IAAIna,EAAI,EAAGA,EAAI/I,EAAOyT,iBAAkB1K,IACrC69D,EAAQjH,gBAAkBiH,EAAQlkC,aAAa35B,IAAgC,MAA1B69D,EAAQjH,iBAC7DiH,EAAQjH,eAAiB,IAAIzgC,GAC7B0nC,EAAQjH,eAAe3mC,eAAe4tC,EAAQlkC,aAAa35B,GAAG8uB,iBAGxC,MAA1B+uC,EAAQjH,iBACRiH,EAAQjH,eAAiB,IAAIzgC,GAC7B0nC,EAAQjH,eAAe3mC,eAAe4tC,EAAQ1jD,SAAS2U,iBAEvD+uC,EAAQjH,eAAevgC,kBAAoBp2B,KAAK4F,OAAO80E,EAAY,GAAK,KACpEA,EAAY,EACZ9c,EAAQjH,eAAexgC,cAAcn2B,KAAK4F,OAAO80E,EAAY,GAAK,IAAIhmD,KAAOgmB,EAAKjhD,WAAaihD,EAAKgO,gBAGpGkV,EAAQjH,eAAexgC,cAAcn2B,KAAK4F,OAAO80E,EAAY,GAAK,IAAI/lD,KAAO+lB,EAAKjhD,WAAaihD,EAAKgO,gBAGhI,CACA,MACiB,GAAI0c,GAAWpuE,EAAO0d,WAAW1a,WAAW,aAAaF,MAAO,CACjE,MAAMqkE,EAAgBn9B,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IACnG,IAAKg3B,EAAc3iD,aAAc,CAC7B,IAAIk/D,EAA6C,EAAjCjkE,EAAW4Y,eAAeH,GAC1C,GAAiB,GAAbwrD,EAAgB,CAChB,IAAInd,EAAS,EACb,MAAM7a,EAAc1hB,EAAMqyB,kBAAoBr8D,EAAOkR,aACrD,KAAOwyC,EAAK/rB,KAAKzG,MAAQwyB,EAAK/rB,KAAKpB,KAAKgwC,GAAQrwC,MAAQw1B,GACpD6a,IACJ,IAAIod,GAAiBj4B,EAAchI,EAAK/rB,KAAKzG,MAAS0yB,GAAyB5Z,EAAMo7B,oBAAsBplE,EAAOkR,cAAiBlR,EAAOkR,aAAgBwyC,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGrwC,OAASwtB,EAAK/rB,KAAKpB,KAAKgwC,GAAQrwC,KAAOwtB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGrwC,MACpL,MAA/DixC,EAAczkC,aAAaghB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGv6C,OAA4E,MAA3Dm7C,EAAczkC,aAAaghB,EAAK/rB,KAAKpB,KAAKgwC,GAAQv6C,MACzHm7C,EAAcxH,eAAiBzgC,GAAeU,YAAYunC,EAAczkC,aAAaghB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGv6C,MAAOm7C,EAAczkC,aAAaghB,EAAK/rB,KAAKpB,KAAKgwC,GAAQv6C,MAAO23D,GAGhLxc,EAAcxH,eAAiBwH,EAAcjkD,QAEzE,KACyB,CACD,IAAK,IAAIna,EAAI,EAAGA,EAAI/I,EAAOyT,iBAAkB1K,IACrCo+D,EAAcxH,gBAAkBwH,EAAczkC,aAAa35B,IAAsC,MAAhCo+D,EAAcxH,iBAC/EwH,EAAcxH,eAAiB,IAAIzgC,GACnCioC,EAAcxH,eAAe3mC,eAAemuC,EAAczkC,aAAa35B,GAAG8uB,iBAG9C,MAAhCsvC,EAAcxH,iBACdwH,EAAcxH,eAAiB,IAAIzgC,GACnCioC,EAAcxH,eAAe3mC,eAAemuC,EAAcjkD,SAAS2U,iBAEnEsvC,EAAcxH,eAAevgC,kBAAoBp2B,KAAK4F,OAAO80E,EAAY,GAAK,KAC1EA,EAAY,EACZvc,EAAcxH,eAAexgC,cAAcn2B,KAAK4F,OAAO80E,EAAY,GAAK,IAAIhmD,KAAOgmB,EAAKjhD,WAAaihD,EAAKgO,gBAG1GyV,EAAcxH,eAAexgC,cAAcn2B,KAAK4F,OAAO80E,EAAY,GAAK,IAAI/lD,KAAO+lB,EAAKjhD,WAAaihD,EAAKgO,gBAG1I,CACA,CACA,MACiB,GAAI0c,GAAWpuE,EAAO0d,WAAW1a,WAAW,eAAeF,MAAO,CACnE,MAAMqkE,EAAgBn9B,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IACnG,IAAKg3B,EAAc3hD,eAAgB,CAC/B,IAAIk+D,EAA6C,EAAjCjkE,EAAW4Y,eAAeH,GAC1C,GAAiB,GAAbwrD,EAAgB,CAChB,IAAInd,EAAS,EACb,MAAM7a,EAAc1hB,EAAMqyB,kBAAoBr8D,EAAOkR,aACrD,KAAOwyC,EAAK/rB,KAAKzG,MAAQwyB,EAAK/rB,KAAKpB,KAAKgwC,GAAQrwC,MAAQw1B,GACpD6a,IACJ,IAAIod,GAAiBj4B,EAAchI,EAAK/rB,KAAKzG,MAAS0yB,GAAyB5Z,EAAMo7B,oBAAsBplE,EAAOkR,cAAiBlR,EAAOkR,aAAgBwyC,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGrwC,OAASwtB,EAAK/rB,KAAKpB,KAAKgwC,GAAQrwC,KAAOwtB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGrwC,MAClL,MAAjEixC,EAAcxkC,eAAe+gB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGv6C,OAA8E,MAA7Dm7C,EAAcxkC,eAAe+gB,EAAK/rB,KAAKpB,KAAKgwC,GAAQv6C,MAC7Hm7C,EAAcjC,iBAAmBhmC,GAAeU,YAAYunC,EAAcxkC,eAAe+gB,EAAK/rB,KAAKpB,KAAKgwC,EAAS,GAAGv6C,MAAOm7C,EAAcxkC,eAAe+gB,EAAK/rB,KAAKpB,KAAKgwC,GAAQv6C,MAAO23D,GAGtLxc,EAAcjC,iBAAmBiC,EAAcniD,UAE3E,KACyB,CACD,IAAK,IAAIjc,EAAI,EAAGA,EAAI/I,EAAOyT,iBAAkB1K,IACrCo+D,EAAcjC,kBAAoBiC,EAAcxkC,eAAe55B,IAAwC,MAAlCo+D,EAAcjC,mBACnFiC,EAAcjC,iBAAmB,IAAIhmC,GACrCioC,EAAcjC,iBAAiBlsC,eAAemuC,EAAcxkC,eAAe55B,GAAG8uB,iBAGhD,MAAlCsvC,EAAcjC,mBACdiC,EAAcjC,iBAAmB,IAAIhmC,GACrCioC,EAAcjC,iBAAiBlsC,eAAemuC,EAAcniD,WAAW6S,iBAEvEsvC,EAAcjC,iBAAiB9lC,kBAAoBp2B,KAAK4F,OAAO80E,EAAY,GAAK,KAC5EA,EAAY,EACZvc,EAAcjC,iBAAiB/lC,cAAcn2B,KAAK4F,OAAO80E,EAAY,GAAK,IAAIhmD,KAAOgmB,EAAKjhD,WAAaihD,EAAKgO,gBAG5GyV,EAAcjC,iBAAiB/lC,cAAcn2B,KAAK4F,OAAO80E,EAAY,GAAK,IAAI/lD,KAAO+lB,EAAKjhD,WAAaihD,EAAKgO,gBAG5I,CACA,CACA,MACiB,GAAI0c,GAAWpuE,EAAO0d,WAAW1a,WAAW,6BAA6BF,MAAO,CACjF,MAAMqkE,EAAgBn9B,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IACnG,IAAIqzC,EAAiB/jE,EAAW0kB,mBAAmBjM,GAC/C/f,EAAQurC,EAAKjhD,WAAaihD,EAAKgO,gBAC/ByV,EAAcrkC,cAAgB0gD,IAC1BtwD,OAAOwpC,UAAUvkD,GACjBgvD,EAAcjvD,UAAUsrE,GAAgB1hD,kBAAoB9hC,EAAO2b,wBAAwBxD,IAG3FA,GAAS,EAAKA,EAAQ,GAAMnY,EAAO2b,wBAAwB3S,KAAK4F,MAAMuJ,IAAWA,EAAQ,EAAKnY,EAAO2b,wBAAwB3S,KAAKoV,KAAKjG,IACvIgvD,EAAcjvD,UAAUsrE,GAAgB1hD,kBAAoB3pB,GAGpF,MACiB,GAAIi2D,GAAWpuE,EAAO0d,WAAW1a,WAAW,mCAAmCF,MAAO,CACvF,MAAMqkE,EAAgBn9B,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IACnG,IAAIqzC,EAAiB/jE,EAAW0kB,mBAAmBjM,GAC/C0rD,EAAQlgC,EAAKjhD,WAAaihD,EAAKgO,gBAC/ByV,EAAcrkC,cAAgB0gD,IAC9Brc,EAAcjvD,UAAUsrE,GAAgBzhD,uBAAyB6hD,EAAQ,GAE7F,MACiB,GAAIxV,GAAWpuE,EAAO0d,WAAW1a,WAAW,mCAAmCF,MAAO,CACvF,MAAMqkE,EAAgBn9B,EAAMlS,KAAK0V,SAAS/tB,EAAWwkB,YAAY/L,IAAMT,YAAYqvC,EAAgB32B,IACnG,IAAIqzC,EAAiB/jE,EAAW0kB,mBAAmBjM,GAC/C0rD,EAAQlgC,EAAKjhD,WAAaihD,EAAKgO,gBAC/ByV,EAAcrkC,cAAgB0gD,IAC9Brc,EAAcjvD,UAAUsrE,GAAgBxhD,uBAAyB4hD,EAAQ,GAE7F,CACA,CACA,CACI,6BAAOC,CAAuBj7E,EAAMsD,GAChC,IAAIi2E,EAAQn5E,KAAKmC,SAAWe,EAC5B,MAAM43E,EAAY53E,EAAa,EAC/B,IAAI63E,EAAY5B,EAAQ2B,EACpBv/C,EAAW37B,EAAKm7E,GAEpB,IAAK,IAAIC,EAAoB,IAAKA,EAAoB,EAAGA,IAAqB,CAC1E,MAAMC,EAAaF,EAFR,GAE8BD,EACnCI,EAAWt7E,EAAKq7E,GACtB,GAAI1/C,EAAW2/C,GAAY,EAAK,CAC5B,IAAK,IAAIn7E,EAAI,EAAGA,EALT,GAKqBA,IAAK,CAC7B,MAAMo7E,EAAkBJ,EAAY,EAAKD,EACnCM,EAAgBx7E,EAAKu7E,GAC3B,GAAI5/C,EAAW6/C,GAAiB,EAAK,CACjC,MAAM31D,EAAQ21D,EAAgB7/C,EAC9B49C,EAAQ4B,EACJ/6E,KAAKY,IAAI6kB,GAAS,OAClB0zD,IAAU59C,EAAW9V,GAEzB0zD,EAAQn5E,KAAKO,IAAI,EAAG44E,GAASj2E,EAC7B,KACxB,CAEwB63E,EAAYI,EACZ5/C,EAAW6/C,CAEnC,CACgB,KAChB,CAEgBL,EAAYE,EACZ1/C,EAAW2/C,CAE3B,CACQ,OAAO/B,CACf,CACI,mCAAOtiB,CAA6BwkB,GAChC,OAAQA,IAAqBrkF,EAAOqV,YAAc,EAAO,EAAMrM,KAAKuC,IAAI,EAAGvL,EAAOsV,eAAiB+uE,EAC3G,CACI,mCAAOC,CAA6BC,GAChC,OAAQA,GAAc,GAAQvkF,EAAOqV,YAAc,EAAIrM,KAAKQ,IAAIxJ,EAAOqV,YAAcrM,KAAKN,IAAI67E,GAAcv7E,KAAK2iC,IAAO3rC,EAAOsV,eACvI,CACI,2BAAOu5C,CAAqB7iC,GACxB,OAAOhjB,KAAKuC,IAAIvC,KAAKO,IAAI,EAAKyiB,GAAQhsB,EAAOoV,YAAa,IAClE,CACI,2BAAOovE,CAAqBD,GACxB,OAAOv7E,KAAKuC,IAAIvC,KAAKO,IAAI,EAAKg7E,GAAa,EAAI,KAAOvkF,EAAOoV,WACrE,CACI,6BAAOowB,CAAuB4oC,GAC1B,MAAO,OAAU,IAAOA,EAAU,IAAOA,EAAUA,EAC3D,CACI,6BAAO3nC,CAAuBg+C,GAC1B,OAAO7xD,EAAM,EAAG5yB,EAAO4T,YAAa5K,KAAKgB,QAAQ,IAAOhB,KAAKqC,KAAK,MAAS,GAAMo5E,EAAU,QAAW,IAC9G,CACI,4BAAOh/C,CAAsB2oC,GACzB,OAAOpuE,EAAO6T,aAAau6D,EACnC,CACI,4BAAO1nC,CAAsBg+C,GACzB,IAAIC,EAAQ3kF,EAAO6T,aAAa,GAChC,GAAI6wE,GAASC,EACT,OAAO,EACX,IAAK,IAAI57E,EAAI,EAAGA,EAAI/I,EAAO6T,aAAazS,OAAQ2H,IAAK,CACjD,IAAI67E,EAAQ5kF,EAAO6T,aAAa9K,GAChC,GAAI27E,GAASE,EACT,OAAQF,GAASC,EAAQC,GAAS,EAAK77E,EAAI,EAAIA,EACnD47E,EAAQC,CACpB,CACQ,OAAO5kF,EAAO6T,aAAazS,OAAS,CAC5C,CACI,oBAAOmkC,CAAcvC,GACjB,OAAOA,EAAShjC,EAAO0a,YAC/B,CACI,oBAAO0sB,CAAcy9C,GACjB,OAAOA,EAAQ7kF,EAAO0a,YAC9B,CACI,sBAAOm8D,CAAgB/xD,EAAUpa,GAC7B,OAAgB,GAAZoa,EACO9kB,EAAOud,cAAcuH,GAGrB9kB,EAAOwd,iBAAiB9S,EAE3C,CACI,iBAAA06D,GACI,GAAiB,MAAb9nE,KAAKw6B,KACL,OAAO,EACX,IAAImoB,EAAiB3iD,KAAKw6B,KAAKgqB,oBAI/B,OAHIxkD,KAAKuwD,YAAY7tD,EAAO0d,WAAW1a,WAAkB,MAAEF,SACvDm9C,EAAiB3iD,KAAKm/D,YAAYz8D,EAAO0d,WAAW1a,WAAkB,MAAEF,QAErExF,KAAKyrE,6BAA6B9oB,EACjD,CACI,4BAAA8oB,CAA6B9oB,GACzB,MAAM6kC,EAAiB7kC,EAAiB,GAClC8kC,EAAiB/kF,EAAOiR,aAAe6zE,EACvCE,EAAgBhlF,EAAOkR,aAAe6zE,EAC5C,OAAOznF,KAAK2mD,iBAAmB+gC,CACvC,CACI,wBAAOhqD,CAAkBnkB,GACrB,OAAO,GAAM,GAAK7N,KAAKwC,MAAMxC,KAAKoV,KAAKvH,GAAK,EACpD,CACI,eAAAq7D,CAAgB6P,GACZ,IAAInqD,GAAQ,EACZ,IAAK,MAAMtI,KAAUyyD,EAAS,CAC1B,MAAMlxD,EAAU7nB,KAAKY,IAAI0lB,EAAOuB,SAC1BC,EAAU9nB,KAAKY,IAAI0lB,EAAOwB,SAChC,KAAMD,EAAU,KAAUC,EAAU,KAAM,CACtC8G,GAAQ,EACR,KAChB,CACgB/G,EAAU8B,IACVrD,EAAOuB,QAAU,GACjBC,EAAU6B,IACVrD,EAAOwB,QAAU,EACjC,CACQ,GAAI8G,EACA,IAAK,MAAMtI,KAAUyyD,EACjBzyD,EAAOuB,QAAU,EACjBvB,EAAOwB,QAAU,CAGjC,CACI,wBAAOm0D,CAAkBhjC,EAAWijC,EAAWC,GAC3C,OAAa,CAET,MAAMriF,IADNoiF,EAC0BC,EACpBn8B,EAAShgD,KAAKY,IAAIq4C,EAAUn/C,IAClC,GAAIowB,OAAOy/C,SAAS3pB,KAAsB,GAAVA,GAAiBA,GAAUr2B,GACvD,MACJsvB,EAAUn/C,GAAS,CAC/B,CACA,CACI,mBAAO+uE,CAAa7oB,EAAQo8B,EAAQC,EAAQ7T,EAAauQ,GACrD,IAAK,IAAIh5E,EAAI,EAAGA,EAAIyoE,EAAazoE,IAAK,CAClC,MAAMumB,EAASyyD,EAAQh5E,GACjB8nB,EAAUvB,EAAOuB,QACjBC,EAAUxB,EAAOwB,QACjBR,EAAKhB,EAAOgB,GACZC,EAAKjB,EAAOiB,GACZ1kB,EAAKyjB,EAAOzjB,GACZC,EAAKwjB,EAAOxjB,GACZC,EAAKujB,EAAOvjB,GAClBi9C,EAASn9C,EAAKm9C,EAASl9C,EAAKs5E,EAASr5E,EAAKs5E,EAAS/0D,EAAKO,EAAUN,EAAKO,EACvExB,EAAOgB,GAAKA,EAAKhB,EAAOkB,QACxBlB,EAAOiB,GAAKA,EAAKjB,EAAOmB,QACpBnB,EAAOyB,oCACPzB,EAAOzjB,GAAKA,EAAKyjB,EAAOoB,QACxBpB,EAAOxjB,GAAKA,EAAKwjB,EAAOqB,QACxBrB,EAAOvjB,GAAKA,EAAKujB,EAAOsB,UAGxBtB,EAAOzjB,GAAKA,EAAKyjB,EAAOoB,QACxBpB,EAAOxjB,GAAKA,EAAKwjB,EAAOqB,QACxBrB,EAAOvjB,GAAKA,EAAKujB,EAAOsB,SAE5BtB,EAAOwB,QAAUD,EACjBvB,EAAOuB,QAAUm4B,EACjBq8B,EAASv0D,EACTs0D,EAASv0D,CACrB,CACQ,OAAOm4B,CACf,CACI,sBAAA0D,CAAuB44B,GAAQ,GAC3B,IAAIloF,EAAImoF,EACR,MAAM9rD,GAAoC,QAApBr8B,EAAKE,KAAKw6B,YAAyB,IAAP16B,OAAgB,EAASA,EAAGq8B,aAAoC,QAApB8rD,EAAKjoF,KAAKw6B,YAAyB,IAAPytD,OAAgB,EAASA,EAAG9rD,YAAc,EACpK,OAAI6rD,EACOtlF,EAAOkR,aAAelR,EAAOiR,aAAewoB,EAAcn8B,KAAKu0C,IAG/Dv0C,KAAKk7B,KAAOx4B,EAAOkR,cAAgB5T,KAAK+5B,KAAOr3B,EAAOiR,cAAgB3T,KAAK0oE,KAAOvsC,EAAcn8B,KAAKu0C,KAExH,E,OAEA9W,GAAMwqB,4BAA8B,IAAIv4B,EACxC+N,GAAM4qB,0BAA4B,IAAI34B,EACtC+N,GAAM4jD,qBAAuB,GAC7B5jD,GAAMglD,sBAAwB,GAC9BhlD,GAAMsmD,qBAAuBtgF,MAAM,KAAQ0vD,UAAKzlC,GAChD+P,GAAMgmD,0BAA4BhgF,MAAM,GAAG0vD,UAAKzlC,GAChD+P,GAAMmoD,sBAAwB,GAC9BnoD,GAAMgoD,mBAAqB,GAC3BhoD,GAAMsoD,kBAAoB,GAC1BtoD,GAAMulD,kBAAoB,GAC1BvlD,GAAM0mD,mBAAqB,GAC3B1mD,GAAM4lD,uBAAyB,GAC/B5lD,GAAMqlD,0BAA4Br/E,MAAMf,EAAOgb,gBAAkB,GAAGy1C,UAAKzlC,GACzE+P,GAAM+jD,kBAAoB,gWAKwC9+E,EAAO8I,eAAiB,4DAClC9I,EAAO8I,eAAiB,kqDAsCvC9I,EAAO8I,eAAiB,wDACd9I,EAAO8I,eAAiB,0WAStEkuC,MAAM,MACXjc,GAAMkkD,wBAA0B,4LAGsBj/E,EAAOyb,aAAe,6TAIvEu7B,MAAM,M"}